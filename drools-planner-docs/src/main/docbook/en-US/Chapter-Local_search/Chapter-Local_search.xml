<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Local search solver</title>

  <section>
    <title>Overview</title>

    <para>Local search tends to find a feasible solution relatively fast. Because it acts very much like a human, it is
    also pretty natural to program.</para>

    <para>Local search solves a problem by making a move on the current solution which changes it into a better
    solution. It does that high number of iterations untill its time runs out and it is satisfied with the solution. It
    needs to start from an initialized solution, therefor it's recommended to configure a construction heuristic solver
    phase before it.</para>
  </section>

  <section>
    <title>A move</title>

    <para>A move is the change from a solution A to a solution B. For example, below you can see a single move on the
    starting solution of 4 queens that moves a single queen to another row:</para>

    <figure>
      <title>A single move (4 queens example)</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Local_search/singleMoveNQueens04.png" format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>A move can have a small or large impact. In the above example, the move of queen <emphasis>C0 to C2</emphasis>
    is a small move. Some moves are the same move type. These are some possibilities for move types in n queens:</para>

    <itemizedlist>
      <listitem>
        <para>Move a single queen to another row. This is a small move. For example, move queen <emphasis>C0 to
        C2</emphasis>.</para>
      </listitem>

      <listitem>
        <para>Move all queens a number of rows down or up. This a big move.</para>
      </listitem>

      <listitem>
        <para>Move a single queen to another column. This is a small move. For example, move queen <emphasis>C2 to
        A0</emphasis> (placing it on top of queen A0).</para>
      </listitem>

      <listitem>
        <para>Add a queen to the board at a certain row and column.</para>
      </listitem>

      <listitem>
        <para>Remove a queen from the board.</para>
      </listitem>
    </itemizedlist>

    <para>Because we have decided that all queens will be on the board at all times and each queen has an appointed
    column (for performance reasons), only the first 2 move types are usable in our example. Furthermore, we 're only
    using the first move type in the example because we think it gives the best performance, but you are welcome to
    prove us wrong.</para>

    <para>Each of your move types will be an implementation of the <literal>Move</literal> interface:</para>

    <programlisting language="java">public interface Move {

    boolean isMoveDoable(EvaluationHandler evaluationHandler);

    Move createUndoMove(EvaluationHandler evaluationHandler);

    void doMove(EvaluationHandler evaluationHandler);

}</programlisting>

    <para>Let's take a look at the <literal>Move</literal> implementation for 4 queens which moves a queen to a
    different row:</para>

    <programlisting language="java">public class YChangeMove implements Move {

    private Queen queen;
    private int toY;

    public YChangeMove(Queen queen, int toY) {
        this.queen = queen;
        this.toY = toY;
    }

    // ... see below

}</programlisting>

    <para>An instance of <literal>YChangeMove</literal> moves a queen from its current y to a different y.</para>

    <para>Drools Planner calls the <literal>doMove(WorkingMemory)</literal> method to do a move. The
    <literal>Move</literal> implementation must notify the working memory of any changes it does on the solution
    facts:</para>

    <programlisting language="java">    public void doMove(WorkingMemory workingMemory) {
        FactHandle queenHandle = workingMemory.getFactHandle(queen);
        queen.setY(toY);
        workingMemory.update(queenHandle, queen); // after changes are made
    }</programlisting>

    <para>You need to call the <literal>workingMemory.update(FactHandle, Object)</literal> method after modifying the
    fact. Note that you can alter multiple facts in a single move and effectively create a big move (also known as a
    coarse-grained move).</para>

    <para>Drools Planner automatically filters out <emphasis>non doable moves</emphasis> by calling the
    <literal>isDoable(WorkingMemory)</literal> method on a move. A <emphasis>non doable move</emphasis> is:</para>

    <itemizedlist>
      <listitem>
        <para>A move that changes nothing on the current solution. For example, moving queen B0 to row 0 is not
        doable.</para>
      </listitem>

      <listitem>
        <para>A move that is impossible to do on the current solution. For example, moving queen B0 to row 10 is not
        doable because it would move it outside the board limits.</para>
      </listitem>
    </itemizedlist>

    <para>In the n queens example, a move which moves the queen from its current row to the same row isn't
    doable:</para>

    <programlisting language="java">    public boolean isMoveDoable(WorkingMemory workingMemory) {
        int fromY = queen.getY();
        return fromY != toY;
    }</programlisting>

    <para>Because we won't generate a move which can move a queen outside the board limits, we don't need to check it. A
    move that is currently not doable can become doable on a later solution.</para>

    <para>Each move has an <emphasis>undo move</emphasis>: a move (usually of the same type) which does the exact
    opposite. In the above example the undo move of <emphasis>C0 to C2</emphasis> would be the move <emphasis>C2 to
    C0</emphasis>. An undo move can be created from a move, but only before the move has been done on the current
    solution.</para>

    <programlisting language="java">    public Move createUndoMove(WorkingMemory workingMemory) {
        return new YChangeMove(queen, queen.getY());
    }</programlisting>

    <para>Notice that if C0 would have already been moved to C2, the undo move would create the move <emphasis>C2 to
    C2</emphasis>, instead of the move <emphasis>C2 to C0</emphasis>.</para>

    <para>The local search solver can do and undo a move more than once, even on different (successive)
    solutions.</para>

    <para>A move must implement the <literal>equals()</literal> and <literal>hashcode()</literal> methods. 2 moves which
    make the same change on a solution, must be equal.</para>

    <programlisting language="java">    public boolean equals(Object o) {
        if (this == o) {
            return true;
        } else if (o instanceof YChangeMove) {
            YChangeMove other = (YChangeMove) o;
            return new EqualsBuilder()
                    .append(queen, other.queen)
                    .append(toY, other.toY)
                    .isEquals();
        } else {
            return false;
        }
    }

    public int hashCode() {
        return new HashCodeBuilder()
                .append(queen)
                .append(toY)
                .toHashCode();
    }</programlisting>

    <para>In the above example, the <literal>Queen</literal> class uses the default <literal>Object</literal>
    <literal>equal()</literal> and <literal>hashcode()</literal> implementations. Notice that it checks if the other
    move is an instance of the same move type. This is important because a move will be compared to a move with another
    move type if you're using more then 1 move type.</para>

    <para>It's also recommended to implement the <literal>toString()</literal> method as it allows you to read Drools
    Planner's logging more easily:</para>

    <programlisting language="java">    public String toString() {
        return queen + " =&gt; " + toY;
    }</programlisting>

    <para>Now that we can make a single move, let's take a look at generating moves.</para>
  </section>

  <section>
    <title>Move generation</title>

    <para>At each solution, local search will try all possible moves and pick the best move to change to the next
    solution. It's up to you to generate those moves. Let's take a look at all the possible moves on the starting
    solution of 4 queens:</para>

    <figure>
      <title>Possible moves at step 0 (4 queens example)</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Local_search/possibleMovesNQueens04.png" format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>As you can see, not all the moves are doable. At the starting solution we have 12 doable moves (<literal>n *
    (n - 1)</literal>), one of which will be move which changes the starting solution into the next solution. Notice
    that the number of possible solutions is 256 (<literal>n ^ n</literal>), much more that the amount of doable moves.
    Don't create a move to every possible solution. Instead use moves which can be sequentially combined to reach every
    possible solution.</para>

    <para>It's highly recommended that you verify all solutions are connected by your move set. This means that by
    combining a finite number of moves you can reach any solution from any solution. Otherwise you're already excluding
    solutions at the start. Especially if you're using only big moves, you should check it. Just because big moves
    outperform small moves in a short test run, it doesn't mean that they will outperform them in a long test
    run.</para>

    <para>You can mix different move types. Usually you're better off preferring small (fine-grained) moves over big
    (course-grained) moves because the score delta calculation will pay off more. However, as the traveling tournament
    example proves, if you can remove a hard constraint by using a certain set of big moves, you can win performance and
    scalability. Try it yourself: run both the simple (small moves) and the smart (big moves) version of the traveling
    tournament example. The smart version evaluates a lot less unfeasible solutions, which enables it to outperform and
    outscale the simple version.</para>

    <para>Move generation currently happens with a <literal>MoveFactory</literal>:</para>

    <programlisting language="java">public class NQueensMoveFactory extends CachedMoveListMoveFactory {

    public List&lt;Move&gt; createMoveList(Solution solution) {
        NQueens nQueens = (NQueens) solution;
        List&lt;Move&gt; moveList = new ArrayList&lt;Move&gt;();
        for (Queen queen : nQueens.getQueenList()) {
            for (int n : nQueens.createNList()) {
                moveList.add(new YChangeMove(queen, n));
            }
        }
        return moveList;
    }

}</programlisting>

    <para>But we might be making move generation part of the DRL's in the future.</para>
  </section>

  <section>
    <title>A step</title>

    <para>A step is the winning move. The local search solver tries every move on the current solution and picks the
    best accepted move as the step:</para>

    <figure>
      <title>Decide the next step at step 0 (4 queens example)</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Local_search/decideNextStepNQueens04.png" format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Because the move <emphasis>B0 to B3</emphasis> has the highest score (<literal>-3</literal>), it is picked as
    the next step. Notice that <emphasis>C0 to C3</emphasis> (not shown) could also have been picked because it also has
    the score <literal>-3</literal>. If multiple moves have the same highest score, one is picked randomly, in this case
    <emphasis>B0 to B3</emphasis>.</para>

    <para>The step is made and from that new solution, the local search solver tries all the possible moves again, to
    decide the next step after that. It continually does this in a loop, and we get something like this:</para>

    <figure>
      <title>All steps (4 queens example)</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Local_search/allStepsNQueens04.png" format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Notice that the local search solver doesn't use a search tree, but a search path. The search path is
    highlighted by the green arrows. At each step it tries all possible moves, but unless it's the step, it doesn't
    investigate that solution further. This is one of the reasons why local search is very scalable.</para>

    <para>As you can see, the local search solver solves the 4 queens problem by starting with the starting solution and
    make the following steps sequentially:</para>

    <orderedlist>
      <listitem>
        <para><emphasis>B0 to B3</emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis>D0 to B2</emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis>A0 to B1</emphasis></para>
      </listitem>
    </orderedlist>

    <para>If we turn on <literal>INFO</literal> logging for the category <literal>org.drools.planner</literal>:</para>

    <programlisting>&lt;log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/"&gt;

    &lt;category name="org.drools.planner"&gt;
        &lt;priority value="info" /&gt;
    &lt;/category&gt;

    ...

&lt;/log4j:configuration&gt;</programlisting>

    <para>Then those steps are reflected into the logging:</para>

    <programlisting>INFO  Solving with random seed (0).
INFO  Starting with time spend (0), score (-6), new best score (-6).
INFO  Step index (0), time spend (4), score (-3), new best score (-3), accepted move size (12) for picked step ([Queen-1] 1 @ 0 =&gt; 3).
INFO  Step index (1), time spend (7), score (-1), new best score (-1), accepted move size (12) for picked step ([Queen-0] 0 @ 0 =&gt; 1).
INFO  Step index (2), time spend (10), score (0), new best score (0), accepted move size (12) for picked step ([Queen-3] 3 @ 0 =&gt; 2).
INFO  Solved with time spend (10) for best score (0) with average calculate count per second (7300).</programlisting>

    <para>Notice that the logging uses the <literal>toString()</literal> method of our <literal>Move</literal>
    implementation: <literal>[Queen-1] 1 @ 0 =&gt; 3</literal>.</para>

    <para>The local search solver solves the 4 queens problem in 3 steps, by evaluating only 37 possible solutions (3
    steps with 12 moves each + 1 starting solution), which is only fraction of all 256 possible solutions. It solves 16
    queens in 31 steps, by evaluating only 7441 out of 18446744073709551616 possible solutions.</para>
  </section>

  <section>
    <title>Getting stuck in local optima</title>

    <para>A <emphasis>simple local search</emphasis> always takes improving moves. This may seem like a good thing, but
    it's not. It suffers from a number of problems:</para>

    <itemizedlist>
      <listitem>
        <para>It can get stuck in a local optimum. For example if it reaches a solution X with a score -1 and there is
        no improving move, it is forced to take a next step that leads to a solution Y with score -2, after that
        however, it's very real that it will pick the step back to solution X with score -1. It will then start looping
        between solution X and Y.</para>
      </listitem>

      <listitem>
        <para>It can start walking in its own footsteps, picking the same next step at every step.</para>
      </listitem>
    </itemizedlist>

    <para>Of course Drools Planner implements better local searches, such as <emphasis>tabu search</emphasis> and
    <emphasis>simulated annealing</emphasis> which can avoid these problems. We recommend to never use a simple local
    search, unless you're absolutely sure there are no local optima in your planning problem.</para>
  </section>

  <section>
    <title>Deciding the next step</title>

    <para>The local search solver decides the next step with the aid of 3 configurable components:</para>

    <itemizedlist>
      <listitem>
        <para>A <emphasis>selector</emphasis> which selects (or generates) the possible moves of the current
        solution.</para>
      </listitem>

      <listitem>
        <para>An <emphasis>acceptor</emphasis> which filters out unacceptable moves. It can also weigh a move it
        accepts.</para>
      </listitem>

      <listitem>
        <para>A <emphasis>forager</emphasis> which gathers all accepted moves and picks the next step from them.</para>
      </listitem>
    </itemizedlist>

    <figure>
      <title>Decide the next step at step 0 (4 queens example)</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Local_search/decideNextStepNQueens04.png" format="PNG"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>In the above example the selector generated the moves shown with the blue lines, the acceptor accepted all of
    them and the forager picked the move <emphasis>B0 to B3</emphasis>.</para>

    <para>If we turn on <literal>DEBUG</literal> logging for the category <literal>org.drools.planner</literal>, we can
    see the decision making in the log:</para>

    <programlisting>INFO  Solving with random seed (0).
INFO  Starting with time spend (0), score (-6), new best score (-6).
DEBUG     Ignoring not doable move ([Queen-0] 0 @ 0 =&gt; 0).
DEBUG     Move score (-4), accept chance (1.0) for move ([Queen-0] 0 @ 0 =&gt; 1).
DEBUG     Move score (-4), accept chance (1.0) for move ([Queen-0] 0 @ 0 =&gt; 2).
DEBUG     Move score (-4), accept chance (1.0) for move ([Queen-0] 0 @ 0 =&gt; 3).
...
DEBUG     Move score (-3), accept chance (1.0) for move ([Queen-1] 1 @ 0 =&gt; 3).
...
DEBUG     Move score (-3), accept chance (1.0) for move ([Queen-2] 2 @ 0 =&gt; 3).
...
DEBUG     Move score (-4), accept chance (1.0) for move ([Queen-3] 3 @ 0 =&gt; 3).
INFO  Step index (0), time spend (6), score (-3), new best score (-3), accepted move size (12) for picked step ([Queen-1] 1 @ 0 =&gt; 3).
...</programlisting>

    <section>
      <title>Selector</title>

      <para>A selector is currently based on a <literal>MoveFactory</literal>.</para>

      <programlisting language="xml">  &lt;selector&gt;
    &lt;moveFactoryClass&gt;org.drools.planner.examples.nqueens.solver.NQueensMoveFactory&lt;/moveFactoryClass&gt;
  &lt;/selector&gt;</programlisting>

      <para>You're not obligated to generate the same set of moves at each step. It's generally a good idea to use
      several selectors, mixing fine grained moves and course grained moves:</para>

      <programlisting language="xml">  &lt;selector&gt;
    &lt;selector&gt;
      &lt;moveFactoryClass&gt;org.drools.planner.examples.nurserostering.solver.move.factory.EmployeeChangeMoveFactory&lt;/moveFactoryClass&gt;
    &lt;/selector&gt;
    &lt;selector&gt;
      &lt;moveFactoryClass&gt;org.drools.planner.examples.nurserostering.solver.move.factory.AssignmentSwitchMoveFactory&lt;/moveFactoryClass&gt;
    &lt;/selector&gt;
    &lt;selector&gt;
      &lt;moveFactoryClass&gt;org.drools.planner.examples.nurserostering.solver.move.factory.AssignmentPillarPartSwitchMoveFactory&lt;/moveFactoryClass&gt;
    &lt;/selector&gt;
  &lt;/selector&gt;</programlisting>
    </section>

    <section>
      <title>Acceptor</title>

      <para>An acceptor is used (together with a forager) to active tabu search, simulated annealing, great deluge, ...
      For each move it generates an accept chance. If a move is rejected it is given an accept chance of
      <literal>0.0</literal>.</para>

      <para>You can implement your own <literal>Acceptor</literal>, although the build-in acceptors should suffice for
      most needs. You can also combine multiple acceptors.</para>

      <section>
        <title>Tabu search acceptor</title>

        <para>When tabu search takes steps it creates tabu's. It does not accept a move as the next step if that move
        breaks tabu. Drools Planner implements several tabu types:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>Solution tabu</emphasis> makes recently visited solutions tabu. It does not accept a move
            that leads to one of those solutions. If you can spare the memory, don't be cheap on the tabu size. We
            recommend this type of tabu because it tends to give the best results and requires little or no
            tweaking.</para>

            <programlisting language="xml">    &lt;acceptor&gt;
        &lt;completeSolutionTabuSize&gt;1000&lt;/completeSolutionTabuSize&gt;
    &lt;/acceptor&gt;</programlisting>
          </listitem>

          <listitem>
            <para><emphasis>Move tabu</emphasis> makes recent steps tabu. It does not accept a move equal to one of
            those steps.</para>

            <programlisting language="xml">    &lt;acceptor&gt;
        &lt;completeMoveTabuSize&gt;7&lt;/completeMoveTabuSize&gt;
    &lt;/acceptor&gt;</programlisting>
          </listitem>

          <listitem>
            <para><emphasis>Undo move tabu </emphasis>makes the undo move of recent steps tabu.</para>

            <programlisting language="xml">    &lt;acceptor&gt;
        &lt;completeUndoMoveTabuSize&gt;7&lt;/completeUndoMoveTabuSize&gt;
    &lt;/acceptor&gt;</programlisting>
          </listitem>

          <listitem>
            <para><emphasis>Property tabu</emphasis> makes a property of recent steps tabu. For example, it can make the
            queen tabu, so that a recently moved queen can't be moved.</para>

            <programlisting language="xml">    &lt;acceptor&gt;
        &lt;completePropertyTabuSize&gt;5&lt;/completePropertyTabuSize&gt;
    &lt;/acceptor&gt;</programlisting>

            <para>To use property tabu, your moves must implement the <literal>TabuPropertyEnabled</literal> interface,
            for example:</para>

            <programlisting language="java">public class YChangeMove implements Move, TabuPropertyEnabled {

    private Queen queen;
    private int toY;

    // ...

    public List&lt;? extends Object&gt; getTabuPropertyList() {
        return Collections.singletonList(queen);
    }

}</programlisting>

            <para>You can also make multiple properties tabu (with OR or AND semantics):</para>

            <programlisting language="java">    public List&lt;? extends Object&gt; getTabuPropertyList() {
        // tabu with other moves that contain the same leftExam OR the same rightExam
        return Arrays.asList(leftExam, rightExam);
    }</programlisting>

            <programlisting language="java">    public List&lt;? extends Object&gt; getTabuPropertyList() {
        // tabu with other moves that contain the same exam AND the same toPeriod (but not necessary the same toRoom)
        return Collections.singletonList(Arrays.asList(exam, toPeriod));
    }</programlisting>
          </listitem>
        </itemizedlist>

        <para>You can even combine tabu types:</para>

        <programlisting language="xml">    &lt;acceptor&gt;
        &lt;completeSolutionTabuSize&gt;1000&lt;/completeSolutionTabuSize&gt;
        &lt;completeMoveTabuSize&gt;7&lt;/completeMoveTabuSize&gt;
    &lt;/acceptor&gt;</programlisting>

        <para>If you pick a too small tabu size, your solver can still get stuck in a local optimum. On the other hand,
        with the exception of solution tabu, if you pick a too large tabu size, your solver can get stuck by bouncing of
        the walls. Use the benchmarker to fine tweak your configuration. Experiments teach us that it is generally best
        to use a prime number for the move tabu, undo move tabu or property tabu size.</para>

        <para>A tabu search acceptor should be combined with a high or no subset selection.</para>
      </section>

      <section>
        <title>Simulated annealing acceptor</title>

        <para>Simulated annealing does not always pick the move with the highest score, neither does it evaluate many
        moves per step. At least at first. Instead, it gives unimproving moves also a chance to be picked, depending on
        its score and the time gradient of the <literal>Termination</literal>. In the end, it gradually turns into a
        simple local search, only accepting improving moves.</para>

        <para>In many use cases, simulated annealing surpasses tabu search. By changing a few lines of configuration,
        you can easily switch from tabu search to simulated annealing and back.</para>

        <para>Start with a <literal>simulatedAnnealingStartingTemperature</literal> set to the maximum score delta a
        single move can cause. Use the <literal>Benchmarker</literal> to tweak the value.</para>

        <programlisting language="xml">    &lt;acceptor&gt;
      &lt;simulatedAnnealingStartingTemperature&gt;2hard/100soft&lt;/simulatedAnnealingStartingTemperature&gt;
    &lt;/acceptor&gt;
    &lt;forager&gt;
        &lt;minimalAcceptedSelection&gt;4&lt;/minimalAcceptedSelection&gt;
    &lt;/forager&gt;</programlisting>

        <para>A simulated annealing acceptor should be combined with a low subset selection. The classic algorithm uses
        a <literal>minimalAcceptedSelection</literal> of <literal>1</literal>, but usually <literal>4</literal> performs
        better.</para>

        <para>You can even combine it with a tabu acceptor at the same time. Use a lower tabu size than in a pure tabu
        search configuration.</para>

        <programlisting language="xml">    &lt;acceptor&gt;
      &lt;simulatedAnnealingStartingTemperature&gt;10.0&lt;/simulatedAnnealingStartingTemperature&gt;
      &lt;completePropertyTabuSize&gt;5&lt;/completePropertyTabuSize&gt;
    &lt;/acceptor&gt;
    &lt;forager&gt;
        &lt;minimalAcceptedSelection&gt;4&lt;/minimalAcceptedSelection&gt;
    &lt;/forager&gt;</programlisting>

        <para>This differs from phasing, another powerful technique, where first simulated annealing is used, followed
        by tabu search.</para>
      </section>
    </section>

    <section>
      <title>Forager</title>

      <para>A forager gathers all accepted moves and picks the move which is the next step. Normally it picks the
      accepted move with the highest score. If several accepted moves have the highest score, one is picked randomly,
      weighted on their accept chance.</para>

      <para>You can implement your own <literal>Forager</literal>, although the build-in forager should suffice for most
      needs.</para>

      <section>
        <title>Subset selection</title>

        <para>When there are many possible moves, it becomes inefficient to evaluate all of them at every step. To
        evaluate only a random subset of all the moves, use:</para>

        <itemizedlist>
          <listitem>
            <para>An <literal>minimalAcceptedSelection</literal> integer, which specifies how many accepted moves should
            have be evaluated during each step. By default it is positive infinity, so all accepted moves are evaluated
            at every step.</para>

            <programlisting language="xml">  &lt;forager&gt;
    &lt;minimalAcceptedSelection&gt;1000&lt;/minimalAcceptedSelection&gt;
  &lt;/forager&gt;</programlisting>
          </listitem>
        </itemizedlist>

        <para>Unlike the n queens problem, real world problems require the use of subset selection. Start from an
        <literal>minimalAcceptedSelection</literal> that takes a step in less then 2 seconds. Turn on INFO logging to
        see the step times. Use the <literal>Benchmarker</literal> to tweak the value.</para>
      </section>

      <section>
        <title>Pick early type</title>

        <para>A forager can pick a move early during a step, ignoring subsequent selected moves. There are 3 pick early
        types:</para>

        <itemizedlist>
          <listitem>
            <para><literal>NEVER</literal>: A move is never picked early: all accepted moves are evaluated that the
            selection allows. This is the default.</para>

            <programlisting language="xml">    &lt;forager&gt;
        &lt;pickEarlyType&gt;NEVER&lt;/pickEarlyType&gt;
    &lt;/forager&gt;</programlisting>
          </listitem>

          <listitem>
            <para><literal>FIRST_BEST_SCORE_IMPROVING</literal>: Pick the first accepted move that improves the best
            score. If none improve the best score, it behaves exactly like the pickEarlyType NEVER.</para>

            <programlisting language="xml">    &lt;forager&gt;
        &lt;pickEarlyType&gt;FIRST_BEST_SCORE_IMPROVING&lt;/pickEarlyType&gt;
    &lt;/forager&gt;</programlisting>
          </listitem>

          <listitem>
            <para><literal>FIRST_LAST_STEP_SCORE_IMPROVING</literal>: Pick the first accepted move that improves the
            last step score. If none improve the last step score, it behaves exactly like the pickEarlyType
            NEVER.</para>

            <programlisting language="xml">    &lt;forager&gt;
        &lt;pickEarlyType&gt;FIRST_LAST_STEP_SCORE_IMPROVING&lt;/pickEarlyType&gt;
    &lt;/forager&gt;</programlisting>
          </listitem>
        </itemizedlist>
      </section>
    </section>
  </section>

  <section>
    <title>Best solution</title>

    <para>Because the current solution can degrade (especially in tabu search and simulated annealing), the local search
    solver remembers the best solution it has encountered through the entire search path. Each time the current solution
    is better than the last best solution, the current solution is cloned and referenced as the new best
    solution.</para>

    <para>You can listen to solver events, including when the best solution changes during solving, by adding a
    <literal>SolverEventListener</literal> to the <literal>Solver</literal>:</para>

    <programlisting language="java">public interface Solver {

    // ...

    void addEventListener(SolverEventListener eventListener);
    void removeEventListener(SolverEventListener eventListener);

}</programlisting>
  </section>

  <section>
    <title>Termination</title>

    <para>Sooner or later the local search solver will have to stop solving. This can be because of a number of reasons:
    the time is up, the perfect score has been reached, ... The only thing you can't depend on is on finding the optimal
    solution (unless you know the optimal score), because a local search algorithm doesn't know it when it finds the
    optimal solution. For real-life problems this doesn't turn out to be much of a problem, because finding the optimal
    solution would take billions of years, so you 'll want to terminate sooner anyway.</para>

    <para>You can configure when a local search solver needs to stop by configuring a <literal>Termination</literal>. A
    <literal>Termination</literal> can calculate a time gradient, which is a ratio between the time already spend
    solving and the expected entire solving time.</para>

    <para>You can implement your own <literal>Termination</literal>, although the build-in Terminations should suffice
    for most needs.</para>

    <section>
      <title>TimeMillisSpendTermination</title>

      <para>Terminates when an amount of time has been reached:</para>

      <programlisting language="xml">    &lt;termination&gt;
        &lt;maximumMinutesSpend&gt;2&lt;/maximumMinutesSpend&gt;
    &lt;/termination&gt;</programlisting>

      <para>or</para>

      <programlisting language="xml">    &lt;termination&gt;
        &lt;maximumHoursSpend&gt;1&lt;/maximumHoursSpend&gt;
    &lt;/termination&gt;</programlisting>

      <para>Note that the time taken by a <literal>StartingSolutionInitializer</literal> also is taken into account by
      this Termination. So if you give the solver 2 minutes to solve something, but the initializer takes 1 minute, the
      local search solver will only have a minute left.</para>

      <para>Note that if you use this Termination, you will most likely sacrifice reproducibility. The best solution
      will depend on available CPU time, not only because it influences the amount of steps taken, but also because time
      gradient based algorithms (such as simulated annealing) will probably act differently on each run.</para>
    </section>

    <section>
      <title>StepCountTermination</title>

      <para>Terminates when an amount of steps has been reached:</para>

      <programlisting language="xml">    &lt;termination&gt;
        &lt;maximumStepCount&gt;100&lt;/maximumStepCount&gt;
    &lt;/termination&gt;</programlisting>
    </section>

    <section>
      <title>ScoreAttainedTermination</title>

      <para>Terminates when a certain score has been reached. You can use this Termination if you know the perfect
      score, for example for 4 queens:</para>

      <programlisting language="xml">    &lt;termination&gt;
        &lt;scoreAttained&gt;0&lt;/scoreAttained&gt;
    &lt;/termination&gt;</programlisting>

      <para>You can also use this Termination to terminate once it reaches a feasible solution. For a solver problem
      with hard and soft constraints, it could look like this:</para>

      <programlisting language="xml">    &lt;termination&gt;
        &lt;scoreAttained&gt;0hard/-5000soft&lt;/scoreAttained&gt;
    &lt;/termination&gt;</programlisting>
    </section>

    <section>
      <title>UnimprovedStepCountTermination</title>

      <para>Terminates when the best score hasn't improved in a number of steps:</para>

      <programlisting language="xml">    &lt;termination&gt;
        &lt;maximumUnimprovedStepCount&gt;100&lt;/maximumUnimprovedStepCount&gt;
    &lt;/termination&gt;</programlisting>

      <para>If it hasn't improved recently, it's probably not going to improve soon anyway and it's not worth the effort
      to continue. We have observed that once a new best solution is found (even after a long time of no improvement on
      the best solution), the next few step tend to improve the best solution too.</para>
    </section>

    <section>
      <title>Combining Terminations</title>

      <para>Terminations can be combined, for example: terminate after 100 steps or if a score of 0 has been
      reached:</para>

      <programlisting language="xml">    &lt;termination&gt;
        &lt;terminationCompositionStyle&gt;OR&lt;/terminationCompositionStyle&gt;
        &lt;maximumStepCount&gt;100&lt;/maximumStepCount&gt;
        &lt;scoreAttained&gt;0&lt;/scoreAttained&gt;
    &lt;/termination&gt;</programlisting>

      <para>Alternatively you can use AND, for example: terminate after reaching a feasible score of at least -100 and
      no improvements in 5 steps:</para>

      <programlisting language="xml">    &lt;termination&gt;
        &lt;terminationCompositionStyle&gt;AND&lt;/terminationCompositionStyle&gt;
        &lt;maximumUnimprovedStepCount&gt;5&lt;/maximumUnimprovedStepCount&gt;
        &lt;scoreAttained&gt;-100&lt;/scoreAttained&gt;
    &lt;/termination&gt;</programlisting>

      <para>This ensures it doesn't just terminate after finding a feasible solution, but also makes any obvious
      improvements on that solution before terminating.</para>
    </section>

    <section>
      <title>Another thread can ask a Solver to terminate early</title>

      <para>Sometimes you 'll want to terminate a Solver early from another thread, for example because a user action or
      a server restart. That cannot be configured by a <literal>Termination</literal> as it's impossible to predict when
      and if it will occur. Therefor the <literal>Solver</literal> interface has these 2 thread-safe methods:</para>

      <programlisting language="java">public interface Solver {

    // ...

    boolean terminateEarly();
    boolean isTerminateEarly();

}</programlisting>

      <para>If you call the <literal>terminateEarly()</literal> method from another thread, the
      <literal>Solver</literal> will terminate at its earliest convenience and the <literal>solve()</literal> method
      will return in the original solver thread.</para>
    </section>
  </section>

  <section>
    <title>Using a custom Selector, Acceptor, Forager or Termination</title>

    <para>It is easy to plug in a custom <literal>Selector</literal>, <literal>Acceptor</literal>,
    <literal>Forager</literal> or <literal>Termination</literal> by extending the abstract class and also the config
    class.</para>

    <para>For example, to use a custom <literal>Selector</literal>, extend the <literal>AbstractSelector</literal> class
    (see <literal>AllMovesOfOneExamSelector</literal>), extend the <literal>SelectorConfig</literal> class (see
    <literal>AllMovesOfOneExamSelectorConfig</literal>) and configure it in the configuration XML:</para>

    <programlisting language="xml">    &lt;selector class="org.drools.planner.examples.examination.solver.selector.AllMovesOfOneExamSelectorConfig"/&gt;</programlisting>

    <para>If you build a better implementation that's not domain specific, consider adding it as a patch in our issue
    tracker and we'll take it along in future refactors and optimize it.</para>
  </section>
</chapter>
