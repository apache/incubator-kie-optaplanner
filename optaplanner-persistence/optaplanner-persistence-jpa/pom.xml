<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.optaplanner</groupId>
    <artifactId>optaplanner-persistence</artifactId>
    <version>8.0.0.Final</version>
  </parent>

  <artifactId>optaplanner-persistence-jpa</artifactId>

  <name>OptaPlanner persistence JPA</name>
  <description>
    OptaPlanner solves planning problems.
    This lightweight, embeddable planning engine implements powerful and scalable algorithms
    to optimize business resource scheduling and planning.

    This module contains the JPA and Hibernate integration.
  </description>
  <url>https://www.optaplanner.org</url>

  <properties>
    <java.module.name>org.optaplanner.persistence.jpa</java.module.name>
  </properties>

  <dependencies>
    <!-- Internal dependencies -->
    <dependency>
      <groupId>org.optaplanner</groupId>
      <artifactId>optaplanner-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kie</groupId>
      <artifactId>kie-test-util</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- External dependencies -->
    <!-- Logging -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- JPA -->
    <dependency>
      <groupId>javax.persistence</groupId>
      <artifactId>javax.persistence-api</artifactId>
    </dependency>
    <!-- Hibernate -->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-core</artifactId>
      <exclusions>
        <!-- Duplicates classes of jakarta.activation:jakarta.activation-api -->
        <exclusion>
          <groupId>javax.activation</groupId>
          <artifactId>javax.activation-api</artifactId>
        </exclusion>
        <!-- Duplicates classes of jakarta.xml.bind:jakarta.xml.bind-api -->
        <exclusion>
          <groupId>javax.xml.bind</groupId>
          <artifactId>jaxb-api</artifactId>
        </exclusion>
      </exclusions>
      <!-- Used at compile time by *ScoreHibernateType -->
      <optional>true</optional>
    </dependency>
    <dependency>
      <!-- Replacement for 'org.apache.geronimo.specs:geronimo-jta_1.1_spec' which is excluded from Hibernate deps. -->
      <groupId>org.jboss.spec.javax.transaction</groupId>
      <artifactId>jboss-transaction-api_1.2_spec</artifactId>
      <scope>runtime</scope>
      <optional>true</optional>
    </dependency>

    <!-- Testing -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-entitymanager</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jboss.narayana.jta</groupId>
      <artifactId>narayana-jta</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>h2</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <dependencies>
        <dependency>
          <groupId>com.h2database</groupId>
          <artifactId>h2</artifactId>
          <scope>test</scope>
        </dependency>
      </dependencies>

      <properties>
        <maven.hibernate.dialect>org.hibernate.dialect.H2Dialect</maven.hibernate.dialect>
        <maven.datasource.classname>org.h2.jdbcx.JdbcDataSource</maven.datasource.classname>
        <maven.jdbc.driver.class>org.h2.Driver</maven.jdbc.driver.class>
        <maven.jdbc.db.name/>
        <maven.jdbc.db.port/>
        <maven.jdbc.db.server/>
        <maven.jdbc.driver.jar/>
        <maven.jdbc.username/>
        <maven.jdbc.password/>
        <maven.jdbc.url>jdbc:h2:</maven.jdbc.url>
        <maven.jdbc.schema>public</maven.jdbc.schema>
      </properties>
    </profile>

    <profile>
      <id>postgresql</id>
      <dependencies>
        <dependency>
          <groupId>org.postgresql</groupId>
          <artifactId>postgresql</artifactId>
          <scope>test</scope>
        </dependency>
      </dependencies>

      <properties>
        <maven.hibernate.dialect>org.hibernate.dialect.PostgreSQL95Dialect</maven.hibernate.dialect>
        <maven.datasource.classname>org.postgresql.xa.PGXADataSource</maven.datasource.classname>
        <maven.jdbc.driver.class>org.postgresql.Driver</maven.jdbc.driver.class>
        <maven.jdbc.db.name>postgres</maven.jdbc.db.name>
        <maven.jdbc.db.port>5432</maven.jdbc.db.port>
        <maven.jdbc.db.server/>
        <maven.jdbc.username>postgres</maven.jdbc.username>
        <maven.jdbc.password>postgres</maven.jdbc.password>
        <maven.jdbc.url>jdbc:postgresql://localhost:5432/postgres</maven.jdbc.url>
        <maven.jdbc.schema>public</maven.jdbc.schema>
      </properties>
    </profile>
  </profiles>

  <build>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>false</filtering>
      </testResource>
      <testResource>
        <directory>src/test/filtered-resources</directory>
        <filtering>true</filtering>
      </testResource>
    </testResources>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <additionalClasspathElements>
            <additionalClasspathElement>${maven.jdbc.driver.jar}</additionalClasspathElement>
          </additionalClasspathElements>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
