/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.meetingscheduling.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;

import org.optaplanner.examples.meetingscheduling.domain.Attendance;
import org.optaplanner.examples.meetingscheduling.domain.Meeting;
import org.optaplanner.examples.meetingscheduling.domain.MeetingAssignment;
import org.optaplanner.examples.meetingscheduling.domain.MeetingSchedule;
import org.optaplanner.examples.meetingscheduling.domain.Person;
import org.optaplanner.examples.meetingscheduling.domain.PreferredAttendance;
import org.optaplanner.examples.meetingscheduling.domain.RequiredAttendance;
import org.optaplanner.examples.meetingscheduling.domain.Room;
import org.optaplanner.examples.meetingscheduling.domain.TimeGrain;
import org.optaplanner.examples.meetingscheduling.domain.MeetingParametrization;

global HardMediumSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "Room conflict"
    when
        $leftAssignment : MeetingAssignment(room != null, $leftId : id, $room : room)
        $rightAssignment : MeetingAssignment(room == $room, calculateOverlap($leftAssignment) > 0, id > $leftId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $rightAssignment.calculateOverlap($leftAssignment));
end

// TODO Might be more efficient if a MeetingAssignment knows timeGrainList.size()
// TODO Can be obsolete if MeetingAssignment uses @ValueRangeProvider from entity for timeGrainRange
rule "Don't go in overtime"
    when
        MeetingAssignment(startingTimeGrain != null, $lastTimeGrainIndex : getLastTimeGrainIndex())
        not TimeGrain(grainIndex == $lastTimeGrainIndex)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $lastTimeGrainIndex);
end

rule "Required attendance conflict"
    when
        RequiredAttendance($leftId : id, $person : person, $leftMeeting : meeting)
        RequiredAttendance(person == $person, $rightMeeting : meeting, id > $leftId)
        $leftAssignment : MeetingAssignment(meeting == $leftMeeting, startingTimeGrain != null)
        $rightAssignment : MeetingAssignment(meeting == $rightMeeting, calculateOverlap($leftAssignment) > 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $rightAssignment.calculateOverlap($leftAssignment));
end

rule "Required room capacity"
    when
        MeetingAssignment(requiredCapacity > roomCapacity, $penalty : (roomCapacity - requiredCapacity))
    then
        scoreHolder.addHardConstraintMatch(kcontext, $penalty);
end

rule "Start and end on same day"
    when
        MeetingParametrization($weight: startAndEndOnSameDay != 0)
        MeetingAssignment(startingTimeGrain != null, $firstTimeGrain : startingTimeGrain, $lastTimeGrainIndex : getLastTimeGrainIndex())
        $lastTimeGrain : TimeGrain(grainIndex == $lastTimeGrainIndex, $firstTimeGrain.getDay() != getDay())
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $weight);
end

// ############################################################################
// Medium constraints
// ############################################################################

rule "Required and preferred attendance conflict"
    when
        RequiredAttendance($person : person, $leftMeeting : meeting)
        PreferredAttendance(person == $person, $rightMeeting : meeting)
        $leftAssignment : MeetingAssignment(meeting == $leftMeeting, startingTimeGrain != null)
        $rightAssignment : MeetingAssignment(meeting == $rightMeeting, calculateOverlap($leftAssignment) > 0)
    then
        // Fairness not implemented (see tennis example)
        scoreHolder.addMediumConstraintMatch(kcontext, -1);
end

rule "Preferred attendance conflict"
    when
        PreferredAttendance($leftId : id, $person : person, $leftMeeting : meeting)
        PreferredAttendance(person == $person, $rightMeeting : meeting, id > $leftId)
        $leftAssignment : MeetingAssignment(meeting == $leftMeeting, startingTimeGrain != null)
        $rightAssignment : MeetingAssignment(meeting == $rightMeeting, calculateOverlap($leftAssignment) > 0)
    then
        // Fairness not implemented (see tennis example)
        scoreHolder.addMediumConstraintMatch(kcontext, -1);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "Do all meetings as soon as possible"
    when
        MeetingParametrization($weight: doAllMeetingsAsSoonAsPossible != 0)
        MeetingAssignment(startingTimeGrain != null, $lastTimeGrainIndex : lastTimeGrainIndex)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $lastTimeGrainIndex * $weight);
end

rule "One TimeGrain break between two consecutive meetings"
    when
        MeetingParametrization($weight: oneTimeGrainBreakBetweenTwoConsecutiveMeetings != 0)
        MeetingAssignment(startingTimeGrain != null,  $leftEnd : getLastTimeGrainIndex())
        MeetingAssignment(startingTimeGrain != null, $leftEnd == startingTimeGrain.getGrainIndex() - 1)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight);
end

rule "Overlapping meetings"
    when
        MeetingParametrization($weight: overlappingMeetings != 0)
        $leftAssignment : MeetingAssignment(startingTimeGrain != null)
        $rightAssignment : MeetingAssignment(startingTimeGrain != null, meeting.getId() < $leftAssignment.getMeeting().getId(),
            meeting != $leftAssignment.getMeeting())
    then
        if ($leftAssignment.calculateOverlap($rightAssignment) != 0) {
            scoreHolder.addSoftConstraintMatch(kcontext, - $weight);
        }
end

rule "Assign larger rooms first"
    when
        MeetingParametrization($weight: assignLargerRoomsFirst != 0)
        MeetingAssignment(room != null, $room : room, $roomCapacity : room.getCapacity())
        Room($otherRoomCapacity : capacity, $roomCapacity < capacity)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($roomCapacity - $otherRoomCapacity) * $weight);
end

rule "Room stability"
    when
        MeetingParametrization($weight: roomStability != 0)
        Attendance($person : person, $leftMeeting : meeting)
        Attendance(person == $person, meeting != $leftMeeting, $rightMeeting : meeting)
        MeetingAssignment(meeting == $leftMeeting, startingTimeGrain != null, $leftStartTimeGrain : startingTimeGrain, $leftRoom : room)
        MeetingAssignment(meeting == $rightMeeting, startingTimeGrain != null, $leftStartTimeGrain.getGrainIndex() < startingTimeGrain.getGrainIndex(),
            $leftRoom != room, startingTimeGrain.getGrainIndex() - $leftMeeting.getDurationInGrains() - $leftStartTimeGrain.getGrainIndex() <= 2)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight);
end
