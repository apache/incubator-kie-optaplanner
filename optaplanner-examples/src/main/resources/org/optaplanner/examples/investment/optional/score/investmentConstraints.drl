package org.optaplanner.examples.investment.optional.score;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;

import org.optaplanner.examples.investment.domain.AssetClass;
import org.optaplanner.examples.investment.domain.AssetClassAllocation;
import org.optaplanner.examples.investment.domain.InvestmentSolution;
import org.optaplanner.examples.investment.domain.InvestmentParametrization;
import org.optaplanner.examples.investment.domain.Region;
import org.optaplanner.examples.investment.domain.Sector;

global HardSoftLongScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "Standard deviation maximum"
    when
        InvestmentParametrization($squaredStandardDeviationFemtosMaximum : calculateSquaredStandardDeviationFemtosMaximum())
        accumulate(
            $a : AssetClassAllocation() and $b : AssetClassAllocation();
            $squaredStandardDeviationFemtos : sum(AssetClassAllocation.calculateSquaredStandardDeviationFemtosFromTo($a, $b));
            $squaredStandardDeviationFemtos > $squaredStandardDeviationFemtosMaximum
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext,
                $squaredStandardDeviationFemtosMaximum - $squaredStandardDeviationFemtos);
end

rule "Region quantity maximum"
    when
        $region : Region($quantityMillisMaximum : quantityMillisMaximum)
        accumulate(
            AssetClassAllocation(region == $region, quantityMillis != null, $quantityMillis : quantityMillis);
            $quantityMillisTotal : sum($quantityMillis);
            $quantityMillisTotal > $quantityMillisMaximum
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext,
                $quantityMillisMaximum - $quantityMillisTotal);
end

rule "Sector quantity maximum"
    when
        $sector : Sector($quantityMillisMaximum : quantityMillisMaximum)
        accumulate(
            AssetClassAllocation(sector == $sector, quantityMillis != null, $quantityMillis : quantityMillis);
            $quantityMillisTotal : sum($quantityMillis);
            $quantityMillisTotal > $quantityMillisMaximum
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext,
                $quantityMillisMaximum - $quantityMillisTotal);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "Maximize expected return"
    when
        AssetClassAllocation($quantifiedExpectedReturnMicros : quantifiedExpectedReturnMicros)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $quantifiedExpectedReturnMicros);
end
