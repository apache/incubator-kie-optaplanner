/*
 * Copyright 2012 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.tsp.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaplanner.examples.vehiclerouting.domain.VrpDepot;
import org.optaplanner.examples.vehiclerouting.domain.VrpLocation;
import org.optaplanner.examples.vehiclerouting.domain.VrpVehicle;
import org.optaplanner.examples.vehiclerouting.domain.VrpSchedule;
import org.optaplanner.examples.vehiclerouting.domain.VrpCustomer;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "vehicleCapacity"
    when
        $vehicle : VrpVehicle($capacity : capacity)
        $demandTotal : Number(intValue > $capacity) from accumulate(
            VrpCustomer(
                vehicle == $vehicle,
                $demand : demand),
            sum($demand)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $capacity - $demandTotal.intValue());
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "distanceToPreviousStandstill"
    when
        $customer : VrpCustomer(previousStandstill != null, $distanceToPreviousStandstill : distanceToPreviousStandstill)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $distanceToPreviousStandstill);
end

rule "distanceFromLastCustomerToDepot"
    when
        $customer : VrpCustomer(previousStandstill != null)
        not VrpCustomer(previousStandstill == $customer)
    then
        VrpVehicle vehicle = $customer.getVehicle();
        scoreHolder.addSoftConstraintMatch(kcontext, - $customer.getDistanceTo(vehicle));
end
