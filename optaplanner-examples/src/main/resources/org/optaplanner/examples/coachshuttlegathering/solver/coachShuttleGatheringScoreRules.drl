/*
 * Copyright 2012 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.coachshuttlegathering.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;

import org.optaplanner.examples.coachshuttlegathering.domain.Bus;
import org.optaplanner.examples.coachshuttlegathering.domain.BusHub;
import org.optaplanner.examples.coachshuttlegathering.domain.BusOrStop;
import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;
import org.optaplanner.examples.coachshuttlegathering.domain.Coach;
import org.optaplanner.examples.coachshuttlegathering.domain.CoachShuttleGatheringSolution;
import org.optaplanner.examples.coachshuttlegathering.domain.Shuttle;
import org.optaplanner.examples.coachshuttlegathering.domain.StopOrHub;
import org.optaplanner.examples.coachshuttlegathering.domain.location.RoadLocation;
import org.optaplanner.examples.coachshuttlegathering.domain.location.RoadLocationArc;

global HardSoftLongScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "coachStopLimit"
    when
        $coach : Coach($stopLimit : stopLimit)
        $stopTotal : Number(intValue > $stopLimit) from accumulate(
            $stop : BusStop(bus == $coach),
            count($stop)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, ($stopLimit - $stopTotal.intValue()) * 1000000L);
end

rule "shuttleCapacity"
    when
        $shuttle : Shuttle($capacity : capacity)
        $passengerQuantityTotal : Number(intValue > $capacity) from accumulate(
            BusStop(bus == $shuttle, $passengerQuantity : passengerQuantity),
            sum($passengerQuantity)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, ($capacity - $passengerQuantityTotal.intValue()) * 1000L);
end

rule "coachCapacity"
    when
        $coach : Coach($capacity : capacity)
        $coachPassengerQuantityTotal : Number() from accumulate(
            BusStop(bus == $coach, $coachPassengerQuantity : passengerQuantity),
            sum($coachPassengerQuantity)
        )
        $shuttlePassengerQuantityTotal : Number() from accumulate(
            $shuttle : Shuttle($destination : destination)
            and BusStop(this == $destination, bus == $coach)
            and BusStop(bus == $shuttle, $shuttlePassengerQuantity : passengerQuantity),
            sum($shuttlePassengerQuantity)
        )
        eval($coachPassengerQuantityTotal.intValue() + $shuttlePassengerQuantityTotal.intValue() > $capacity)
    then
        scoreHolder.addHardConstraintMatch(kcontext, ($capacity - $coachPassengerQuantityTotal.intValue() - $shuttlePassengerQuantityTotal.intValue()) * 1000L);
end

rule "transportTime"
    when
        BusStop(transportTimeToHub != null, $cost : transportTimeRemainder < 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, $cost);
end

rule "shuttleDestinationIsCoachOrHub"
    when
        Shuttle(destination != null, $destination : destination)
        StopOrHub(this == $destination, visitedByCoach == false)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - 1000000000L);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "shuttleSetupCost"
    when
        Bus(nextStop != null, $cost : setupCost)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $cost);
end

rule "distanceFromPrevious"
    when
        BusStop(previousBusOrStop != null, $cost : distanceFromPreviousCost)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $cost);
end

rule "distanceBusStopToBusDestination"
    when
        $bus : Bus(destination != null, nextStop != null, $destination : destination)
        $stop : BusStop(bus == $bus, nextStop == null)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $stop.getDistanceToDestinationCost($destination));
end

rule "distanceCoachDirectlyToDestination"
    when
        Coach(destination != null, nextStop == null, $cost : distanceToDestinationCost)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $cost);
end
