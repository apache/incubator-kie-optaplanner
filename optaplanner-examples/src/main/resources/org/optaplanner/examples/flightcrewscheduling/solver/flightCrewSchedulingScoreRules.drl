/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.flightcrewscheduling.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;

import org.optaplanner.examples.flightcrewscheduling.domain.Airport;
import org.optaplanner.examples.flightcrewscheduling.domain.Employee;
import org.optaplanner.examples.flightcrewscheduling.domain.Flight;
import org.optaplanner.examples.flightcrewscheduling.domain.FlightAssignment;
import org.optaplanner.examples.flightcrewscheduling.domain.FlightCrewParametrization;
import org.optaplanner.examples.flightcrewscheduling.domain.Skill;

import accumulate org.optaplanner.examples.common.solver.drools.functions.LoadBalanceByCountAccumulateFunction loadBalanceByCount;
import accumulate org.optaplanner.examples.common.solver.drools.functions.LoadBalanceAccumulateFunction loadBalance;

global HardSoftLongScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "Required skill"
    when
        FlightAssignment(employee != null, !getEmployee().hasSkill(getRequiredSkill()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -100);
end

rule "Flight conflict"
    when
        FlightAssignment(employee != null, $employee : employee,
                $flight: flight,
                $leftId : id)
        FlightAssignment(employee != null, getFlight().overlaps($flight),
                employee == $employee,
                id > $leftId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

rule "Transfer between two flights"
    when
        // TODO FIXME only allow arrival and departure from the same airport (no taxi's)
        Employee($count : countInvalidConnections() > 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $count);
end

rule "Employee unavailability"
    when
        FlightAssignment(employee != null, !getEmployee().isAvailable(getFlight().getDepartureUTCDate()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

// ############################################################################
// Soft constraints
// ############################################################################


rule "First assignment departing from home"
    when
        Employee(!isFirstAssignmentDepartingFromHome())
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -1_000_000);
end

rule "Last assignment arriving at home"
    when
        Employee(!isLastAssignmentArrivingAtHome())
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -1_000_000);
end

//rule "Load balance flight duration total per employee"
//    when
//        FlightCrewParametrization($weight : loadBalanceFlightDurationTotalPerEmployee != 0)
//        accumulate(
//            Employee($total : getFlightDurationTotalInMinutes());
//            $result : loadBalance($total)
//        )
//    then
//        scoreHolder.addSoftConstraintMatch(kcontext, - $weight * $result.getMeanDeviationSquaredSumRootMillis());
//end
