package org.optaplanner.examples.flightcrewscheduling.optional.score;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;

import org.optaplanner.examples.flightcrewscheduling.domain.Airport;
import org.optaplanner.examples.flightcrewscheduling.domain.Employee;
import org.optaplanner.examples.flightcrewscheduling.domain.Flight;
import org.optaplanner.examples.flightcrewscheduling.domain.FlightAssignment;
import org.optaplanner.examples.flightcrewscheduling.domain.FlightCrewParametrization;
import org.optaplanner.examples.flightcrewscheduling.domain.Skill;

import accumulate org.optaplanner.examples.common.optional.score.LoadBalanceByCountAccumulateFunction loadBalanceByCount;
import accumulate org.optaplanner.examples.common.optional.score.LoadBalanceAccumulateFunction loadBalance;

global HardSoftLongScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "Required skill"
    when
        FlightAssignment(employee != null, !getEmployee().hasSkill(getRequiredSkill()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -100);
end

rule "Flight conflict"
    when
        FlightAssignment(employee != null, $employee : employee,
                $flight: flight,
                $leftId : id)
        FlightAssignment(employee != null, getFlight().overlaps($flight),
                employee == $employee,
                id > $leftId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

rule "Transfer between two flights"
    when
        // TODO FIXME only allow arrival and departure from the same airport (no taxis)
        Employee($count : countInvalidConnections() > 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $count);
end

rule "Employee unavailability"
    when
        FlightAssignment(employee != null, !getEmployee().isAvailable(getFlight().getDepartureUTCDate()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

// ############################################################################
// Soft constraints
// ############################################################################


rule "First assignment not departing from home"
    when
        Employee(!isFirstAssignmentDepartingFromHome())
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -1_000_000);
end

rule "Last assignment not arriving at home"
    when
        Employee(!isLastAssignmentArrivingAtHome())
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -1_000_000);
end

//rule "Load balance flight duration total per employee"
//    when
//        FlightCrewParametrization($weight : loadBalanceFlightDurationTotalPerEmployee != 0)
//        accumulate(
//            Employee($total : getFlightDurationTotalInMinutes());
//            $result : loadBalance($total)
//        )
//    then
//        scoreHolder.addSoftConstraintMatch(kcontext, - $weight * $result.getMeanDeviationSquaredSumRootMillis());
//end
