// Package here does not match location within src/main/resources.
// This is so that the constraint package is shared by all score directors,
// which in turn enables us to use the same constraint configuration.
package org.optaplanner.examples.rocktour.score;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardmediumsoftlong.HardMediumSoftLongScoreHolder;

import org.optaplanner.examples.rocktour.domain.RockBus;
import org.optaplanner.examples.rocktour.domain.RockShow;
import org.optaplanner.examples.rocktour.domain.RockStandstill;

global HardMediumSoftLongScoreHolder scoreHolder;

// ############################################################################
//  Hard constraints usually
// ############################################################################

rule "Required show"
    when
        RockShow(required == true, date == null)
    then
        scoreHolder.penalize(kcontext);
end

rule "Unassigned show"
    when
        RockShow(bus != null, date == null)
    then
        scoreHolder.penalize(kcontext);
end

// ############################################################################
// Medium constraints usually
// ############################################################################

rule "Revenue opportunity"
    when
        RockShow(date != null, $revenueOpportunity : revenueOpportunity)
    then
        scoreHolder.reward(kcontext, $revenueOpportunity);
end

rule "Driving time to show per second"
    when
        RockShow(previousStandstill != null, $drivingTime : drivingTimeFromPreviousStandstill)
    then
        scoreHolder.penalize(kcontext, $drivingTime);
end

rule "Driving time to bus arrival per second"
    when
        RockShow(nextShow == null, bus != null, $drivingTime : drivingTimeToBusArrivalLocation)
    then
        scoreHolder.penalize(kcontext, $drivingTime);
end

rule "Delay show cost per day"
    when
        RockShow(date != null, $daysAfterBusDeparture : daysAfterBusDeparture)
    then
        scoreHolder.penalize(kcontext, $daysAfterBusDeparture);
end

// ############################################################################
// Soft constraints usually
// ############################################################################

rule "Shorten driving time per millisecond squared"
    when
        RockShow(previousStandstill != null, $drivingTime : drivingTimeFromPreviousStandstill)
    then
        scoreHolder.penalize(kcontext, $drivingTime * $drivingTime);
end
