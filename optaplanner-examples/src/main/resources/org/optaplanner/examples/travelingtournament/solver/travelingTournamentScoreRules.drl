/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.travelingtournament.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaplanner.examples.travelingtournament.domain.Match;
import org.optaplanner.examples.travelingtournament.domain.Day;
import org.optaplanner.examples.travelingtournament.domain.Team;
import org.optaplanner.examples.travelingtournament.domain.TravelingTournament;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

// multipleMatchesPerTeamPerDay is obsolete because it is always 0

rule "fourConsecutiveHomeMatches"
    when
        Match($homeTeam : homeTeam, $firstDayIndex : day.getIndex())
        Match(homeTeam == $homeTeam, day.getIndex() == $firstDayIndex + 1)
        Match(homeTeam == $homeTeam, day.getIndex() == $firstDayIndex + 2)
        Match(homeTeam == $homeTeam, day.getIndex() == $firstDayIndex + 3)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "fourConsecutiveAwayMatches"
    when
        Match($awayTeam : awayTeam, $firstDayIndex : day.getIndex())
        Match(awayTeam == $awayTeam, day.getIndex() == $firstDayIndex + 1)
        Match(awayTeam == $awayTeam, day.getIndex() == $firstDayIndex + 2)
        Match(awayTeam == $awayTeam, day.getIndex() == $firstDayIndex + 3)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "matchRepeater"
    when
        Match($homeTeam : homeTeam, $awayTeam : awayTeam, $firstDayIndex : day.getIndex())
        Match(homeTeam == $awayTeam, awayTeam == $homeTeam, day.getIndex() == $firstDayIndex + 1)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "startToAwayHop"
    when
        Match($toTeam : homeTeam, $team : awayTeam, $firstDayIndex : day.getIndex())
        not Day(index == $firstDayIndex - 1)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $team.getDistance($toTeam));
end
rule "homeToAwayHop"
    when
        Match($team : homeTeam, $firstDayIndex : day.getIndex())
        Match($toTeam : homeTeam, awayTeam == $team, day.getIndex() == $firstDayIndex + 1)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $team.getDistance($toTeam));
end
rule "awayToAwayHop"
    when
        Match($fromTeam : homeTeam, $team : awayTeam, $firstDayIndex : day.getIndex())
        Match($toTeam : homeTeam, awayTeam == $team, day.getIndex() == $firstDayIndex + 1)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $fromTeam.getDistance($toTeam));
end
rule "awayToHomeHop"
    when
        Match($fromTeam : homeTeam, $team : awayTeam, $firstDayIndex : day.getIndex())
        Match(homeTeam == $team, day.getIndex() == $firstDayIndex + 1)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $fromTeam.getDistance($team));
end
rule "awayToEndHop"
    when
        Match($fromTeam : homeTeam, $team : awayTeam, $firstDayIndex : day.getIndex())
        not Day(index == $firstDayIndex + 1)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $fromTeam.getDistance($team));
end
