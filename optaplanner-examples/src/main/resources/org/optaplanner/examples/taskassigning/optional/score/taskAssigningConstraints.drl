package org.optaplanner.examples.taskassigning.optional.score;
    dialect "java"

import org.optaplanner.core.api.score.buildin.bendable.BendableScoreHolder;

import org.optaplanner.examples.taskassigning.domain.Affinity;
import org.optaplanner.examples.taskassigning.domain.Customer;
import org.optaplanner.examples.taskassigning.domain.Employee;
import org.optaplanner.examples.taskassigning.domain.Skill;
import org.optaplanner.examples.taskassigning.domain.Task;
import org.optaplanner.examples.taskassigning.domain.TaskAssigningSolution;
import org.optaplanner.examples.taskassigning.domain.TaskType
import org.optaplanner.examples.taskassigning.domain.Priority;

global BendableScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "Skill requirements"
    when
        Task(employee != null, missingSkillCount > 0, $missingSkillCount : missingSkillCount)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 0, - $missingSkillCount);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "Critical priority"
    when
        Task(employee != null, priority == Priority.CRITICAL, $endTime : endTime)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 0, - $endTime);
end

rule "Minimze makespan (starting with the latest ending employee first)"
    when
        Employee(tasks != null, $endTime : endTime)
    then
        // Fairness and load balancing trick (see docs): squared to assure correctness in corner cases
        scoreHolder.addSoftConstraintMatch(kcontext, 1, - ($endTime * $endTime));
end

rule "Major priority"
    when
        Task(employee != null, priority == Priority.MAJOR, $endTime : endTime)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 2, - $endTime);
end

rule "Minor priority"
    when
        Task(employee != null, priority == Priority.MINOR, $endTime : endTime)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 3, - $endTime);
end
