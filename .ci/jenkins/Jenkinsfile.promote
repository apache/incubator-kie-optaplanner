import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

deployProperties = [:]
pipelineProperties = [:]

String optaplannerRepository = 'incubator-kie-optaplanner'
String quickstartsRepository = 'incubator-kie-optaplanner-quickstarts'

imageUtils = null

pipeline {
    agent {
        docker { 
            image env.AGENT_DOCKER_BUILDER_IMAGE
            args env.AGENT_DOCKER_BUILDER_ARGS
            label util.avoidFaultyNodes()
        }
    }

    options {
        timestamps()
        timeout(time: 120, unit: 'MINUTES')
        disableConcurrentBuilds(abortPrevious: true)
    }

    environment {
        OPTAPLANNER_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        PR_BRANCH_HASH = "${util.generateHash(10)}"
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    cleanWs(disableDeferredWipeout: true)

                    if (params.DISPLAY_NAME) {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    readDeployProperties()

                    // Verify version is set and if on right release branch
                    assert getProjectVersion()
                    assert getBuildBranch() == util.getReleaseBranchFromVersion(getProjectVersion())

                    checkout scm // To make sure the repository containing the script is available on the Jenkins node.
                    imageUtils = load '.ci/jenkins/scripts/imageUtils.groovy'
                }
            }
        }

        stage('Merge OptaPlanner deploy PR, tag and create release') {
            steps {
                script {
                    dir(optaplannerRepository) {
                        checkoutRepo(optaplannerRepository)
                        mergeAndPush(getDeployPrLink(optaplannerRepository))
                        tagLatest()

                        if(githubscm.isReleaseExist(getGitTag(), getGitAuthorCredsId())) {
                            githubscm.deleteRelease(getGitTag(), getGitAuthorCredsId())
                        }
                        githubscm.createReleaseWithGeneratedReleaseNotes(getGitTag(), getBuildBranch(), githubscm.getPreviousTagFromVersion(getGitTag()), getGitAuthorCredsId())
                        githubscm.updateReleaseBody(getGitTag(), getGitAuthorCredsId())
                    }
                }
            }
        }

        stage('Merge OptaPlanner Quickstarts PR, tag and create release') {
            steps {
                script {
                    dir(quickstartsRepository) {
                        checkoutRepo(quickstartsRepository)
                        mergeAndPush(getDeployPrLink(quickstartsRepository))
                        tagLatest()

                        if(githubscm.isReleaseExist(getGitTag(), getGitAuthorCredsId())) {
                            githubscm.deleteRelease(getGitTag(), getGitAuthorCredsId())
                        }
                        githubscm.createReleaseWithGeneratedReleaseNotes(getGitTag(), getBuildBranch(), githubscm.getPreviousTagFromVersion(getGitTag()), getGitAuthorCredsId())
                        githubscm.updateReleaseBody(getGitTag(), getGitAuthorCredsId())
                    }
                }
            }
        }

        stage('Upload OptaPlanner documentation') {
            steps {
                script {
                    configFileProvider([configFile(fileId: env.MAVEN_SETTINGS_CONFIG_FILE_ID, variable: 'MAVEN_SETTINGS_FILE')]){
                        getMavenCommand()
                                .inDirectory(optaplannerRepository)
                                .skipTests(true)
                                .withProperty('full')
                                .withSettingsXmlFile(MAVEN_SETTINGS_FILE)
                                .run('clean install')
                    }
                    uploadDistribution(optaplannerRepository)
                }
            }
        }

        stage('Push the final OptaPlanner operator image') {
            steps {
                script {
                    pushOperatorFinalImage()
                    removeOperatorImageTemporaryTag()
                }
            }
        }
    }
    post {
        unsuccessful {
            sendErrorNotification()
        }
        cleanup {
            script {
                // Clean also docker in case of usage of testcontainers lib
                util.cleanNode()
            }
        }
    }
}

void sendErrorNotification() {
    if (params.SEND_NOTIFICATION) {
        String additionalInfo = "**[${getBuildBranch()}] Optaplanner - Promote**"
        mailer.sendMarkdownTestSummaryNotification("CI failures", [env.OPTAPLANNER_CI_EMAIL_TO], additionalInfo)
    } else {
        echo 'No notification sent per configuration'
    }
}

//////////////////////////////////////////////////////////////////////////////
// Deployment properties
//////////////////////////////////////////////////////////////////////////////

void readDeployProperties() {
    String deployUrl = params.DEPLOY_BUILD_URL
    if (deployUrl != '') {
        if (!deployUrl.endsWith('/')) {
            deployUrl += '/'
        }
        sh "wget ${deployUrl}artifact/${env.PROPERTIES_FILE_NAME} -O ${env.PROPERTIES_FILE_NAME}"
        deployProperties = readProperties file: env.PROPERTIES_FILE_NAME
        // echo all properties
        echo deployProperties.collect { entry -> "${entry.key}=${entry.value}" }.join('\n')
    }
}

boolean hasDeployProperty(String key) {
    return deployProperties[key] != null
}

String getDeployProperty(String key) {
    if (hasDeployProperty(key)) {
        return deployProperties[key]
    }
    return ''
}

String getParamOrDeployProperty(String paramKey, String deployPropertyKey) {
    if (params[paramKey] != '') {
        return params[paramKey]
    }
    return getDeployProperty(deployPropertyKey)
}

//////////////////////////////////////////////////////////////////////////////
// Getter / Setter
//////////////////////////////////////////////////////////////////////////////

boolean isNotTestingBuild() {
    return getGitAuthor() == 'apache'
}

String getProjectVersion() {
    return getParamOrDeployProperty('PROJECT_VERSION', 'project.version')
}

String getGitTag() {
    return params.GIT_TAG != '' ? params.GIT_TAG : getProjectVersion()
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getGitAuthor() {
    return env.GIT_AUTHOR
}

String getGitAuthorCredsId() {
    return env.GIT_AUTHOR_CREDS_ID
}

String getGitAuthorPushCredsId() {
    return env.GIT_AUTHOR_PUSH_CREDS_ID
}

String getDeployPrLink(String repo) {
    return getDeployProperty("${repo}.pr.link")
}

//////////////////////////////////////////////////////////////////////////////
// Git
//////////////////////////////////////////////////////////////////////////////

void checkoutRepo(String repo) {
    deleteDir()
    checkout(githubscm.resolveRepository(repo, getGitAuthor(), getBuildBranch(), false, getGitAuthorCredsId()))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${getBuildBranch()}"
}

void mergeAndPush(String prLink, String targetBranch) {
    if (prLink != '') {
        githubscm.mergePR(prLink, getGitAuthorCredsId())
        githubscm.pushObject('origin', targetBranch, getGitAuthorPushCredsId())
    }
}

void mergeAndPush(String prLink) {
    mergeAndPush(prLink, getBuildBranch())
}

void tagLatest() {
    if (getGitTag() != '') {
        githubscm.tagLocalAndRemoteRepository('origin', getGitTag(), getGitAuthorPushCredsId(), env.BUILD_TAG, true)
    }
}

void uploadDistribution(String directory) {
    if (isNotTestingBuild()) {
        echo "uploadDistribution for ${directory}"
        dir(directory) {
            withCredentials(bindings: [sshUserPrivateKey(credentialsId: 'optaplanner-filemgmt',
                    keyFileVariable: 'SSH_KEY_JBOSS_FILEMGMT')]) {
                // For testing, simulate connection via SSH:
                // sh "ssh -i $SSH_KEY_JBOSS_FILEMGMT -oKexAlgorithms=+diffie-hellman-group1-sha1 optaplanner@filemgmt.jboss.org"
                sh "./build/release/upload_distribution.sh ${getProjectVersion()} $SSH_KEY_JBOSS_FILEMGMT"
            }
        }
    } else {
        echo 'No uploadDistribution due to testing build'
    }
}

MavenCommand getMavenCommand() {
    mvnCmd = new MavenCommand(this, ['-fae', '-ntp'])
    if (env.MAVEN_DEPENDENCIES_REPOSITORY) {
        mvnCmd.withDependencyRepositoryInSettings('deps-repo', env.MAVEN_DEPENDENCIES_REPOSITORY)
    }
    return mvnCmd
}

/* OptaPlanner Operator */

String getOperatorImageRegistry() {
    return params.OPERATOR_IMAGE_REGISTRY
}

String getOperatorImageNamespace() {
    return params.OPERATOR_IMAGE_NAMESPACE
}

String getOperatorImageName() {
    return getDeployProperty('operator.image.name')
}

String getOperatorImageTag() {
    return getDeployProperty('operator.image.tag')
}

String getOperatorImageTemporaryTag() {
    return getDeployProperty('operator.image.temporary_tag')
}

void pushOperatorFinalImage() {
    imageUtils.loginRegistry()

    String temporaryImage = imageUtils.getImageFullNameWithRegistry(getOperatorImageRegistry(),
            getOperatorImageNamespace(), getOperatorImageName(), getOperatorImageTemporaryTag())
    imageUtils.pullImage(temporaryImage)

    String finalImageName = imageUtils.getImageFullNameWithRegistry(getOperatorImageRegistry(),
            getOperatorImageNamespace(), getOperatorImageName(), getOperatorImageTag())
    imageUtils.tagImage(temporaryImage, finalImageName)
    imageUtils.pushImage(finalImageName)

    String finalImageLatestName = imageUtils.getImageFullNameWithRegistry(getOperatorImageRegistry(),
            getOperatorImageNamespace(), getOperatorImageName(), 'latest')
    imageUtils.tagImage(finalImageName, finalImageLatestName)
    imageUtils.pushImage(finalImageLatestName)
}

void removeOperatorImageTemporaryTag() {
    if (!imageUtils.removeQuayTag(getOperatorImageNamespace(), getOperatorImageName(), getOperatorImageTemporaryTag())) {
        String temporaryImageName = imageUtils.getImageFullName(getOperatorImageNamespace(), getOperatorImageName(),
                getOperatorImageTemporaryTag())
        error "Cannot remove the OptaPlanner Operator temporary image tag (${temporaryImageName}) from quay.io. "
                + "The tag should be removed manually."
    }
}
