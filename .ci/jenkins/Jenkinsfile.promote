import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

deployProperties = [:]
pipelineProperties = [:]

String optaplannerRepository = 'optaplanner'
String vehicleRoutingRepository = 'optaweb-vehicle-routing'
String employeeRosteringRepository = 'optaweb-employee-rostering'
String quickstartsRepository = 'optaplanner-quickstarts'

pipeline {
    agent {
        label 'kie-rhel7'
    }

    tools {
        maven 'kie-maven-3.6.3'
        jdk 'kie-jdk11'
    }

    options {
        timestamps()
        timeout(time: 120, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into .jenkins/dsl/jobs.groovy file
    // }

    environment {
        // Some generated env is also defined into .jenkins/dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        BOT_BRANCH_HASH = "${util.generateHash(10)}"
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    cleanWs()

                    if (params.DISPLAY_NAME) {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    readDeployProperties()

                    if (isRelease()) {
                        // Verify version is set and if on right release branch
                        assert getProjectVersion()
                        assert getKogitoVersion()

                        assert getBuildBranch() == util.getReleaseBranchFromVersion(getProjectVersion())
                    }
                }
            }
        }

        stage('Merge OptaPlanner deploy PR and tag') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    dir(optaplannerRepository) {
                        checkoutRepo(optaplannerRepository)
                        mergeAndPush(getDeployPrLink(optaplannerRepository))
                        tagLatest()
                    }
                }
            }
        }

        stage('Merge Optaweb Vehicle Routing deploy PR and tag') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    dir(vehicleRoutingRepository) {
                        checkoutRepo(vehicleRoutingRepository)
                        mergeAndPush(getDeployPrLink(vehicleRoutingRepository))
                        tagLatest()
                    }
                }
            }
        }

        stage('Merge Optaweb Employee Rostering deploy PR and tag') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    dir(employeeRosteringRepository) {
                        checkoutRepo(employeeRosteringRepository)
                        mergeAndPush(getDeployPrLink(employeeRosteringRepository))
                        tagLatest()
                    }
                }
            }
        }

        stage('Merge OptaPlanner Quickstarts PR and tag') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    dir(quickstartsRepository) {
                        checkoutRepo(quickstartsRepository)
                        mergeAndPush(getDeployPrLink(quickstartsRepository))
                        tagLatest()
                    }
                }
            }
        }

        stage('Upload OptaPlanner documentation') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    getMavenCommand().inDirectory(optaplannerRepository).skipTests(true).withProperty('full').run('clean install')
                    uploadDistribution(optaplannerRepository)
                }
            }
        }

        stage('Upload Vehicle Routing documentation and distribution') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    getMavenCommand().inDirectory(vehicleRoutingRepository).skipTests(true).run('clean install')
                    uploadDistribution(vehicleRoutingRepository)
                }
            }
        }

        stage('Upload Employee Rostering documentation and distribution') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    getMavenCommand().inDirectory(employeeRosteringRepository).skipTests(true).run('clean install')
                    uploadDistribution(employeeRosteringRepository)
                }
            }
        }

        stage('Set OptaPlanner next snapshot version') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    String nextMicroSnapshotVersion = getNextMicroSnapshotVersion(getProjectVersion())

                    dir("${optaplannerRepository}-bot") {
                        prepareForPR(optaplannerRepository)
                        String nextSnapshotVersion = getNextMicroSnapshotVersion(getProjectVersion())
                        maven.mvnVersionsSet(getMavenCommand(), nextSnapshotVersion, true)
                        maven.mvnSetVersionProperty(getMavenCommand(), 'version.org.kie.kogito', getNextMicroSnapshotVersion(getKogitoVersion()))

                        String prLink = commitAndCreatePR("[${getBuildBranch()}] Update snapshot version to ${nextMicroSnapshotVersion}")
                        setPipelinePrLink(optaplannerRepository, prLink)
                    }
                    dir(optaplannerRepository) {
                        sh "git checkout ${getBuildBranch()}"
                        mergeAndPush(getPipelinePrLink(optaplannerRepository))
                        runMavenDeploy(getMavenCommand())
                    }
                }
            }
        }

        stage('Set Optaweb Vehicle Routing next snapshot version') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    String nextMicroSnapshotVersion = getNextMicroSnapshotVersion(getProjectVersion())
                    dir("$vehicleRoutingRepository-bot") {
                        prepareForPR(vehicleRoutingRepository)
                        maven.mvnVersionsUpdateParentAndChildModules(nextMicroSnapshotVersion, true)

                        String prLink = commitAndCreatePR("[${getBuildBranch()}] Update snapshot version to ${nextMicroSnapshotVersion}")
                        setPipelinePrLink(vehicleRoutingRepository, prLink)
                    }
                    dir(vehicleRoutingRepository) {
                        sh "git checkout ${getBuildBranch()}"
                        mergeAndPush(getPipelinePrLink(vehicleRoutingRepository))
                        runMavenDeploy(getMavenCommand())
                    }
                }
            }
        }

        stage('Set Optaweb Employee Rostering next snapshot version') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    String nextMicroSnapshotVersion = getNextMicroSnapshotVersion(getProjectVersion())
                    dir("$employeeRosteringRepository-bot") {
                        prepareForPR(employeeRosteringRepository)
                        maven.mvnVersionsUpdateParentAndChildModules(nextMicroSnapshotVersion, true)

                        String prLink = commitAndCreatePR("[${getBuildBranch()}] Update snapshot version to ${nextMicroSnapshotVersion}")
                        setPipelinePrLink(employeeRosteringRepository, prLink)
                    }
                    dir(employeeRosteringRepository) {
                        sh "git checkout ${getBuildBranch()}"
                        mergeAndPush(getPipelinePrLink(employeeRosteringRepository))
                        runMavenDeploy(getMavenCommand())
                    }
                }
            }
        }

        stage('Set Quickstarts next snapshot version') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    String nextMicroSnapshotVersion = getNextMicroSnapshotVersion(getProjectVersion())
                    String botQuickstartsRepository = "${quickstartsRepository}-bot"
                    dir(botQuickstartsRepository) {
                        prepareForPR(quickstartsRepository)
                        updateQuickstartsVersions(nextMicroSnapshotVersion)

                        String prLink = commitAndCreatePR(("[${getBuildBranch()}] Update snapshot version to ${nextMicroSnapshotVersion}"))
                        setPipelinePrLink(quickstartsRepository, prLink)
                    }
                    dir(quickstartsRepository) {
                        sh "git checkout ${getBuildBranch()}"
                        mergeAndPush(getPipelinePrLink(quickstartsRepository))
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            sendNotification()
        }
        cleanup {
            script {
                // Clean also docker in case of usage of testcontainers lib
                util.cleanNode('docker')
            }
        }
    }
}

void sendNotification() {
    if (params.SEND_NOTIFICATION) {
        mailer.sendMarkdownTestSummaryNotification('Promote', "[${getBuildBranch()}] Optaplanner", [env.KOGITO_CI_EMAIL_TO], "cc @*optaplanner-team*")
    } else {
        echo 'No notification sent per configuration'
    }
}

//////////////////////////////////////////////////////////////////////////////
// Deployment properties
//////////////////////////////////////////////////////////////////////////////

void readDeployProperties() {
    String deployUrl = params.DEPLOY_BUILD_URL
    if (deployUrl != '') {
        if (!deployUrl.endsWith('/')) {
            deployUrl += '/'
        }
        sh "wget ${deployUrl}artifact/${env.PROPERTIES_FILE_NAME} -O ${env.PROPERTIES_FILE_NAME}"
        deployProperties = readProperties file: env.PROPERTIES_FILE_NAME
        // echo all properties
        echo deployProperties.collect { entry -> "${entry.key}=${entry.value}" }.join('\n')
    }
}

boolean hasDeployProperty(String key) {
    return deployProperties[key] != null
}

String getDeployProperty(String key) {
    if (hasDeployProperty(key)) {
        return deployProperties[key]
    }
    return ''
}

String getParamOrDeployProperty(String paramKey, String deployPropertyKey) {
    if (params[paramKey] != '') {
        return params[paramKey]
    }
    return getDeployProperty(deployPropertyKey)
}

//////////////////////////////////////////////////////////////////////////////
// Getter / Setter
//////////////////////////////////////////////////////////////////////////////

boolean shouldDeployToRepository() {
    return env.MAVEN_DEPLOY_REPOSITORY || isNotTestingBuild()
}

boolean isNotTestingBuild() {
    return getGitAuthor() == 'kiegroup'
}

boolean isRelease() {
    return env.RELEASE.toBoolean()
}

String getProjectVersion() {
    return getParamOrDeployProperty('PROJECT_VERSION', 'project.version')
}

String getKogitoVersion() {
    return getParamOrDeployProperty('KOGITO_VERSION', 'kogito.version')
}

String getNextMicroSnapshotVersion(String currentVersion) {
    return util.getNextVersion(currentVersion, 'micro')
}

String getNextMinorSnapshotVersion(String currentVersion) {
    return util.getNextVersion(currentVersion, 'minor')
}

String getGitTag() {
    return params.GIT_TAG != '' ? params.GIT_TAG : getProjectVersion()
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getGitAuthor() {
    return env.GIT_AUTHOR
}

String getGitAuthorCredsID() {
    return env.AUTHOR_CREDS_ID
}

String getBotAuthorCredsID() {
    return env.BOT_CREDENTIALS_ID
}

String getDeployPrLink(String repo) {
    return getDeployProperty("${repo}.pr.link")
}

String getPipelinePrLink(String repo) {
    return pipelineProperties["${repo}.pr.link"]
}

void setPipelinePrLink(String repo, String value) {
    pipelineProperties["${repo}.pr.link"] = value
}

String getSnapshotBranch() {
    return "${getNextMicroSnapshotVersion(getProjectVersion()).toLowerCase()}-${env.BOT_BRANCH_HASH}"
}

//////////////////////////////////////////////////////////////////////////////
// Git
//////////////////////////////////////////////////////////////////////////////

void checkoutRepo(String repo, String branch) {
    deleteDir()
    checkout(githubscm.resolveRepository(repo, getGitAuthor(), branch, false))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${branch}"
}

void checkoutRepo(String repo) {
    checkoutRepo(repo, getBuildBranch())
}

void checkoutTag(String repo, String tagName, String localBranchName) {
    deleteDir()
    checkout(githubscm.resolveRepository(repo, getGitAuthor(), getBuildBranch(), false))
    // Need to manually checkout branch since we are in 'detached HEAD' state after the git checkout command.
    sh "git checkout tags/${tagName} -b ${localBranchName}"
}

void mergeAndPush(String prLink, String targetBranch) {
    if (prLink != '') {
        githubscm.mergePR(prLink, getGitAuthorCredsID())
        githubscm.pushObject('origin', targetBranch, getGitAuthorCredsID())
    }
}

void mergeAndPush(String prLink) {
    mergeAndPush(prLink, getBuildBranch())
}

void tagLatest() {
    if (getGitTag() != '') {
        githubscm.tagLocalAndRemoteRepository('origin', getGitTag(), getGitAuthorCredsID(), env.BUILD_TAG, true)
    }
}

void prepareForPR(String repo) {
    checkoutRepo(repo)
    githubscm.forkRepo(getBotAuthorCredsID())
    githubscm.createBranch(getSnapshotBranch())
}

String commitAndCreatePR(String commitMsg, Closure precommit, String localBranch, String targetBranch) {
    def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}"

    githubscm.commitChanges(commitMsg, precommit)
    githubscm.pushObject('origin', localBranch, getBotAuthorCredsID())
    return githubscm.createPR(commitMsg, prBody, targetBranch, getBotAuthorCredsID())
}

String commitAndCreatePR(String commitMsg) {
    return commitAndCreatePR(commitMsg, {
        githubscm.findAndStageNotIgnoredFiles('pom.xml')
        githubscm.findAndStageNotIgnoredFiles('build.gradle')
    }, getSnapshotBranch(), getBuildBranch())
}

void uploadDistribution(String directory) {
    if (isNotTestingBuild()) {
        echo "uploadDistribution for ${directory}"
        dir(directory) {
            withCredentials(bindings: [sshUserPrivateKey(credentialsId: 'optaplanner-filemgmt',
                    keyFileVariable: 'SSH_KEY_JBOSS_FILEMGMT')]) {
                // For testing, simulate connection via SSH:
                // sh "ssh -i $SSH_KEY_JBOSS_FILEMGMT -oKexAlgorithms=+diffie-hellman-group1-sha1 optaplanner@filemgmt.jboss.org"
                sh "./build/release/upload_distribution.sh ${getProjectVersion()} $SSH_KEY_JBOSS_FILEMGMT"
            }
        }
    } else {
        echo 'No uploadDistribution due to testing build'
    }
}

MavenCommand getMavenCommand() {
    mvnCmd = new MavenCommand(this, ['-fae', '-ntp'])
                    .withSettingsXmlId(env.MAVEN_SETTINGS_CONFIG_FILE_ID)
    if (env.MAVEN_DEPENDENCIES_REPOSITORY) {
        mvnCmd.withDependencyRepositoryInSettings('deps-repo', env.MAVEN_DEPENDENCIES_REPOSITORY)
    }
    return mvnCmd
}

void runMavenDeploy(MavenCommand mvnCmd) {
    if (shouldDeployToRepository()) {
        mvnCmd = mvnCmd.clone()
        if (env.MAVEN_DEPLOY_REPOSITORY) {
            mvnCmd.withDeployRepository(env.MAVEN_DEPLOY_REPOSITORY)
        }
        mvnCmd.skipTests(true).run('clean deploy')
    } else {
        echo 'Testing environment and no specific deploy repository given => no deployment'
    }
}

void updateQuickstartsVersions(String newVersion) {
    maven.mvnSetVersionProperty('version.org.optaplanner', newVersion)
    maven.mvnVersionsUpdateParentAndChildModules(newVersion, true)
    gradleVersionsUpdate(newVersion)

    assert !sh(script:
            "grep -Rn \"${getProjectVersion()}\" --include={pom.xml,build.gradle} | " +
             'cat', returnStdout: true)
}