@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem8g && !built-in'
    }
    tools {
        maven 'kie-maven-3.8.6'
        jdk 'kie-jdk11'
        nodejs 'nodejs-16.2.0'
    }
    parameters {
        string(description: 'The deployment URL', name: 'KIE_GROUP_DEPLOYMENT_REPO_URL')
        string(description: 'The UMB message version', name: 'UMB_VERSION', defaultValue: 'main')
        string(description: 'The product version, if not provided the optaplanner main branch one will be used', name: 'PRODUCT_VERSION')
        string(description: 'The drools product version, if not provided the drools main branch one will be used', name: 'DROOLS_PRODUCT_VERSION')
        string(description: 'The config repository branch', name: 'CONFIG_BRANCH', defaultValue: 'master')
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
    }
    environment {
        DATE_TIME_SUFFIX_FORMAT = 'yyyyMMddHH'
    }
    stages {
        stage('Initialize') {
            steps {
                sh 'printenv'
            }
        }
        stage('Install build-chain tool') {
            steps {
                script {
                    println "[INFO] Installing build-chain tool"
                    sh "npm install -g @kie/build-chain-action${env.NPM_REGISTRY_URL ? " -registry=${NPM_REGISTRY_URL}" : ''}"

                    sh "npm list -g | grep build-chain"
                }
            }
        }
        stage('Clone build configuration repo') {
            steps {
                script {
                    def currentBranch = getBuildConfigBranch()
                    println "Checking out ${env.BUILD_CONFIGURATION_REPO_URL}:${currentBranch} into build_config folder"
                    sh "git clone -b ${currentBranch} --single-branch ${env.BUILD_CONFIGURATION_REPO_URL} build_config"

                    // export PME parameters and build scripts from nightly build config
                    def buildConfigAdditionalVariables = [
                        'productVersion': env.PRODUCT_VERSION,
                        'droolsProductVersion': env.DROOLS_PRODUCT_VERSION
                    ]
                    pmebuild.parseBuildConfig("$WORKSPACE/build_config/rhbop/nightly", buildConfigAdditionalVariables)
                }
            }
        }
        stage('Build Nightly projects') {
            steps {
                script {
                    withCredentials([string(credentialsId: "kie-ci1-token", variable: 'GITHUB_TOKEN')]) {
                        def SETTINGS_XML_ID = '5d9884a1-178a-4d67-a3ac-9735d2df2cef'
                        def buildBranch = getBuildBranch()
                        def definitionFile = "https://raw.githubusercontent.com/\${GROUP:kiegroup}/optaplanner/${getDefinitionFileBranch()}/.ci/nightly-build-config.yaml"

                        configFileProvider([configFile(fileId: "${SETTINGS_XML_ID}", variable: 'PME_MAVEN_SETTINGS_XML')]) {
                            sh "build-chain build branch --token=${GITHUB_TOKEN} -f ${definitionFile} -b ${buildBranch} -o bc -p kiegroup/optaplanner --fullProjectDependencyTree --skipParallelCheckout"
                        }
                    }
                }
            }
        }
        stage('Upload artifacts to repository') {
            steps {
                script {
                    echo "[INFO] Start uploading ${env.WORKSPACE}/deployDirectory"
                    dir("${env.WORKSPACE}/deployDirectory") {
                        withCredentials([usernameColonPassword(credentialsId: "${env.NIGHTLY_DEPLOYMENT_CREDENTIAL}", variable: 'deploymentCredentials')]) {
                            sh "zip -qr kiegroup ."
                            sh "curl --fail --upload-file kiegroup.zip -u $deploymentCredentials -v ${KIE_GROUP_DEPLOYMENT_REPO_URL}"
                        }
                    }
                }
            }
        }
        stage('Upload optaplanner sources') {
            steps {
                script {
                    echo "[INFO] Start uploading sources zip files.."

                    def folder="${env.RCM_GUEST_FOLDER}/rhbop/RHBOP-${PRODUCT_VERSION}.nightly"

                    // zip source directories
                    dir("${env.WORKSPACE}/deployDirectory/org/kie/rhbop/rhbop/${PRODUCT_VERSION}.redhat-${env.DATE_TIME_SUFFIX}") {
                        def optaplannerSourcesFilename = computeSourcesFilename("optaplanner", env.DATE_TIME_SUFFIX)
                        uploadSources(optaplannerSourcesFilename, folder)

                        def quickstartsSourcesFilename = computeSourcesFilename("optaplanner-quickstarts", env.DATE_TIME_SUFFIX)
                        uploadSources(quickstartsSourcesFilename, folder)
                    }
                }
            }
        }
        stage ('Extract Git Information') {
            steps {
                script {
                    def projectFolders = sh(returnStdout: true, script: "ls ${env.WORKSPACE}/bc").trim().split("\n")
                    for (f in projectFolders) {
                        dir("${env.WORKSPACE}/bc/${f}") {
                            def projectName = f.replace("_", "/")
                            // extract git infos
                            util.storeGitInformation(projectName)
                            env.ALREADY_BUILT_PROJECTS = "${env.ALREADY_BUILT_PROJECTS ?: ''}${projectName};"
                        }
                    }
                }
            }
        }
        stage ('Send UMB Message to QE.') {
            steps {
                script {
                    echo '[INFO] Sending RHBOP UMB message to QE.'
                    def optaplannerArchiveUrl = "https://${env.LOCAL_NEXUS_IP}:8443/nexus/content/groups/rhbop-${calculateArchiveRepoBranch()}-nightly/"
                    def optaplannerSourcesFileUrl = "${env.STAGING_SERVER_URL}rhbop/RHBOP-${PRODUCT_VERSION}.nightly/rhbop-${PRODUCT_VERSION}.redhat-${env.DATE_TIME_SUFFIX}-optaplanner-sources.zip"
                    def optaplannerQuickstartsSourcesFileUrl = "${env.STAGING_SERVER_URL}rhbop/RHBOP-${PRODUCT_VERSION}.nightly/rhbop-${PRODUCT_VERSION}.redhat-${env.DATE_TIME_SUFFIX}-optaplanner-quickstarts-sources.zip"

                    def topic = "VirtualTopic.qe.ci.ba.rhbop.${env.UMB_VERSION}.nightly.trigger"
                    def eventType = "rhbop-${env.UMB_VERSION}-nightly-qe-trigger"
                    def messageBody = getMessageBody(
                        optaplannerArchiveUrl,
                        optaplannerSourcesFileUrl,
                        optaplannerQuickstartsSourcesFileUrl,
                        env.ALREADY_BUILT_PROJECTS,
                        [
                            'rhbop': env.OPTAPLANNER_VERSION,
                            'optaplanner': env.OPTAPLANNER_VERSION,
                            'drools': env.DROOLS_VERSION,
                            'quarkus.bom': env.DROOLS_VERSION,
                            'platform.quarkus.bom': env.DROOLS_VERSION
                        ],
                        gitHashesToCollection(env.GIT_INFORMATION_HASHES)
                    )

                    echo "[INFO] Message Body: ${messageBody}"
                    echo "[INFO] Topic: ${topic}"
                    echo "[INFO] Event Type: ${eventType}"
                    build job: env.SEND_UMB_MESSAGE_JOB_PATH, parameters: [
                            [$class: 'StringParameterValue', name: 'MESSAGE_BODY', value: messageBody],
                            [$class: 'StringParameterValue', name: 'TOPIC', value: topic],
                            [$class: 'StringParameterValue', name: 'EVENT_TYPE', value: eventType]
                    ]
                    echo '[SUCCESS] Message was successfully sent.'
                }
            }
        }
    }
    post {
        failure {
            emailext body: 'RHBOP ${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER} was: ' + "${currentBuild.currentResult}" +  '\n' +
                    'Please look here: ${BUILD_URL} \n' +
                    ' \n' +
                    '${BUILD_LOG, maxLines=750}', subject: 'RHBOP ${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER}: ' + "${currentBuild.currentResult}", to: 'kie-jenkins-builds@redhat.com'
        }
        unstable {
            emailext body: 'RHBOP ${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER} was: ' + "${currentBuild.currentResult}" +  '\n' +
                    'Please look here: ${BUILD_URL} \n' +
                    ' \n' +
                    'Failed tests: ${BUILD_URL}/testReport \n' +
                    ' \n' +
                    '${BUILD_LOG, maxLines=750}', subject: 'RHBOP ${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER}: ' + "${currentBuild.currentResult}", to: 'kie-jenkins-builds@redhat.com'
        }
        fixed {
            emailext body: 'RHBOP ${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER} was: ' + "${currentBuild.currentResult}" +  '\n' +
                    'Please look here: ${BUILD_URL}', subject: 'RHBOP ${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER}: ' + "${currentBuild.currentResult}", to: 'kie-jenkins-builds@redhat.com'
        }
        always {
            archiveArtifacts artifacts: '**/*.maven.log', fingerprint: false, defaultExcludes: true, caseSensitive: true, allowEmptyArchive: true

            echo 'Generating JUnit report...'
            junit allowEmptyResults: true, healthScaleFactor: 1.0, testResults: '**/target/*-reports/TEST-*.xml'

            echo 'Archiving logs...'
            archiveArtifacts excludes: '**/target/checkstyle.log', artifacts: '**/*.maven.log,**/target/*.log', fingerprint: false, defaultExcludes: true, caseSensitive: true, allowEmptyArchive: true
        }
        cleanup {
            cleanWs()
        }
    }
}

String getBuildConfigBranch() {
  return env.CONFIG_BRANCH ?: env.DEFAULT_CONFIG_BRANCH ?: env.BRANCH_NAME ?: env.GIT_BRANCH
}

String getBuildBranch() {
  // Fallback to main if none exist
  return env.BRANCH_NAME ?: env.GIT_BRANCH ?: 'main'
}

String getDefinitionFileBranch() {
  // Fallback to getBuildBranch if DEFINITION_FILE_BRANCH not set
  return env.DEFINITION_FILE_BRANCH ?: getBuildBranch()
}

def getMessageBody(String optaplannerArchiveUrl, String optaplannerSourcesUrl, String optaplannerQuickstartsSourcesUrl, String alreadyBuiltProjects, Map<String, String> versions, Map<String, String> scmHashes) {
    def alreadyBuiltProjectsArray = (alreadyBuiltProjects ?: '').split(";")
    return """
{
    "version": ${new groovy.json.JsonBuilder(versions).toString()},
    "scm_hash": ${new groovy.json.JsonBuilder(scmHashes).toString()},
    "built_projects": ${new groovy.json.JsonBuilder(alreadyBuiltProjectsArray).toString()},
    "archives": "${optaplannerArchiveUrl}",
    "sources": {
        "optaplanner": "${optaplannerSourcesUrl}",
        "optaplanner-quickstarts": "${optaplannerQuickstartsSourcesUrl}"
    }
}"""    
}

def computeSourcesFilename(String project, String suffix) {
    return "rhbop-${PRODUCT_VERSION}.redhat-${suffix}-${project}-sources.zip"
}

def uploadSources(String sourcesFilename, String folder) {
    echo "[INFO] Start uploading $sourcesFilename sources zip file.."
    sshagent(credentials: ['rcm-publish-server']) {
        sh "ssh 'rhba@${env.RCM_HOST}' 'mkdir -p ${folder}'"
        sh "scp -o StrictHostKeyChecking=no $sourcesFilename rhba@${env.RCM_HOST}:${folder}"
    }
}

def gitHashesToCollection(String gitInformationHashes) {
    return gitInformationHashes.replaceAll(/([\w\d\-\_\.]*\/)([\w\d\-\_\.]*)/,'$2').split(';').findAll { it.split('=').size() }.collectEntries{ [it.split('=')[0], it.split('=')[1]] }
}

String getCurrentBranch() {
    return env.CHANGE_BRANCH ?: env.BRANCH_NAME
}

String getDroolsBranch() {
    // fixed branch for drools if not main
    def branch = getCurrentBranch()
    return branch != 'main' ? '8.29.x' : branch
}

String getOptaPlannerQuickstartsBranch() {
    def branch = getCurrentBranch()
    return branch == 'main' ? 'development' : branch
}

String calculateArchiveRepoBranch() {
    def branch = getCurrentBranch()
    String [] branchSplit = branch.split("\\.")
    if (branchSplit.length == 3) {
        // e.g., 8.29.x --> 8.29
        return "${branchSplit[0]}.${branchSplit[1]}"
    }
    // e.g., main
    return branch
}

// Parse version from main branch of the given project
//      * project: in the form of owner/repository
def parseVersionFromPom(String project) {
    def currentBranch = getCurrentBranch() ?: env.GIT_BRANCH
    def pomFilename = "${project.replaceAll("/", "_")}_pom.xml"
    def pomPath = "${env.WORKSPACE}/${pomFilename}"

    sh "curl https://raw.githubusercontent.com/${project}/${currentBranch}/pom.xml -o ${pomPath}"
    def pom = readMavenPom file: pomPath
    return pom.getVersion().replaceAll('-SNAPSHOT', '')
}
