@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

optaplannerRepo = 'optaplanner'
quickstartsRepo = 'optaplanner-quickstarts'

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem16g && !built-in'
    }
    tools {
        maven env.BUILD_MAVEN_TOOL
        jdk env.BUILD_JDK_TOOL
    }
    options {
        timestamps()
        timeout(time: 360, unit: 'MINUTES')
        disableConcurrentBuilds(abortPrevious: true)
    }
    environment {
        OPTAPLANNER_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    checkoutOptaplannerRepo()
                    checkoutOptaplannerQuickstartsRepo()
                }
            }
        }
        stage('Build optaplanner') {
            steps {
                script {
                    getNativeMavenCommand('optaplanner')
                        .withProperty('maven.test.failure.ignore', true)
                        .run('clean install')
                }
            }
            post {
                always {
                    script {
                        cleanContainers()
                    }
                }
            }
        }
        stage('Build optaplanner-quickstarts') {
            steps {
                script {
                    getNativeMavenCommand('optaplanner-quickstarts')
                        .withProperty('maven.test.failure.ignore', true)
                        .run('clean install')
                }
            }
            post {
                always {
                    script {
                        cleanContainers()
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: true
                util.archiveConsoleLog()
            }
        }
        unsuccessful {
            sendErrorNotification()
        }
        cleanup {
            script {
                util.cleanNode('docker')
            }
        }
    }
}


void sendErrorNotification() {
    String additionalInfo = "**[${getBuildBranch()}] Optaplanner${NOTIFICATION_JOB_NAME ? " - ${NOTIFICATION_JOB_NAME}" : ''}**"
    mailer.sendMarkdownTestSummaryNotification("CI failures", [env.OPTAPLANNER_CI_EMAIL_TO], additionalInfo)
}

void checkoutOptaplannerRepo() {
    dir(optaplannerRepo) {
        checkout(githubscm.resolveRepository(optaplannerRepo, params.GIT_AUTHOR, getBuildBranch(), false))
    }
}

void checkoutOptaplannerQuickstartsRepo() {
    // If the PR to OptaPlanner targets the 'main' branch, we assume the branch 'development' for quickstarts.
    String quickstartsChangeTarget = params.BUILD_BRANCH_NAME == 'main' ? 'development' : getBuildBranch()

    dir(quickstartsRepo) {
        checkout(githubscm.resolveRepository(quickstartsRepo, params.GIT_AUTHOR, quickstartsChangeTarget, false))
    }
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

MavenCommand getMavenCommand(String directory) {
    return new MavenCommand(this, ['-fae', '-ntp'])
                .withSettingsXmlId('kogito_release_settings')
                .withProperty('java.net.preferIPv4Stack', true)
                .inDirectory(directory)
}

MavenCommand getNativeMavenCommand(String directory, String builderImage = getNativeBuilderImage()) {
    def mvnCmd = getMavenCommand(directory)
                .withProfiles(['native'])
                .withProperty('quarkus.native.container-build', true)
                .withProperty('quarkus.native.container-runtime', 'docker')
                .withProperty('quarkus.profile', 'native') // Added due to https://github.com/quarkusio/quarkus/issues/13341
    
    if (builderImage) {
        mvnCmd.withProperty('quarkus.native.builder-image', builderImage)
    }

    return mvnCmd
}

void cleanContainers() {
    cloud.cleanContainersAndImages('docker')
}

String getNativeBuilderImage() {
    return env.NATIVE_BUILDER_IMAGE
}
