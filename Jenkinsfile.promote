import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

deployProperties = [:]
pipelineProperties = [:]

String optaplannerRepository = 'optaplanner'
String vehicleRoutingRepository = 'optaweb-vehicle-routing'
String employeeRosteringRepository = 'optaweb-employee-rostering'
String quickstartsRepository = 'optaplanner-quickstarts'
String stableBranchName = 'stable'

pipeline {
    agent {
        label 'kie-rhel7'
    }

    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }

    options {
        timeout(time: 120, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into .jenkins/dsl/jobs.groovy file
    // }

    environment {
        // Some generated env is also defined into .jenkins/dsl/jobs.groovy file

        BOT_BRANCH_HASH = "${util.generateHash(10)}"
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    cleanWs()

                    if (params.DISPLAY_NAME) {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    readDeployProperties()

                    if (isRelease()) {
                        // Verify version is set and if on right release branch
                        assert getProjectVersion()
                        assert getKogitoVersion()

                        assert getBuildBranch() == util.getReleaseBranchFromVersion(getProjectVersion())
                    }

                    installGithubCLI()
                }
            }
        }

        stage('Merge OptaPlanner deploy PR and tag') {
            when {
                expression { return isRelease() }
            }
            steps{
                script {
                    dir(optaplannerRepository) {
                        checkoutRepo(optaplannerRepository)
                        mergeAndPush(getDeployPrLink(optaplannerRepository))
                        tagLatest()
                    }
                }
            }
        }

        stage('Merge Optaweb Vehicle Routing deploy PR and tag') {
            when {
                expression { return isRelease() }
            }
            steps{
                script {
                    dir(vehicleRoutingRepository) {
                        checkoutRepo(vehicleRoutingRepository)
                        mergeAndPush(getDeployPrLink(vehicleRoutingRepository))
                        tagLatest()
                    }
                }
            }
        }

        stage('Merge Optaweb Employee Rostering deploy PR and tag') {
            when {
                expression { return isRelease() }
            }
            steps{
                script {
                    dir(employeeRosteringRepository) {
                        checkoutRepo(employeeRosteringRepository)
                        mergeAndPush(getDeployPrLink(employeeRosteringRepository))
                        tagLatest()
                    }
                }
            }
        }

        stage('Merge OptaPlanner Quickstarts PR and tag') {
            when {
                expression { return isRelease() }
            }
            steps{
                script {
                    dir(quickstartsRepository) {
                        checkoutRepo(quickstartsRepository)
                        mergeAndPush(getDeployPrLink(quickstartsRepository))
                        tagLatest()
                    }
                }
            }
        }

        stage('Reset Quickstarts stable branch') {
            when {
                expression { return isRelease() }
            }
            steps{
                script {
                    dir(quickstartsRepository) {
                        checkoutTag(quickstartsRepository, getGitTag(), stableBranchName)
                        removeJbossNexusFromMavenAndGradle()
                        commitAndForcePushProtectedBranch(quickstartsRepository, stableBranchName)
                    }
                }
            }
        }

        stage('Upload OptaPlanner documentation and distribution') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    getMavenCommand().inDirectory(optaplannerRepository).skipTests(true).withProperty('full').run('clean install')
                    uploadDistribution(optaplannerRepository)
                }
            }
        }

        stage('Upload Vehicle Routing documentation and distribution') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    getMavenCommand().inDirectory(vehicleRoutingRepository).skipTests(true).run('clean install')
                    uploadDistribution(vehicleRoutingRepository)
                }
            }
        }

        stage('Upload Employee Rostering documentation and distribution') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    getMavenCommand().inDirectory(employeeRosteringRepository).skipTests(true).run('clean install')
                    uploadDistribution(employeeRosteringRepository)
                }
            }
        }

        stage('Update OptaPlanner website') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    final String websiteRepository = 'optaplanner-website'
                    String prLink = null
                    dir("$websiteRepository-bot") {
                        String prBranchName = createWebsitePrBranch(websiteRepository)

                        // Update versions in links on the website.
                        sh "./build/update-versions.sh ${getProjectVersion()} ${getNextMinorSnapshotVersion(getProjectVersion())}"

                        // Update the XSDs. OptaPlanner must be cloned and build with the full profile before.
                        String optaplannerRoot = "$WORKSPACE/optaplanner"
                        sh "cp $optaplannerRoot/optaplanner-core/target/classes/solver.xsd xsd/solver/solver-8.xsd"
                        sh "cp $optaplannerRoot/optaplanner-benchmark/target/classes/benchmark.xsd xsd/benchmark/benchmark-8.xsd"

                        // Add changed files, commit, open and merge PR
                        prLink = commitAndCreatePR("Release OptaPlanner ${getProjectVersion()}", { sh 'git add xsd/\\*.xsd _config/pom.yml' }, prBranchName, 'master')
                    }
                    dir(websiteRepository) {
                        checkoutRepo(websiteRepository, 'master')
                        mergeAndPush(prLink, 'master')
                    }
                }
            }
        }

        stage('Set OptaPlanner next snapshot version') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    String nextMicroSnapshotVersion = getNextMicroSnapshotVersion(getProjectVersion())

                    dir("${optaplannerRepository}-bot") {
                        prepareForPR(optaplannerRepository)
                        String nextSnapshotVersion = getNextMicroSnapshotVersion(getProjectVersion())
                        maven.mvnVersionsSet(getMavenCommand(), nextSnapshotVersion, true)
                        maven.mvnSetVersionProperty(getMavenCommand(), 'version.org.kie.kogito', getNextMicroSnapshotVersion(getKogitoVersion()))

                        String prLink = commitAndCreatePR("[${getBuildBranch()}] Update snapshot version to ${nextMicroSnapshotVersion}")
                        setPipelinePrLink(optaplannerRepository, prLink)
                    }
                    dir(optaplannerRepository) {
                        sh "git checkout ${getBuildBranch()}"
                        mergeAndPush(getPipelinePrLink(optaplannerRepository))
                        runMavenDeploy(getMavenCommand())
                    }
                }
            }
        }

        stage('Set Optaweb Vehicle Routing next snapshot version') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    String nextMicroSnapshotVersion = getNextMicroSnapshotVersion(getProjectVersion())
                    dir("$vehicleRoutingRepository-bot") {
                        prepareForPR(vehicleRoutingRepository)
                        maven.mvnVersionsUpdateParentAndChildModules(nextMicroSnapshotVersion, true)

                        String prLink = commitAndCreatePR("[${getBuildBranch()}] Update snapshot version to ${nextMicroSnapshotVersion}")
                        setPipelinePrLink(vehicleRoutingRepository, prLink)
                    }
                    dir(vehicleRoutingRepository) {
                        sh "git checkout ${getBuildBranch()}"
                        mergeAndPush(getPipelinePrLink(vehicleRoutingRepository))
                        runMavenDeploy(getMavenCommand())
                    }
                }
            }
        }

        stage('Set Optaweb Employee Rostering next snapshot version') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    String nextMicroSnapshotVersion = getNextMicroSnapshotVersion(getProjectVersion())
                    dir("$employeeRosteringRepository-bot") {
                        prepareForPR(employeeRosteringRepository)
                        maven.mvnVersionsUpdateParentAndChildModules(nextMicroSnapshotVersion, true)

                        String prLink = commitAndCreatePR("[${getBuildBranch()}] Update snapshot version to ${nextMicroSnapshotVersion}")
                        setPipelinePrLink(employeeRosteringRepository, prLink)
                    }
                    dir(employeeRosteringRepository) {
                        sh "git checkout ${getBuildBranch()}"
                        mergeAndPush(getPipelinePrLink(employeeRosteringRepository))
                        runMavenDeploy(getMavenCommand())
                    }
                }
            }
        }

        stage('Set Quickstarts next snapshot version') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    String nextMicroSnapshotVersion = getNextMicroSnapshotVersion(getProjectVersion())
                    String botQuickstartsRepository = "${quickstartsRepository}-bot"
                    dir(botQuickstartsRepository) {
                        prepareForPR(quickstartsRepository)
                        updateQuickstartsVersions(nextMicroSnapshotVersion)

                        String prLink = commitAndCreatePR(("[${getBuildBranch()}] Update snapshot version to ${nextMicroSnapshotVersion}"));
                        setPipelinePrLink(quickstartsRepository, prLink)
                    }
                    dir(quickstartsRepository) {
                        sh "git checkout ${getBuildBranch()}"
                        mergeAndPush(getPipelinePrLink(quickstartsRepository))
                    }
                }
            }
        }
    }
    post {
        cleanup {
            script {
                // Clean also docker in case of usage of testcontainers lib
                util.cleanNode('docker')
            }
        }
    }
}

//////////////////////////////////////////////////////////////////////////////
// Deployment properties
//////////////////////////////////////////////////////////////////////////////

void readDeployProperties(){
    String deployUrl = params.DEPLOY_BUILD_URL
    if (deployUrl != ''){
        if(!deployUrl.endsWith('/')){
            deployUrl += '/'
        }
        sh "wget ${deployUrl}artifact/${env.PROPERTIES_FILE_NAME} -O ${env.PROPERTIES_FILE_NAME}"
        deployProperties = readProperties file: env.PROPERTIES_FILE_NAME
        // echo all properties
        echo deployProperties.collect{ entry -> "${entry.key}=${entry.value}" }.join('\n')
    }
}

boolean hasDeployProperty(String key){
    return deployProperties[key] != null
}

String getDeployProperty(String key){
    if(hasDeployProperty(key)){
        return deployProperties[key]
    }
    return ''
}

String getParamOrDeployProperty(String paramKey, String deployPropertyKey){
    if (params[paramKey] != ''){
        return params[paramKey]
    }
    return getDeployProperty(deployPropertyKey)
}

//////////////////////////////////////////////////////////////////////////////
// Getter / Setter
//////////////////////////////////////////////////////////////////////////////

boolean isRelease() {
    return env.RELEASE.toBoolean()
}

String getProjectVersion() {
    return getParamOrDeployProperty('PROJECT_VERSION', 'project.version')
}

String getKogitoVersion() {
    return getParamOrDeployProperty('KOGITO_VERSION', 'kogito.version')
}

String getNextMicroSnapshotVersion(String currentVersion) {
    return util.getNextVersion(currentVersion, 'micro')
}

String getNextMinorSnapshotVersion(String currentVersion) {
    return util.getNextVersion(currentVersion, 'minor')
}

String getGitTag() {
    return params.GIT_TAG != '' ? params.GIT_TAG : getProjectVersion()
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getGitAuthor() {
    return env.GIT_AUTHOR
}

String getGitAuthorCredsID(){
    return env.AUTHOR_CREDS_ID
}

String getBotAuthorCredsID(){
    return env.BOT_CREDENTIALS_ID
}

String getDeployPrLink(String repo){
    return getDeployProperty("${repo}.pr.link")
}

String getPipelinePrLink(String repo){
    return pipelineProperties["${repo}.pr.link"]
}

void setPipelinePrLink(String repo, String value){
    pipelineProperties["${repo}.pr.link"] = value
}

String getSnapshotBranch(){
    return "${getNextMicroSnapshotVersion(getProjectVersion()).toLowerCase()}-${env.BOT_BRANCH_HASH}"
}

//////////////////////////////////////////////////////////////////////////////
// Git
//////////////////////////////////////////////////////////////////////////////

void checkoutRepo(String repo, String branch) {
    deleteDir()
    checkout(githubscm.resolveRepository(repo, getGitAuthor(), branch, false))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${branch}"
}

void checkoutRepo(String repo) {
    checkoutRepo(repo, getBuildBranch())
}

void checkoutTag(String repo, String tagName, String localBranchName) {
    deleteDir()
    checkout(githubscm.resolveRepository(repo, getGitAuthor(), getBuildBranch(), false))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout tags/${tagName} -b ${localBranchName}"
}

void mergeAndPush(String prLink, String targetBranch) {
    if (prLink != '') {
        githubscm.mergePR(prLink, getGitAuthorCredsID())
        githubscm.pushObject('origin', targetBranch, getGitAuthorCredsID())
    }
}

void mergeAndPush(String prLink) {
    mergeAndPush(prLink, getBuildBranch())
}

void tagLatest() {
    if (getGitTag() != '') {
        githubscm.tagRepository(getGitTag(), env.BUILD_TAG)
        githubscm.pushObject('origin', "--tags ${getGitTag()}", getGitAuthorCredsID())
    }
}

void prepareForPR(String repo) {
    checkoutRepo(repo)
    githubscm.forkRepo(getBotAuthorCredsID())
    githubscm.createBranch(getSnapshotBranch())
}

String commitAndCreatePR(String commitMsg, Closure precommit, String localBranch, String targetBranch) {
    def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}"

    githubscm.commitChanges(commitMsg, precommit)
    githubscm.pushObject('origin', localBranch, getBotAuthorCredsID())
    return githubscm.createPR(commitMsg, prBody, targetBranch, getBotAuthorCredsID())
}

void commitAndForcePushProtectedBranch(String repo, String branch){
    githubscm.commitChanges("[${getBuildBranch()}] Update ${branch} to ${getProjectVersion()}", {
        githubscm.findAndStageNotIgnoredFiles('pom.xml')
        githubscm.findAndStageNotIgnoredFiles('build.gradle')
    })
    forcePushProtectedBranch(repo, branch)
}

String commitAndCreatePR(String commitMsg) {
    return commitAndCreatePR(commitMsg, {
        githubscm.findAndStageNotIgnoredFiles('pom.xml')
        githubscm.findAndStageNotIgnoredFiles('build.gradle')
    }, getSnapshotBranch(), getBuildBranch())
}

String createWebsitePrBranch(String websiteRepository) {
    checkoutRepo(websiteRepository, 'master') // there is no other branch
    githubscm.forkRepo(getBotAuthorCredsID())
    String prBranchName = "${getProjectVersion().toLowerCase()}-${env.BOT_BRANCH_HASH}"
    githubscm.createBranch(prBranchName)
    return prBranchName
}

void installGithubCLI() {
    sh """
    wget https://github.com/cli/cli/releases/download/v${env.GITHUB_CLI_VERSION}/gh_${env.GITHUB_CLI_VERSION}_linux_amd64.tar.gz
    tar xzf gh_${env.GITHUB_CLI_VERSION}_linux_amd64.tar.gz
    mv gh_${env.GITHUB_CLI_VERSION}_linux_amd64/bin/gh .
    rm -r gh_${env.GITHUB_CLI_VERSION}_linux_amd64*
    """
}

void uploadDistribution(String directory) {
    echo "uploadDistribution for ${directory}"
    dir(directory) {
        withCredentials(bindings: [sshUserPrivateKey(credentialsId: 'optaplanner-filemgmt',
                keyFileVariable: 'SSH_KEY_JBOSS_FILEMGMT')]) {
            // For testing, simulate connection via SSH:
            // sh "ssh -i $SSH_KEY_JBOSS_FILEMGMT -oKexAlgorithms=+diffie-hellman-group1-sha1 optaplanner@filemgmt.jboss.org"
            sh "./build/release/upload_distribution.sh ${getProjectVersion()} $SSH_KEY_JBOSS_FILEMGMT"
        }
    }
}

MavenCommand getMavenCommand() {
    mvnCmd = new MavenCommand(this, ['-fae'])
                    .withSettingsXmlId(env.MAVEN_SETTINGS_CONFIG_FILE_ID)
    if (env.MAVEN_DEPENDENCIES_REPOSITORY) {
        mvnCmd.withDependencyRepositoryInSettings('deps-repo', env.MAVEN_DEPENDENCIES_REPOSITORY)
    }
    return mvnCmd
}

void runMavenDeploy(MavenCommand mvnCmd) {
    mvnCmd = mvnCmd.clone()
    if(env.MAVEN_DEPLOY_REPOSITORY){
        mvnCmd.withDeployRepository(env.MAVEN_DEPLOY_REPOSITORY)
    }
    mvnCmd.skipTests(true).run('clean deploy')
}

void removeJbossNexusFromMavenAndGradle() {
    sh "sed -i \':a;N;\$!ba;s/\\n *<repositories>.*<\\/repositories>//g\' */pom.xml"
    sh "sed -i \':a;N;\$!ba;s/\\n *<repositories>.*<\\/repositories>//g\' pom.xml"
    sh "sed -i \':a;N;\$!ba;s/\\n *maven {[^{}]*mavenContent " +
            "{[^{}]*snapshotsOnly[^{}]*}[^{}]*}//g\' */build.gradle"

    assert !sh (script:
            'grep -Rn "repository.jboss.org" --include={pom.xml,build.gradle} | ' +
            'cat', returnStdout: true)
}

String getGhCredsID() {
    return env.GITHUB_TOKEN_CREDS_ID
}

//maps git branch protection response json into update request body to rewrite branch protection
String getProtectionMapScript() {
    return "if .restrictions == null then . + {\"restrictions_used\":null}  " + //upd user set restrictions if not empty
            "else . + {\"restrictions_used\":{\"users\":[.restrictions.users[].login], \"team\":[.restrictions.users[].slug]}} end |" +
            " {" +
                "\"required_status_checks\": .required_status_checks," +
                "\"required_pull_request_reviews\": " +
                    "{" +
                        "\"dismiss_stale_reviews\":(.required_pull_request_reviews.dismiss_stale_reviews//false), " +
                        "\"require_code_owner_reviews\":(.required_pull_request_reviews.require_code_owner_reviews//false)" +
                    "}, " +
                "\"enforce_admins\":(.enforce_admins.enabled)," +
                " \"restrictions\":.restrictions_used" +
            "}";
}

def enableForcePushes(String repo, String protectedBranch) {
    if (isBranchProtected(repo, protectedBranch)) {
        setAllowForcePushes(repo, protectedBranch, "true")
    }
}

def disableForcePushes(String repo, String protectedBranch) {
    if (isBranchProtected(repo, protectedBranch)) {
        setAllowForcePushes(repo, protectedBranch, "false")
    }
}

boolean isBranchProtected(String repo, String protectedBranch, String ghPath = "../gh") {
    boolean isProtected = true // Suppose it is protected by default
    withCredentials([string(credentialsId: getGhCredsID(), variable: 'GITHUB_TOKEN')]) {
        // get current branch protection
        int status = sh (script: "${ghPath} api 'repos/${getGitAuthor()}/${repo}/branches/${protectedBranch}/protection'", returnStatus: true)
        isProtected = status == 0
    }
    return isProtected
}

def setAllowForcePushes(String repo, String protectedBranch, String enabled, String ghPath = "../gh") {
    assertGithubCLI(ghPath)
    //Use separate admin token credentials
    withCredentials([string(credentialsId: getGhCredsID(), variable: 'GITHUB_TOKEN')]) {
        //get current branch protection and remove allow force push
        sh "${ghPath} api 'repos/${getGitAuthor()}/${repo}/branches/${protectedBranch}/protection' | " +
           "jq 'del(.allow_force_pushes)' > protectionBefore.json"

        //create new json based on current protection mapped as parameters
        sh "jq \"${getProtectionMapScript()}\" protectionBefore.json | " +
           "jq \". + {\"allow_force_pushes\":${enabled}}\" > protectionParameters.json"

        //update protection on git
        def allowForcePushEnabled = sh(script:
                "${ghPath} api -XPUT 'repos/${getGitAuthor()}/${repo}/branches/${protectedBranch}/protection' " +
                        "--input protectionParameters.json |" +
                        " jq '.allow_force_pushes.enabled'", returnStdout: true).trim()
        assert allowForcePushEnabled == enabled

        //check that protection didn't changed except for allow_force_pushes
        sh "${ghPath} api 'repos/${getGitAuthor()}/${repo}/branches/${protectedBranch}/protection' | " +
                "jq 'del(.allow_force_pushes)' > protectionAfter.json";
        def differences = sh (script: "diff protectionBefore.json protectionAfter.json | cat", returnStdout: true)
        if (differences) {
            error "Protection settings lost"+
                    "\nBefore: "+
                    "\n${readFile 'protectionBefore.json'} " +
                    "\nAfter: "+
                    "\n${readFile 'protectionAfter.json'} " +
                    "\nDifferences: " +
                    "\n${differences} " +
                    "\nProtection parameters: " +
                    "\n${readFile 'protectionParameters.json'} " +
                    "Please rollback to Before state and update getProtectionMapScript"
        }
        //cleanup workspace
        sh "rm -f protectionParameters.json protectionBefore.json protectionAfter.json"
    }
}

def forcePushProtectedBranch(String repo, String protectedBranch) {
    enableForcePushes(repo, protectedBranch)
    withCredentials([usernamePassword(credentialsId: getGitAuthorCredsID(), usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
        sh """
        git config --local credential.helper \"!f() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_PASSWORD; }; f\"
        git push origin ${protectedBranch} --force
        """
    }
    disableForcePushes(repo, protectedBranch)
}

void gradleVersionsUpdate(String newVersion) {
    sh "sed -i -E 's/def optaplannerVersion = \"[^\"\\s]+\"/def optaplannerVersion = \"${newVersion}\"/' */build.gradle"
}

void updateQuickstartsVersions(String newVersion) {
    maven.mvnSetVersionProperty("version.org.optaplanner", newVersion)
    maven.mvnVersionsUpdateParentAndChildModules(newVersion, true)
    gradleVersionsUpdate(newVersion)

    assert !sh(script:
            "grep -Rn \"${getProjectVersion()}\" --include={pom.xml,build.gradle} | " +
             "cat", returnStdout: true)
}

void assertGithubCLI(String ghPath) {
    if (fileExists(ghPath))
        echo "[INFO] gh found at $ghPath"
    else
        error "gh not found at $ghPath"
}