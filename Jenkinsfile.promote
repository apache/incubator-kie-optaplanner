import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

deployProperties = [:]
pipelineProperties = [:]

pipeline {
    agent {
        label 'kie-rhel7'
    }

    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }
    
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
    }

    parameters {
        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')
        
        // Deploy job url to retrieve deployment.properties
        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')
        
        // Git information which can override `deployment.properties`
        string(name: 'BUILD_BRANCH_NAME', defaultValue: '', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')
        string(name: 'GIT_AUTHOR', defaultValue: '', description: 'Override `deployment.properties`. Which Git author repository ?')

        // Build&Deploy information for next snapshots
        string(name: 'MAVEN_DEPENDENCIES_REPOSITORY', defaultValue: '', description: 'Maven repository where to find dependencies if those are not in the default Jboss repository.')
        string(name: 'MAVEN_DEPLOY_REPOSITORY', defaultValue: '', description: 'Specify a Maven repository to deploy the artifacts.')
        
        // Release information which can override `deployment.properties`
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')

        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')
        string(name: 'KOGITO_VERSION', defaultValue: '', description: 'Optional if not RELEASE. If RELEASE, cannot be empty.')

        string(name: 'STAGING_REPO_URL', defaultValue: '', description: 'Override `deployment.properties`.')
        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')

        // Bot author information. Set as params for easy testing.
        string(name: 'BOT_CREDENTIALS_ID', defaultValue: 'bsig-gh-bot', description: 'Credentials for PR creation')

        // Main author creds
        string(name: 'AUTHOR_CREDS_ID', defaultValue: 'kie-ci', description: 'Credentials for PR merge')
        string(name: 'GITHUB_TOKEN_CREDS_ID', defaultValue: 'kie-ci2-token', description: 'GH token to be used with GH CLI')
    }

    environment {
        PROPERTIES_FILE_NAME = 'deployment.properties'
        BOT_BRANCH_HASH = "${util.generateHash(10)}"
        GITHUB_CLI_VERSION = '0.11.1'
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    cleanWs()
                    
                    if (params.DISPLAY_NAME != '') {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    readDeployProperties()

                    if (isRelease()) {
                        assert getProjectVersion() != ''
                        assert getKogitoVersion() != ''
                    }

                    installGithubCLI()
                }
            }
        }

        stage('Merge OptaPlanner deploy PR and tag') {
            when {
                expression { return isRelease() }
            }
            steps{
                script {
                    dir('optaplanner') {
                        checkoutRepo('optaplanner')
                        mergeAndPush('optaplanner', getDeployPrLink('optaplanner'))
                        tagLatest()
                    }
                }
            }
        }

        stage('Upload documentation and distribution') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    mavenCleanInstall('optaplanner', true, ['full'])
                    dir('optaplanner') {
                        withCredentials(bindings: [sshUserPrivateKey(credentialsId: 'optaplanner-filemgmt',
                                             keyFileVariable: 'SSH_KEY_JBOSS_FILEMGMT')]) {
                            // For testing, simulate connection via SSH:
                            // sh "ssh -i $SSH_KEY_JBOSS_FILEMGMT -oKexAlgorithms=+diffie-hellman-group1-sha1 optaplanner@filemgmt.jboss.org"
                            sh "./build/release/upload_distribution.sh ${getProjectVersion()} $SSH_KEY_JBOSS_FILEMGMT"
                        }
                    }
                }
            }
        }

        stage('Update OptaPlanner website') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    final String websiteRepository = 'optaplanner-website'
                    dir(websiteRepository) {
                        String prBranchName = createWebsitePrBranch(websiteRepository)

                        // Update versions in links on the website.
                        sh "./build/update-versions.sh ${getProjectVersion()} ${getNextMinorSnapshotVersion(getProjectVersion())}"

                        // Update the XSDs. OptaPlanner must be cloned and build with the full profile before.
                        String optaplannerRoot = "$WORKSPACE/optaplanner"
                        sh "cp $optaplannerRoot/optaplanner-core/target/classes/solver.xsd xsd/solver/solver-8.xsd"
                        sh "cp $optaplannerRoot/optaplanner-benchmark/target/classes/benchmark.xsd xsd/benchmark/benchmark-8.xsd"

                        // Add changed files, commit, open and merge PR
                        sh 'git add xsd/\\*.xsd _config/pom.yml'
                        String prLink = commitAndCreatePR("Release OptaPlanner ${getProjectVersion()}", prBranchName, 'master')
                        mergeAndPush(websiteRepository, prLink)
                    }
                }
            }
        }

        stage('Set OptaPlanner next snapshot version'){
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    dir('optaplanner-bot') {
                        prepareForPR('optaplanner')
                        setupMavenConfig()
                        String nextSnapshotVersion = getNextMicroSnapshotVersion(getProjectVersion())
                        maven.mvnVersionsSet(nextSnapshotVersion, true)
                        updateKogitoVersion(getNextMicroSnapshotVersion(getKogitoVersion()))

                        addNotIgnoredPoms()
                        String prLink = commitAndCreatePR("Update snapshot version to ${nextSnapshotVersion}")
                        setPipelinePrLink('optaplanner', prLink)
                    }
                    dir('optaplanner') {
                        sh "git checkout ${getBuildBranch()}"
                        mergeAndPush('optaplanner', getPipelinePrLink('optaplanner'))
                        setupMavenConfig()
                        deployArtifacts()
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}

//////////////////////////////////////////////////////////////////////////////
// Deployment properties
//////////////////////////////////////////////////////////////////////////////

void readDeployProperties(){
    String deployUrl = params.DEPLOY_BUILD_URL
    if (deployUrl != ''){
        if(!deployUrl.endsWith('/')){
            deployUrl += '/'
        }
        sh "wget ${deployUrl}artifact/${PROPERTIES_FILE_NAME} -O ${PROPERTIES_FILE_NAME}"
        deployProperties = readProperties file: PROPERTIES_FILE_NAME
        // echo all properties
        echo deployProperties.collect{ entry -> "${entry.key}=${entry.value}" }.join('\n')
    }
}

boolean hasDeployProperty(String key){
    return deployProperties[key] != null
}

String getDeployProperty(String key){
    if(hasDeployProperty(key)){
        return deployProperties[key]
    }
    return ''
}

String getParamOrDeployProperty(String paramKey, String deployPropertyKey){
    if (params[paramKey] != ''){
        return params[paramKey]
    }
    return getDeployProperty(deployPropertyKey)
}

//////////////////////////////////////////////////////////////////////////////
// Getter / Setter
//////////////////////////////////////////////////////////////////////////////

boolean isRelease() {
    return params.RELEASE || (getDeployProperty('release') == 'true')
}

String getProjectVersion() {
    return getParamOrDeployProperty('PROJECT_VERSION', 'project.version')
}

String getKogitoVersion() {
    return getParamOrDeployProperty('KOGITO_VERSION', 'kogito.version')
}

String getNextMicroSnapshotVersion(String currentVersion) {
    return util.getNextVersion(currentVersion, 'micro')
}

String getNextMinorSnapshotVersion(String currentVersion) {
    return util.getNextVersion(currentVersion, 'minor')
}

String getGitTag() {
    return params.GIT_TAG != '' ? params.GIT_TAG : getProjectVersion()
}

String getBuildBranch() {
    return getParamOrDeployProperty('BUILD_BRANCH_NAME', 'git.branch')
}

String getGitAuthor() {
    return getParamOrDeployProperty('GIT_AUTHOR', 'git.author')
}

String getGitAuthorCredsID(){
    return params.AUTHOR_CREDS_ID
}

String getBotAuthorCredsID(){
    return params.BOT_CREDENTIALS_ID
}

String getStagingRepoUrl(){
    return getParamOrDeployProperty('STAGING_REPO_URL', 'staging-repo.url')
}

String getDeployPrLink(String repo){
    return getDeployProperty("${repo}.pr.link")
}

String getPipelinePrLink(String repo){
    return pipelineProperties["${repo}.pr.link"]
}

void setPipelinePrLink(String repo, String value){
    pipelineProperties["${repo}.pr.link"] = value
}

String getSnapshotBranch(){
    return "${getNextMicroSnapshotVersion(getProjectVersion()).toLowerCase()}-${env.BOT_BRANCH_HASH}"
}

//////////////////////////////////////////////////////////////////////////////
// Git
//////////////////////////////////////////////////////////////////////////////

void checkoutRepo(String repo, String branch) {
    deleteDir()
    checkout(githubscm.resolveRepository(repo, getGitAuthor(), branch, false))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${branch}"
}

void checkoutRepo(String repo) {
    checkoutRepo(repo, getBuildBranch())
}

void mergeAndPush(String repo, String prLink) {
    if (prLink != '') {
        githubscm.mergePR(prLink, getGitAuthorCredsID())
        githubscm.pushObject('origin', getBuildBranch(), getGitAuthorCredsID())
    }
}

void tagLatest() {
    if (getGitTag() != '') {
        githubscm.tagRepository(getGitTag(), env.BUILD_TAG)
        githubscm.pushObject('origin', "--tags ${getGitTag()}", getGitAuthorCredsID())
    }
}

void prepareForPR(String repo) {
    checkoutRepo(repo)
    githubscm.forkRepo(getBotAuthorCredsID())
    githubscm.createBranch(getSnapshotBranch())
}

void addNotIgnoredPoms() {
    // based on https://stackoverflow.com/a/59888964/8811872
    sh '''
    find . -type f -name 'pom.xml' > found_poms.txt
    poms_to_add=""
    while IFS= read -r pom; do
        if ! git check-ignore -q "\$pom"; then
            poms_to_add="\$poms_to_add \$pom"
        fi
    done < found_poms.txt
    rm found_poms.txt
    git add \$poms_to_add
    '''
}

void commitAndCreatePR(String commitMsg, String localBranch, String targetBranch) {
    def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}"
    sh "git commit -m '${commitMsg}'"
    githubscm.pushObject('origin', localBranch, getBotAuthorCredsID())
    return githubscm.createPR(commitMsg, prBody, targetBranch, getBotAuthorCredsID())
}

void commitAndCreatePR(String commitMsg) {
    commitAndCreatePR(commitMsg, getSnapshotBranch(), getBuildBranch())
}

String createWebsitePrBranch(String websiteRepository) {
    checkoutRepo(websiteRepository, 'master') // there is no other branch
    githubscm.forkRepo(getBotAuthorCredsID())
    String prBranchName = "${getProjectVersion().toLowerCase()}-${env.BOT_BRANCH_HASH}"
    githubscm.createBranch(prBranchName)
    return prBranchName
}

void installGithubCLI() {
    sh """
    wget https://github.com/cli/cli/releases/download/v${env.GITHUB_CLI_VERSION}/gh_${env.GITHUB_CLI_VERSION}_linux_amd64.tar.gz
    tar xzf gh_${env.GITHUB_CLI_VERSION}_linux_amd64.tar.gz
    mv gh_${env.GITHUB_CLI_VERSION}_linux_amd64/bin/gh .
    rm -r gh_${env.GITHUB_CLI_VERSION}_linux_amd64*
    """
}

void updateKogitoVersion(String newVersion) {
    maven.mvnSetVersionProperty('version.org.kie.kogito', newVersion)
}

void setupMavenConfig() {
    if (isSpecificMavenConfig()) {
        echo 'Setup Maven release config'
        configFileProvider([configFile(fileId: maven.getSubmarineSettingsXmlId(), targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){
            sh "echo '\n-Denforcer.skip=true' | tee -a .mvn/maven.config"
            sh "echo '\n-B -s ${MAVEN_SETTINGS_FILE}' | tee -a .mvn/maven.config"
            sh "sed -i 's|<repositories>|<repositories><repository><id>staging</id><name>Staging Repository</name><url>${params.MAVEN_DEPENDENCIES_REPOSITORY}</url><layout>default</layout><snapshots><enabled>true</enabled></snapshots><releases><enabled>true</enabled></releases></repository>|g' ${MAVEN_SETTINGS_FILE}"
            sh "sed -i 's|<pluginRepositories>|<pluginRepositories><pluginRepository><id>staging</id><name>Staging Repository</name><url>${params.MAVEN_DEPENDENCIES_REPOSITORY}</url><layout>default</layout><snapshots><enabled>true</enabled></snapshots><releases><enabled>true</enabled></releases></pluginRepository>|g' ${MAVEN_SETTINGS_FILE}"
            sh "sed -i 's|external:\\*|external:*,!staging|g' ${MAVEN_SETTINGS_FILE}" // Done to allow Maven to download release artifacts from MAVEN_DEPENDENCIES_REPOSITORY
        }
    }
}

boolean isSpecificMavenConfig() {
    return params.MAVEN_DEPENDENCIES_REPOSITORY != ''
}

void deployArtifacts() {
    def mvnCmd = 'clean deploy'
    if (params.MAVEN_DEPLOY_REPOSITORY) {
        mvnCmd += " -DaltDeploymentRepository=runtimes-artifacts::default::${params.MAVEN_DEPLOY_REPOSITORY} -Denforcer.skip=true"
    }

    if (isSpecificMavenConfig()) {
        maven.runMaven(mvnCmd, true)
    } else {
        maven.runMavenWithSubmarineSettings(mvnCmd, true)
    }
}

void mavenCleanInstall(String directory, boolean skipTests = false, List profiles = [], String extraArgs = '') {
    runMaven('clean install', directory, skipTests, profiles, extraArgs)
}

void runMaven(String goals, String directory, boolean skipTests = false, List profiles = [], String extraArgs = '') {
    mvnCmd = goals
    if(!profiles.isEmpty()){
        mvnCmd += " -P${profiles.join(',')}"
    }
    if(extraArgs != ''){
        mvnCmd += " ${extraArgs}"
    }
    dir(directory) {
        maven.runMaven(mvnCmd, skipTests, ['-fae'])
    }
}