<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="designPatterns" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Design Patterns</title>

  <section xml:id="designPatternsIntroduction">
    <title>Design Patterns Introduction</title>

    <para>These design patterns list and solve common design challenges.</para>
  </section>

  <section xml:id="assigningTimeToPlanningEntities">
    <title>Assigning Time to Planning Entities</title>

    <para>Dealing with time and dates in planning problems may be problematic because it is dependent on the needs of your use
    case.</para>

    <para>There are several representations of timestamps, dates, durations and periods in Java. Choose the right
    representation type for your use case:</para>

    <itemizedlist>
      <listitem>
        <para><literal>java.util.Date</literal> (deprecated): a slow, error-prone way to represent timestamps. Do not
        use.</para>
      </listitem>

      <listitem>
        <para><literal>javax.time.LocalDateTime</literal>, <literal>LocalDate</literal>, <literal>DayOfWeek</literal>,
        <literal>Duration</literal>, <literal>Period</literal>, ...: an accurate way to represent and calculate with
        timestamps, dates, ...</para>

        <itemizedlist>
          <listitem>
            <para>Supports timezones and DST (Daylight Saving Time).</para>
          </listitem>

          <listitem>
            <para>Requires Java 8 or higher.</para>

            <itemizedlist>
              <listitem>
                <para>On Java 7 use its backport called <emphasis>ThreeTen Backport</emphasis> instead.</para>
              </listitem>

              <listitem>
                <para>On Java 6 or lower, use its predecessor called <emphasis>Joda Time</emphasis> instead.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><literal>int</literal> or <literal>long</literal>: Caches a timestamp as a simplified number of
        coarse-grained time units (such as minutes) from the start of the global planning time window or the
        epoch.</para>

        <itemizedlist>
          <listitem>
            <para>For example: a <literal>LocalDateTime</literal> of <literal>1-JAN 08:00:00</literal> becomes an
            <literal>int</literal> of <literal>400</literal> minutes. Similarly <literal>1-JAN 09:00:00</literal>
            becomes <literal>460</literal> minutes.</para>
          </listitem>

          <listitem>
            <para>It often represents an extra field in a class, alongside the <literal>LocalDateTime</literal> field from which it was
            calculated. The <literal>LocalDateTime</literal> is used for user visualization, but the
            <literal>int</literal> is used in the score constraints.</para>
          </listitem>

          <listitem>
            <para>It is faster in calculations, which is especially useful in the TimeGrain pattern.</para>
          </listitem>

          <listitem>
            <para>Do not use if timezones or DST affect the score constraints.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <para>There are also several designs for assigning a planning entity to a starting time (or date):</para>

    <itemizedlist>
      <listitem>
        <para>The starting time is fixed beforehand. It is not a planning variable (in such solver).</para>

        <itemizedlist>
          <listitem>
            <para>For example, in the <link linkend="bedAllocation">hospital bed planning</link> example, the arrival
            day of each patient is fixed beforehand.</para>
          </listitem>

          <listitem>
            <para>This is common in <link linkend="multiStagePlanning">multi stage planning</link>, when the starting time has been decided already in an earlier
            planning stage.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>The starting time is not fixed, it is a planning variable (genuine or shadow).</para>

        <itemizedlist>
          <listitem>
            <para>If all planning entities have the same duration, use the <link linkend="timeslotPattern">Timeslot
            pattern</link>.</para>

            <itemizedlist>
              <listitem>
                <para>For example in course scheduling, all lectures take 1 hour. Therefore, each timeslot is 1 hour.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>If the duration differs and time is rounded to a specifc time granularity (for example 5 minutes) use the
            <link linkend="timeGrainPattern">TimeGrain pattern</link>.</para>

            <itemizedlist>
              <listitem>
                <para>For example in meeting scheduling, all meetings start at 15 minute intervals. All meetings take
                15, 30, 45, 60, 90 or 120 minutes.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>If the duration differs and one task starts immediately after the previous task (assigned to the same
            executor) finishes, use the <link linkend="???">Chained Through Time pattern</link>.</para>

            <itemizedlist>
              <listitem>
                <para>For example in time windowed vehicle routing, each vehicle departs immediately to the next
                customer when the delivery for the previous customer finishes.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <para>Choose the right pattern depending on the use case:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Design_patterns/assigningTimeToPlanningEntities.png"/>
      </imageobject>
    </mediaobject>

    <section xml:id="timeslotPattern">
      <title>Timeslot Pattern: Assign to a Fixed-Length Timeslot</title>

      <para>If all planning entities have <emphasis role="bold">the same duration</emphasis> (or can be inflated to the
      same duration), the Timeslot pattern is useful. The planning entities are assigned to a timeslot rather than
      time. For example in <link linkend="curriculumCourse">course timetabling</link>, all lectures take 1
      hour.</para>

      <para>The timeslots can start at any time. For example, the timeslots start at 8:00, 9:00, 10:15 (after a 15-minute break), 11:15, ... They can even overlap, but that is unusual.</para>

      <para>It is also usable if all planning entities can be inflated to the same duration. For example in <link
      linkend="examination">exam timetabling</link>, some exams take 90 minutes and others 120 minutes, but all
      timeslots are 120 minutes. When an exam of 90 minutes is assigned to a timeslot, for the remaining 30 minutes, its
      seats are occupied too and cannot be used by another exam.</para>

      <para>Usually there is a second planning variable, for example the room. In course timetabling, two lectures are in
      conflict if they share the same room at the same timeslot. However, in exam timetabling, that is allowed, if there is
      enough seating capacity in the room (although mixed exam durations in the same room do inflict a soft score
      penalty).</para>
    </section>

    <section xml:id="timeGrainPattern">
      <title>TimeGrain Pattern: Assign to a Starting TimeGrain</title>

      <para>Assigning humans to start a meeting at 4 seconds after 9 o'clock is pointless because most human activities have a time granularity of 5 minutes or 15 minutes. Therefore
      it is not necessary to allow a planning entity to be assigned subsecond, second or even 1 minute accuracy. The 5
      minute or 15 minutes accuracy suffices. The TimeGrain pattern models such <emphasis role="bold">time
      accuracy</emphasis> by partitioning time as time grains. For example in <link linkend="meetingScheduling">meeting
      scheduling</link>, all meetings start/end in hour, half hour, or 15-minute intervals before or after each hour, therefore the optimal settings for time
      grains is 15 minutes.</para>

      <para>Each planning entity is assigned to a start time grain. The end time grain is calculated by adding the
      duration in grains to the starting time grain. Overlap of two entities is determined by comparing their start and
      end time grains.</para>

      <para>This pattern also works well with a coarser time granularity (such as days, half days, hours, ...). With a
      finer time granularity (such as seconds, milliseconds, ...) and a long time window, the value range (and therefore
      <link linkend="searchSpaceSize">the search space</link>) can become too high, which reduces efficiency and scalability.
      However, such solution is not impossible, as shown in <link linkend="cheapTimeScheduling">cheap time scheduling</link>.</para>
    </section>

    <section xml:id="chainedThroughTime">
      <title>Chained Through Time Pattern: Assign in a Chain that Determines Starting Time</title>

      <para>If a person or a machine continuously works on <emphasis role="bold">1 task at a time in sequence</emphasis>,
      which means starting a task when the previous is finished (or with a deterministic delay), the Chained Through Time pattern
      is useful. For example, in the vehicle routing with time windows example, a vehicle drives from customer to
      customer (thus it handles one customer at a time).</para>

      <para>In this pattern, the planning entities are <link linkend="chainedPlanningVariable">chained</link>. The
      anchor determines the starting time of its first planning entity. The second entity's starting time is calculated
      based on the starting time and duration of the first entity. For example, in task assignment, Beth (the anchor)
      starts working at 8:00, thus her first task starts at 8:00. It lasts 52 mins, therefore her second task starts at 8:52. The
      starting time of an entity is usually <link linkend="shadowVariable">a shadow variable</link>.</para>

      <para>An anchor has only one chain. Although it is possible to split up the anchor into two separate anchors, for
      example split up Beth into Beth's left hand and Beth's right hand (because she can do two tasks at the same time),
      this model makes pooling resources difficult. Consequently, using this model in the exam scheduling example
      to allow two or more exams to use the same room at the same time is problematic.</para>

      <para>Between planning entities, there are three ways to create gaps:</para>

      <itemizedlist>
        <listitem>
          <para>No gaps: This is common when the anchor is a machine. For example, a build server always starts the next
          job when the previous finishes, without a break.</para>
        </listitem>

        <listitem>
          <para>Only deterministic gaps: This is common for humans. For example, any task that crosses the 10:00 barrier
          gets an extra 15 minutes duration so the human can take a break. </para>

          <itemizedlist>
            <listitem>
              <para>A deterministic gap can be subjected to complex business logic. For example in vehicle routing, a
              cross-continent truck driver needs to rest 15 minutes after 2 hours of driving (which may also occur during
              loading or unloading time at a customer location) and also needs to rest 10 hours after 14 hours of
              work.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Planning variable gaps: This is uncommon, because such extra planning variable (which impacts the <link
          linkend="searchSpaceSize">search space</link>) reduces efficiency and scalability.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="multiStragePlanning">
    <title>Multi-stage planning</title>

    <para>For practical or organizational reasons (such as Conway's law), complex planning problems are often broken
    down in multiple stages. A typical example is train scheduling, where one department decides where and when a train
    will arrive or depart, and another departments assigns the operators to the actual train cars/locomotives.</para>

    <para>Each stage has its own solver configuration (and therefore its own <literal>SolverFactory</literal>). Do not
    confuse it with <link linkend="solverPhase">multi-phase solving</link> which uses a one-solver configuration.</para>

    <para>Similarly to <link linkend="partitionedSearch">Partitioned Search</link>, multi-stage planning leads to
    suboptimal results. Nevertheless, it may be beneficial in order to simplify the maintenance, ownership, and help a project
    to succeed.</para>
  </section>
</chapter>
