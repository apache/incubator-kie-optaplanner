<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="optimizationAlgorithms" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Optimization Algorithms</title>

  <section xml:id="searchSpaceSize">
    <title>Search Space Size in the Real World</title>

    <para>The number of possible solutions for a planning problem can be mind blowing. For example:</para>

    <itemizedlist>
      <listitem>
        <para>4 queens has <literal>256</literal> possible solutions (<literal>4^4</literal>) and 2 optimal
        solutions.</para>
      </listitem>

      <listitem>
        <para>5 queens has <literal>3125</literal> possible solutions (<literal>5^5</literal>) and 1 optimal
        solution.</para>
      </listitem>

      <listitem>
        <para>8 queens has <literal>16777216</literal> possible solutions (<literal>8^8</literal>) and 92 optimal
        solutions.</para>
      </listitem>

      <listitem>
        <para>64 queens has more than <literal>10^115</literal> possible solutions (<literal>64^64</literal>).</para>
      </listitem>

      <listitem>
        <para>Most real-life planning problems have an incredible number of possible solutions and only 1 or a few
        optimal solutions.</para>
      </listitem>
    </itemizedlist>

    <para>For comparison: the minimal number of atoms in the known universe (10^80). As a planning problem gets bigger,
    the search space tends to blow up really fast. Adding only 1 extra planning entity or planning value can heavily
    multiply the running time of some algorithms.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Optimization_algorithms/cloudBalanceSearchSpaceSize.png"/>
      </imageobject>
    </mediaobject>

    <para>Calculating the number of possible solutions depends on the design of the domain model:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Optimization_algorithms/searchSpaceSizeCalculation.png"/>
      </imageobject>
    </mediaobject>

    <note>
      <para>This search space size calculation includes infeasible solutions (if they can be represented by the model),
      because:</para>

      <itemizedlist>
        <listitem>
          <para>The optimal solution might be infeasible.</para>
        </listitem>

        <listitem>
          <para>There are many types of hard constraints which cannot be incorporated in the formula practically. For
          example in Cloud Balancing, try incorporating the CPU capacity constraint in the formula.</para>
        </listitem>
      </itemizedlist>

      <para>Even in cases were adding some of the hard constraints in the formula is practical, for example Course
      Scheduling, the resulting search space is still huge.</para>
    </note>

    <para>An algorithm that checks every possible solution (even with pruning such as in <link
    linkend="branchAndBound">Branch And Bound</link>) can easily run for billions of years on a single real-life
    planning problem. What we really want is to <emphasis role="bold">find the best solution in the limited time at our
    disposal</emphasis>. Planning competitions (such as the International Timetabling Competition) show that Local
    Search variations (<link linkend="tabuSearch">Tabu Search</link>, <link linkend="simulatedAnnealing">Simulated
    Annealing</link>, <link linkend="lateAcceptance">Late Acceptance</link>, ...) usually perform best for real-world
    problems given real-world time limitations.</para>
  </section>

  <section xml:id="doesPlannerFindTheOptimalSolution">
    <title>Does Planner Find the Optimal Solution?</title>

    <para>The business wants the optimal solution, but they also have other requirements:</para>

    <itemizedlist>
      <listitem>
        <para>Scale out: Large production datasets must not crash and have good results too.</para>
      </listitem>

      <listitem>
        <para>Optimize the right problem: The constraints must match the actual business needs.</para>
      </listitem>

      <listitem>
        <para>Available time: The solution must be found in time, before it becomes useless to execute.</para>
      </listitem>

      <listitem>
        <para>Reliability: Every dataset must have at least a decent result (better than a human planner).</para>
      </listitem>
    </itemizedlist>

    <para>Given these requirements, and despite the promises of some salesmen, it's usually impossible for anyone or
    anything to find the optimal solution. Therefore, Planner focuses on finding the best solution in available time. In
    <link linkend="examplesOverview">realistic, independent competitions</link>, it often comes out as the best
    <emphasis>reusable</emphasis> software.</para>

    <para>The nature of NP-complete problems make scaling a prime concern. <emphasis role="bold">The result quality of a
    small dataset guarantees nothing about the result quality of a large dataset.</emphasis> Scaling issues cannot be
    mitigated by hardware purchases later on. Start testing with a production sized dataset as soon as possible. Don't
    assess quality on small datasets (unless production encounters only such datasets). Instead, solve a production
    sized dataset and compare the results of longer executions, different algorithms and - if available - the human
    planner.</para>
  </section>

  <section xml:id="architectureOverview">
    <title>Architecture Overview</title>

    <para>Planner is the first framework to combine optimization algorithms (metaheuristics, ...) with score calculation
    by a rule engine (such as Drools Expert). This combination turns out to be a very efficient, because:</para>

    <itemizedlist>
      <listitem>
        <para>A rule engine such as Drools Expert is <emphasis role="bold">great for calculating the score</emphasis> of
        a solution of a planning problem. It makes it easy and scalable to add additional soft or hard constraints such
        as "a teacher shouldn't teach more then 7 hours a day". It does delta based score calculation without any extra
        code. However it tends to be not suitable to actually find new solutions.</para>
      </listitem>

      <listitem>
        <para>An optimization algorithm is <emphasis role="bold">great at finding new improving solutions</emphasis> for
        a planning problem, without necessarily brute-forcing every possibility. However it needs to know the score of a
        solution and offers no support in calculating that score efficiently.</para>
      </listitem>
    </itemizedlist>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Optimization_algorithms/architectureOverview.png"/>
      </imageobject>
    </mediaobject>
  </section>

  <section xml:id="optimizationAlgorithmsOverview">
    <title>Optimization Algorithms Overview</title>

    <para>Planner supports 3 <emphasis>families</emphasis> of optimization algorithms: Exhaustive Search, Construction
    Heuristics and Metaheuristics. In practice, Metaheuristics (in combination with Construction Heuristics to
    initialize) are the recommended choice:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Optimization_algorithms/scalabilityOfOptimizationAlgorithms.png"/>
      </imageobject>
    </mediaobject>

    <para>Each of these families of algorithms has multiple optimization algorithms:</para>

    <table>
      <title>Optimization Algorithms Overview</title>

      <tgroup cols="6">
        <colspec align="left" colnum="1" colwidth="4*"/>

        <colspec align="center" colnum="2" colwidth="1*"/>

        <colspec align="center" colnum="3" colwidth="1*"/>

        <colspec align="center" colnum="4" colwidth="1*"/>

        <colspec align="center" colnum="5" colwidth="1*"/>

        <colspec align="center" colnum="6" colwidth="1*"/>

        <thead>
          <row>
            <entry>Algorithm</entry>

            <entry>Scalable?</entry>

            <entry>Optimal?</entry>

            <entry>Easy to use?</entry>

            <entry>Tweakable?</entry>

            <entry>Requires CH?</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><emphasis role="bold">Exhaustive Search (ES)</emphasis></entry>

            <entry/>

            <entry/>

            <entry/>

            <entry/>

            <entry/>
          </row>

          <row>
            <entry>  <link linkend="bruteForce">Brute Force</link></entry>

            <entry>0/5</entry>

            <entry>5/5</entry>

            <entry>5/5</entry>

            <entry>0/5</entry>

            <entry>No</entry>
          </row>

          <row>
            <entry>  <link linkend="branchAndBound">Branch And Bound</link></entry>

            <entry>0/5</entry>

            <entry>5/5</entry>

            <entry>4/5</entry>

            <entry>2/5</entry>

            <entry>No</entry>
          </row>

          <row>
            <entry><emphasis role="bold">Construction heuristics (CH)</emphasis></entry>

            <entry/>

            <entry/>

            <entry/>

            <entry/>

            <entry/>
          </row>

          <row>
            <entry>  <link linkend="firstFit">First Fit</link></entry>

            <entry>5/5</entry>

            <entry>1/5</entry>

            <entry>5/5</entry>

            <entry>1/5</entry>

            <entry>No</entry>
          </row>

          <row>
            <entry>  <link linkend="firstFitDecreasing">First Fit Decreasing</link></entry>

            <entry>5/5</entry>

            <entry>2/5</entry>

            <entry>4/5</entry>

            <entry>2/5</entry>

            <entry>No</entry>
          </row>

          <row>
            <entry>  <link linkend="weakestFit">Weakest Fit</link></entry>

            <entry>5/5</entry>

            <entry>2/5</entry>

            <entry>4/5</entry>

            <entry>2/5</entry>

            <entry>No</entry>
          </row>

          <row>
            <entry>  <link linkend="weakestFitDecreasing">Weakest Fit Decreasing</link></entry>

            <entry>5/5</entry>

            <entry>2/5</entry>

            <entry>4/5</entry>

            <entry>2/5</entry>

            <entry>No</entry>
          </row>

          <row>
            <entry>  <link linkend="strongestFit">Strongest Fit</link></entry>

            <entry>5/5</entry>

            <entry>2/5</entry>

            <entry>4/5</entry>

            <entry>2/5</entry>

            <entry>No</entry>
          </row>

          <row>
            <entry>  <link linkend="strongestFitDecreasing">Strongest Fit Decreasing</link></entry>

            <entry>5/5</entry>

            <entry>2/5</entry>

            <entry>4/5</entry>

            <entry>2/5</entry>

            <entry>No</entry>
          </row>

          <row>
            <entry>  <link linkend="cheapestInsertion">Cheapest Insertion</link></entry>

            <entry>3/5</entry>

            <entry>2/5</entry>

            <entry>5/5</entry>

            <entry>2/5</entry>

            <entry>No</entry>
          </row>

          <row>
            <entry>  <link linkend="regretInsertion">Regret Insertion</link></entry>

            <entry>3/5</entry>

            <entry>2/5</entry>

            <entry>5/5</entry>

            <entry>2/5</entry>

            <entry>No</entry>
          </row>

          <row>
            <entry><emphasis role="bold">Metaheuristics (MH)</emphasis></entry>

            <entry/>

            <entry/>

            <entry/>

            <entry/>

            <entry/>
          </row>

          <row>
            <entry>  Local Search</entry>

            <entry/>

            <entry/>

            <entry/>

            <entry/>

            <entry/>
          </row>

          <row>
            <entry>    <link linkend="hillClimbing">Hill Climbing</link></entry>

            <entry>5/5</entry>

            <entry>2/5</entry>

            <entry>4/5</entry>

            <entry>3/5</entry>

            <entry>Yes</entry>
          </row>

          <row>
            <entry>    <link linkend="tabuSearch">Tabu Search</link></entry>

            <entry>5/5</entry>

            <entry>4/5</entry>

            <entry>3/5</entry>

            <entry>5/5</entry>

            <entry>Yes</entry>
          </row>

          <row>
            <entry>    <link linkend="simulatedAnnealing">Simulated Annealing</link></entry>

            <entry>5/5</entry>

            <entry>4/5</entry>

            <entry>2/5</entry>

            <entry>5/5</entry>

            <entry>Yes</entry>
          </row>

          <row>
            <entry>    <link linkend="lateAcceptance">Late Acceptance</link></entry>

            <entry>5/5</entry>

            <entry>4/5</entry>

            <entry>3/5</entry>

            <entry>5/5</entry>

            <entry>Yes</entry>
          </row>

          <row>
            <entry>    <link linkend="stepCountingHillClimbing">Step Counting Hill Climbing</link></entry>

            <entry>5/5</entry>

            <entry>4/5</entry>

            <entry>3/5</entry>

            <entry>5/5</entry>

            <entry>Yes</entry>
          </row>

          <row>
            <entry>  Evolutionary Algorithms</entry>

            <entry/>

            <entry/>

            <entry/>

            <entry/>

            <entry/>
          </row>

          <row>
            <entry>    <link linkend="evolutionaryStrategies">Evolutionary Strategies</link></entry>

            <entry>4/5</entry>

            <entry>3/5</entry>

            <entry>2/5</entry>

            <entry>5/5</entry>

            <entry>Yes</entry>
          </row>

          <row>
            <entry>    <link linkend="geneticAlgorithms">Genetic Algorithms</link></entry>

            <entry>4/5</entry>

            <entry>3/5</entry>

            <entry>2/5</entry>

            <entry>5/5</entry>

            <entry>Yes</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>If you want to learn more about metaheuristics, read the free books <link
    xlink:href="http://www.cs.gmu.edu/~sean/book/metaheuristics/">Essentials of Metaheuristics</link> or <link
    xlink:href="http://www.cleveralgorithms.com/">Clever Algorithms</link>.</para>
  </section>

  <section xml:id="whichOptimizationAlgorithmsShouldIUse">
    <title>Which Optimization Algorithms Should I Use?</title>

    <para>The <emphasis>best</emphasis> optimization algorithms configuration for your use case depends heavily on your
    use case. Nevertheless, this vanilla recipe will get you into the game with a pretty good configuration, probably
    much better than what you're used to.</para>

    <para>Start with a quick configuration that involves little or no configuration and optimization code:</para>

    <orderedlist>
      <listitem>
        <para><link linkend="firstFit">First Fit</link></para>
      </listitem>
    </orderedlist>

    <para>Next, implement <link linkend="planningEntityDifficulty">planning entity difficulty</link> comparison and turn
    it into:</para>

    <orderedlist>
      <listitem>
        <para><link linkend="firstFitDecreasing">First Fit Decreasing</link></para>
      </listitem>
    </orderedlist>

    <para>Next, add Late Acceptance behind it:</para>

    <orderedlist>
      <listitem>
        <para>First Fit Decreasing</para>
      </listitem>

      <listitem>
        <para><link linkend="lateAcceptance">Late Acceptance</link>. A Late Acceptance size of 400 usually works
        well.</para>
      </listitem>
    </orderedlist>

    <para>At this point <emphasis>the free lunch is over</emphasis>. The return on invested time lowers. The result is
    probably already more than good enough.</para>

    <para>But you can do even better, at a lower return on invested time. Use the <link
    linkend="benchmarker">Benchmarker</link> and try a couple of different Tabu Search, Simulated Annealing and Late
    Acceptance configurations, for example:</para>

    <orderedlist>
      <listitem>
        <para>First Fit Decreasing</para>
      </listitem>

      <listitem>
        <para><link linkend="tabuSearch">Tabu Search</link>. An entity tabu size of 7 usually works well.</para>
      </listitem>
    </orderedlist>

    <para>Use the <link linkend="benchmarker">Benchmarker</link> to improve the values for those size parameters.</para>

    <para>If it's worth your time, continue experimenting further. For example, try combining multiple algorithms
    together:</para>

    <orderedlist>
      <listitem>
        <para>First Fit Decreasing</para>
      </listitem>

      <listitem>
        <para>Late Acceptance (relatively long time)</para>
      </listitem>

      <listitem>
        <para>Tabu Search (relatively short time)</para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="powerTweaking">
    <title>Power tweaking or default parameter values</title>

    <para>Many optimization algorithms have parameters which affect results and scalability. Planner applies
    <emphasis>configuration by exception</emphasis>, so all optimization algorithms have default parameter values. This
    is very similar to the Garbage Collection parameters in a JVM: most users have no need to tweak them, but power
    users do tweak them.</para>

    <para>The default parameter values are good enough for many cases (and especially for prototypes), but if
    development time allows, it can be well worth to power tweak them with the <link
    linkend="benchmarker">benchmarker</link> for better results and scalability on a specific use case. The
    documentation for each optimization algorithm also declares its advanced configuration for power tweaking.</para>

    <warning>
      <para>The default value of parameters will change between minor versions, to improve them for most users (but not
      necessary for you). To shield yourself from these changes, for better or worse, always use the advanced
      configuration. This is not recommended.</para>
    </warning>
  </section>

  <section xml:id="solverPhase">
    <title>Solver Phase</title>

    <para>A <literal>Solver</literal> can use multiple optimization algorithms in sequence. <emphasis role="bold">Each
    optimization algorithm is represented by a solver <literal>Phase</literal>.</emphasis> There is never more than 1
    <literal>Phase</literal> solving at the same time.</para>

    <note>
      <para>Some <literal>Phase</literal> implementations can combine techniques from multiple optimization algorithms,
      but it is still just 1 <literal>Phase</literal>. For example: a Local Search <literal>Phase</literal> can do
      Simulated Annealing with entity Tabu.</para>
    </note>

    <para>Here's a configuration that runs 3 phases in sequence:</para>

    <programlisting language="xml">&lt;solver&gt;
  ...
  &lt;constructionHeuristic&gt;
    ... &lt;!-- First phase: First Fit Decreasing --&gt;
  &lt;/constructionHeuristic&gt;
  &lt;localSearch&gt;
    ... &lt;!-- Second phase: Late Acceptance --&gt;
  &lt;/localSearch&gt;
  &lt;localSearch&gt;
    ... &lt;!-- Third phase: Tabu Search --&gt;
  &lt;/localSearch&gt;
&lt;/solver&gt;</programlisting>

    <para>The solver phases are run in the order defined by solver configuration. When the first
    <literal>Phase</literal> terminates, the second <literal>Phase</literal> starts, and so on. When the last
    <literal>Phase</literal> terminates, the <literal>Solver</literal> terminates. Usually, a <literal>Solver</literal>
    will first run a construction heuristic and then run 1 or multiple metaheuristics:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Optimization_algorithms/generalPhaseSequence.png"/>
      </imageobject>
    </mediaobject>

    <para>If no phases are configured, Planner will default to a Construction Heuristic phase followed by a Local Search
    phase.</para>

    <para>Some phases (especially construction heuristics) will terminate automatically. Other phases (especially
    metaheuristics) will only terminate if the <literal>Phase</literal> is configured to terminate:</para>

    <programlisting language="xml">&lt;solver&gt;
  ...
  &lt;termination&gt;&lt;!-- Solver termination --&gt;
    &lt;secondsSpentLimit&gt;90&lt;/secondsSpentLimit&gt;
  &lt;/termination&gt;
  &lt;localSearch&gt;
    &lt;termination&gt;&lt;!-- Phase termination --&gt;
      &lt;secondsSpentLimit&gt;60&lt;/secondsSpentLimit&gt;&lt;!-- Give the next phase a chance to run too, before the Solver terminates --&gt;
    &lt;/termination&gt;
    ...
  &lt;/localSearch&gt;
  &lt;localSearch&gt;
    ...
  &lt;/localSearch&gt;
&lt;/solver&gt;</programlisting>

    <para>If the <literal>Solver</literal> terminates (before the last <literal>Phase</literal> terminates itself), the
    current phase is terminated and all subsequent phases won't run.</para>
  </section>

  <section xml:id="scopeOverview">
    <title>Scope Overview</title>

    <para>A solver will iteratively run phases. Each phase will usually iteratively run steps. Each step, in turn,
    usually iteratively runs moves. These form 4 nested scopes: solver, phase, step and move.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Optimization_algorithms/scopeOverview.png"/>
      </imageobject>
    </mediaobject>

    <para>Configure <link linkend="logging">logging</link> to display the log messages of each scope.</para>
  </section>

  <section xml:id="termination">
    <title>Termination</title>

    <para>Not all phases terminate automatically and sometimes you don't want to wait that long anyway. A
    <literal>Solver</literal> can be terminated synchronously by up-front configuration or asynchronously from another
    thread.</para>

    <para>Especially metaheuristic phases will need to be told when to stop solving. This can be because of a number of
    reasons: the time is up, the perfect score has been reached, just before its solution is used, ... The only thing
    you can't depend on, is on finding the optimal solution (unless you know the optimal score), because a metaheuristic
    algorithm generally doesn't know it when it finds the optimal solution. For real-life problems this doesn't turn out
    to be much of a problem, because finding the optimal solution could take years, so you'll want to terminate sooner
    anyway. The only thing that matters is finding the best solution in the available time.</para>

    <important>
      <para>If no termination is configured (and a metaheuristic algorithm is used), the <literal>Solver</literal> will
      run forever, until <link linkend="asynchronousTermination">terminateEarly()</link> is called from another thread.
      This is especially common during <link linkend="realTimePlanning">real-time planning</link>.</para>
    </important>

    <para>For synchronous termination, configure a <literal>Termination</literal> on a <literal>Solver</literal> or a
    <literal>Phase</literal> when it needs to stop. You can implement your own <literal>Termination</literal>, but the
    built-in implementations should suffice for most needs. Every <literal>Termination</literal> can calculate a
    <emphasis>time gradient</emphasis> (needed for some optimization algorithms), which is a ratio between the time
    already spent solving and the estimated entire solving time of the <literal>Solver</literal> or
    <literal>Phase</literal>.</para>

    <section xml:id="timeMillisSpentTermination">
      <title>TimeMillisSpentTermination</title>

      <para>Terminates when an amount of time has been used.</para>

      <programlisting language="xml">  &lt;termination&gt;
    &lt;millisecondsSpentLimit&gt;500&lt;/millisecondsSpentLimit&gt;
  &lt;/termination&gt;</programlisting>

      <programlisting language="xml">  &lt;termination&gt;
    &lt;secondsSpentLimit&gt;10&lt;/secondsSpentLimit&gt;
  &lt;/termination&gt;</programlisting>

      <programlisting language="xml">  &lt;termination&gt;
    &lt;minutesSpentLimit&gt;5&lt;/minutesSpentLimit&gt;
  &lt;/termination&gt;</programlisting>

      <programlisting language="xml">  &lt;termination&gt;
    &lt;hoursSpentLimit&gt;1&lt;/hoursSpentLimit&gt;
  &lt;/termination&gt;</programlisting>

      <programlisting language="xml">  &lt;termination&gt;
    &lt;daysSpentLimit&gt;2&lt;/daysSpentLimit&gt;
  &lt;/termination&gt;</programlisting>

      <para>Multiple time types can be used together, for example to configure 150 minutes, either configure it
      directly:</para>

      <programlisting language="xml">  &lt;termination&gt;
    &lt;minutesSpentLimit&gt;150&lt;/minutesSpentLimit&gt;
  &lt;/termination&gt;</programlisting>

      <para>Or use a combination that sums up to 150 minutes:</para>

      <programlisting language="xml">  &lt;termination&gt;
    &lt;hoursSpentLimit&gt;2&lt;/hoursSpentLimit&gt;
    &lt;minutesSpentLimit&gt;30&lt;/minutesSpentLimit&gt;
  &lt;/termination&gt;</programlisting>

      <note>
        <para>This <literal>Termination</literal> will most likely sacrifice perfect reproducibility (even with
        <literal>environmentMode</literal> <literal>REPRODUCIBLE</literal>) because the available CPU time differs
        frequently between runs:</para>

        <itemizedlist>
          <listitem>
            <para>The available CPU time influences the number of steps that can be taken, which might be a few more or
            less.</para>
          </listitem>

          <listitem>
            <para>The <literal>Termination</literal> might produce slightly different time gradient values, which will
            send time gradient based algorithms (such as Simulated Annealing) on a radically different path.</para>
          </listitem>
        </itemizedlist>
      </note>
    </section>

    <section xml:id="unimprovedTimeMillisSpentTermination">
      <title>UnimprovedTimeMillisSpentTermination</title>

      <para>Terminates when the best score hasn't improved in an amount of time.</para>

      <programlisting language="xml">  &lt;localSearch&gt;
    &lt;termination&gt;
      &lt;unimprovedMillisecondsSpentLimit&gt;500&lt;/unimprovedMillisecondsSpentLimit&gt;
    &lt;/termination&gt;
  &lt;/localSearch&gt;</programlisting>

      <programlisting language="xml">  &lt;localSearch&gt;
    &lt;termination&gt;
      &lt;unimprovedSecondsSpentLimit&gt;10&lt;/unimprovedSecondsSpentLimit&gt;
    &lt;/termination&gt;
  &lt;/localSearch&gt;</programlisting>

      <programlisting language="xml">  &lt;localSearch&gt;
    &lt;termination&gt;
      &lt;unimprovedMinutesSpentLimit&gt;5&lt;/unimprovedMinutesSpentLimit&gt;
    &lt;/termination&gt;
  &lt;/localSearch&gt;</programlisting>

      <programlisting language="xml">  &lt;localSearch&gt;
    &lt;termination&gt;
      &lt;unimprovedHoursSpentLimit&gt;1&lt;/unimprovedHoursSpentLimit&gt;
    &lt;/termination&gt;
  &lt;/localSearch&gt;</programlisting>

      <programlisting language="xml">  &lt;localSearch&gt;
    &lt;termination&gt;
      &lt;unimprovedDaysSpentLimit&gt;1&lt;/unimprovedDaysSpentLimit&gt;
    &lt;/termination&gt;
  &lt;/localSearch&gt;</programlisting>

      <para>This termination should not be applied to Construction Heuristics, because they only update the best
      solution at the end. Therefore it might be better to configure it on a specific <literal>Phase</literal> (such as
      <literal>&lt;localSearch&gt;</literal>), instead of on the <literal>Solver</literal> itself.</para>

      <note>
        <para>This <literal>Termination</literal> will most likely sacrifice perfect reproducibility (even with
        <literal>environmentMode</literal> <literal>REPRODUCIBLE</literal>) because the available CPU time differs
        frequently between runs:</para>

        <itemizedlist>
          <listitem>
            <para>The available CPU time influences the number of steps that can be taken, which might be a few more or
            less.</para>
          </listitem>

          <listitem>
            <para>The <literal>Termination</literal> might produce slightly different time gradient values, which will
            send time gradient based algorithms (such as Simulated Annealing) on a radically different path.</para>
          </listitem>
        </itemizedlist>
      </note>
    </section>

    <section xml:id="bestScoreTermination">
      <title>BestScoreTermination</title>

      <para>Terminates when a certain score has been reached. Use this <literal>Termination</literal> if you know the
      perfect score, for example for 4 queens (which uses a <link linkend="simpleScore">SimpleScore</link>):</para>

      <programlisting language="xml">  &lt;termination&gt;
    &lt;bestScoreLimit&gt;0&lt;/bestScoreLimit&gt;
  &lt;/termination&gt;</programlisting>

      <para>For a planning problem with a <link linkend="hardSoftScore">HardSoftScore</link>, it could look like
      this:</para>

      <programlisting language="xml">  &lt;termination&gt;
    &lt;bestScoreLimit&gt;0hard/-5000soft&lt;/bestScoreLimit&gt;
  &lt;/termination&gt;</programlisting>

      <para>For a planning problem with a <link linkend="bendableScore">BendableScore</link> with 3 hard levels and 1
      soft level, it could look like this:</para>

      <programlisting language="xml">  &lt;termination&gt;
    &lt;bestScoreLimit&gt;0/0/0/-5000&lt;/bestScoreLimit&gt;
  &lt;/termination&gt;</programlisting>

      <para>To terminate once a feasible solution has been reached, this <literal>Termination</literal> isn't practical
      because it requires a <literal>bestScoreLimit</literal> such as <literal>0hard/-2147483648soft</literal>. Instead,
      use the next termination.</para>
    </section>

    <section xml:id="bestScoreFeasibleTermination">
      <title>BestScoreFeasibleTermination</title>

      <para>Terminates when a certain score is feasible. Requires that the <literal>Score</literal> implementation
      implements <literal>FeasibilityScore</literal>.</para>

      <programlisting language="xml">  &lt;termination&gt;
    &lt;bestScoreFeasible&gt;true&lt;/bestScoreFeasible&gt;
  &lt;/termination&gt;</programlisting>

      <para>This <literal>Termination</literal> is usually combined with other terminations.</para>
    </section>

    <section xml:id="stepCountTermination">
      <title>StepCountTermination</title>

      <para>Terminates when a number of steps has been reached. This is useful for hardware performance independent
      runs.</para>

      <programlisting language="xml">  &lt;localSearch&gt;
    &lt;termination&gt;
      &lt;stepCountLimit&gt;100&lt;/stepCountLimit&gt;
    &lt;/termination&gt;
  &lt;/localSearch&gt;</programlisting>

      <para>This <literal>Termination</literal> can only be used for a <literal>Phase</literal> (such as
      <literal>&lt;localSearch&gt;</literal>), not for the <literal>Solver</literal> itself.</para>
    </section>

    <section xml:id="unimprovedStepCountTermination">
      <title>UnimprovedStepCountTermination</title>

      <para>Terminates when the best score hasn't improved in a number of steps. This is useful for hardware performance
      independent runs.</para>

      <programlisting language="xml">  &lt;localSearch&gt;
    &lt;termination&gt;
      &lt;unimprovedStepCountLimit&gt;100&lt;/unimprovedStepCountLimit&gt;
    &lt;/termination&gt;
  &lt;/localSearch&gt;</programlisting>

      <para>If the score hasn't improved recently, it's probably not going to improve soon anyway and it's not worth the
      effort to continue. We have observed that once a new best solution is found (even after a long time of no
      improvement on the best solution), the next few steps tend to improve the best solution too.</para>

      <para>This <literal>Termination</literal> can only be used for a <literal>Phase</literal> (such as
      <literal>&lt;localSearch&gt;</literal>), not for the <literal>Solver</literal> itself.</para>
    </section>

    <section xml:id="calculateCountTermination">
      <title>CalculateCountTermination</title>

      <para>Terminates when a number of score calculations (which is usually the sum of the number of moves and the
      number of steps) have been reached. This is useful for benchmarking.</para>

      <programlisting language="xml">  &lt;termination&gt;
    &lt;calculateCountLimit&gt;100000&lt;/calculateCountLimit&gt;
  &lt;/termination&gt;</programlisting>

      <para>Switching <link linkend="environmentMode">EnvironmentMode</link> can heavily impact when this termination
      ends.</para>
    </section>

    <section xml:id="combiningMultipleTerminations">
      <title>Combining Multiple Terminations</title>

      <para>Terminations can be combined, for example: terminate after <literal>100</literal> steps or if a score of
      <literal>0</literal> has been reached:</para>

      <programlisting language="xml">  &lt;termination&gt;
    &lt;terminationCompositionStyle&gt;OR&lt;/terminationCompositionStyle&gt;
    &lt;stepCountLimit&gt;100&lt;/stepCountLimit&gt;
    &lt;bestScoreLimit&gt;0&lt;/bestScoreLimit&gt;
  &lt;/termination&gt;</programlisting>

      <para>Alternatively you can use AND, for example: terminate after reaching a feasible score of at least
      <literal>-100</literal> and no improvements in <literal>5</literal> steps:</para>

      <programlisting language="xml">  &lt;termination&gt;
    &lt;terminationCompositionStyle&gt;AND&lt;/terminationCompositionStyle&gt;
    &lt;unimprovedStepCountLimit&gt;5&lt;/unimprovedStepCountLimit&gt;
    &lt;bestScoreLimit&gt;-100&lt;/bestScoreLimit&gt;
  &lt;/termination&gt;</programlisting>

      <para>This example ensures it doesn't just terminate after finding a feasible solution, but also completes any
      obvious improvements on that solution before terminating.</para>
    </section>

    <section xml:id="asynchronousTermination">
      <title>Asynchronous Termination from Another Thread</title>

      <para>Sometimes you'll want to terminate a Solver early from another thread, for example because a user action or
      a server restart. This cannot be configured by a <literal>Termination</literal> as it's impossible to predict when
      and if it will occur. Therefore the <literal>Solver</literal> interface has these 2 thread-safe methods:</para>

      <programlisting language="java">public interface Solver {

    // ...

    boolean terminateEarly();
    boolean isTerminateEarly();

}</programlisting>

      <para>If you call the <literal>terminateEarly()</literal> method from another thread, the
      <literal>Solver</literal> will terminate at its earliest convenience and the <literal>solve(Solution)</literal>
      method will return in the original <literal>Solver</literal> thread.</para>
    </section>
  </section>

  <section xml:id="SolverEventListener">
    <title>SolverEventListener</title>

    <para>Each time a new best solution is found, the <literal>Solver</literal> fires a
    <literal>BestSolutionChangedEvent</literal>, in the solver's thread.</para>

    <para>To listen to such events, add a <literal>SolverEventListener</literal> to the
    <literal>Solver</literal>:</para>

    <programlisting language="java">public interface Solver {

    // ...

    void addEventListener(SolverEventListener&lt;? extends Solution&gt; eventListener);
    void removeEventListener(SolverEventListener&lt;? extends Solution&gt; eventListener);

}</programlisting>

    <para>The <literal>BestSolutionChangedEvent</literal>'s <literal>newBestSolution</literal> might not be initialized
    or feasible. Use the methods on <literal>BestSolutionChangedEvent</literal> to detect such cases:</para>

    <programlisting language="java">    solver.addEventListener(new SolverEventListener&lt;CloudBalance&gt;() {
        public void bestSolutionChanged(BestSolutionChangedEvent&lt;CloudBalance&gt; event) {
            // Ignore invalid solutions
            if (event.isNewBestSolutionInitialized()
                    &amp;&amp; event.getNewBestSolution().getScore().isFeasible()) {
                ...
            }
        }
    });</programlisting>

    <warning>
      <para>The <literal>bestSolutionChanged()</literal> method is called in the solver's thread, as part of
      <literal>Solver.solve()</literal>. So it should return quickly to avoid slowing down the solving.</para>
    </warning>
  </section>

  <section xml:id="customSolverPhase">
    <title>Custom Solver Phase</title>

    <para>Between phases or before the first phase, you might want to execute a custom action on the
    <literal>Solution</literal> to get a better score. Yet you'll still want to reuse the score calculation. For
    example, to implement a custom construction heuristic without implementing an entire
    <literal>Phase</literal>.</para>

    <note>
      <para>Most of the time, a custom solver phase is not worth the hassle. The supported <link
      linkend="constructionHeuristics">Constructions Heuristics</link> are configurable (use the <link
      linkend="benchmarker">Benchmarker</link> to tweak them), <literal>Termination</literal> aware and support
      partially initialized solutions too.</para>
    </note>

    <para>Implement the <literal>CustomPhaseCommand</literal> interface:</para>

    <programlisting language="java">public interface CustomPhaseCommand {

    void changeWorkingSolution(ScoreDirector scoreDirector);

}</programlisting>

    <para>For example:</para>

    <programlisting language="java">public class ToOriginalMachineSolutionInitializer implements CustomPhaseCommand {

    public void changeWorkingSolution(ScoreDirector scoreDirector) {
        MachineReassignment machineReassignment = (MachineReassignment) scoreDirector.getWorkingSolution();
        for (MrProcessAssignment processAssignment : machineReassignment.getProcessAssignmentList()) {
            scoreDirector.beforeVariableChanged(processAssignment, "machine");
            processAssignment.setMachine(processAssignment.getOriginalMachine());
            scoreDirector.afterVariableChanged(processAssignment, "machine");
            scoreDirector.triggerVariableListeners();
        }
    }

}</programlisting>

    <warning>
      <para>Any change on the planning entities in a <literal>CustomPhaseCommand</literal> must be notified to the
      <literal>ScoreDirector</literal>.</para>
    </warning>

    <warning>
      <para>Do not change any of the problem facts in a <literal>CustomPhaseCommand</literal>. That will corrupt the
      <literal>Solver</literal> because any previous score or solution was for a different problem. To do that, read
      about <link linkend="repeatedPlanning">repeated planning</link> and do it with a <link
      linkend="problemFactChange">ProblemFactChange</link> instead.</para>
    </warning>

    <para>Configure your <literal>CustomPhaseCommand</literal> like this:</para>

    <programlisting language="xml">&lt;solver&gt;
  ...
  &lt;customPhase&gt;
    &lt;customPhaseCommandClass&gt;org.optaplanner.examples.machinereassignment.solver.solution.initializer.ToOriginalMachineSolutionInitializer&lt;/customPhaseCommandClass&gt;
  &lt;/customPhase&gt;
  ... &lt;!-- Other phases --&gt;
&lt;/solver&gt;</programlisting>

    <para>Configure multiple <literal>customPhaseCommandClass</literal> instances to run them in sequence.</para>

    <important>
      <para>If the changes of a <literal>CustomPhaseCommand</literal> don't result in a better score, the best solution
      won't be changed (so effectively nothing will have changed for the next <literal>Phase</literal> or
      <literal>CustomPhaseCommand</literal>). To force such changes anyway, use
      <literal>forceUpdateBestSolution</literal>:</para>

      <programlisting language="xml">  &lt;customPhase&gt;
    &lt;customPhaseCommandClass&gt;...MyUninitializer&lt;/customPhaseCommandClass&gt;
    &lt;forceUpdateBestSolution&gt;true&lt;/forceUpdateBestSolution&gt;
  &lt;/customPhase&gt;</programlisting>
    </important>

    <note>
      <para>If the <literal>Solver</literal> or a <literal>Phase</literal> wants to terminate while a
      <literal>CustomPhaseCommand</literal> is still running, it will wait to terminate until the
      <literal>CustomPhaseCommand</literal> is done, however long that takes. The build-in solver phases don't suffer
      from this problem.</para>
    </note>
  </section>
</chapter>
