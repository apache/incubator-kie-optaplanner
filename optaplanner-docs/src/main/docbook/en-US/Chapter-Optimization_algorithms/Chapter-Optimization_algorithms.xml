<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="optimizationAlgorithms" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Optimization algorithms</title>

  <section>
    <title>Search space size in the real world</title>

    <para>The number of possible solutions for a planning problem can be mind blowing. For example:</para>

    <itemizedlist>
      <listitem>
        <para>4 queens has <literal>256</literal> possible solutions (<literal>4 ^ 4</literal>) and 2 optimal
        solutions.</para>
      </listitem>

      <listitem>
        <para>5 queens has <literal>3125</literal> possible solutions (<literal>5 ^ 5</literal>) and 1 optimal
        solution.</para>
      </listitem>

      <listitem>
        <para>8 queens has <literal>16777216</literal> possible solutions (<literal>8 ^ 8</literal>) and 92 optimal
        solutions.</para>
      </listitem>

      <listitem>
        <para>64 queens has more than <literal>10^115</literal> possible solutions (<literal>64 ^ 64</literal>).</para>
      </listitem>

      <listitem>
        <para>Most real-life planning problems have an incredible number of possible solutions and only 1 or a few
        optimal solutions.</para>
      </listitem>
    </itemizedlist>

    <para>For comparison: the minimal number of atoms in the known universe (10^80). As a planning problem gets bigger,
    the search space tends to blow up really fast. Adding only 1 extra planning entity or planning value can heavily
    multiply the running time of some algorithms.</para>

    <para>An algorithm that checks every possible solution (even with pruning) can easily run for billions of years on a
    single real-life planning problem. What we really want is to <emphasis role="bold">find the best solution in the
    limited time at our disposal</emphasis>. Planning competitions (such as the International Timetabling Competition)
    show that local search variations (tabu search, simulated annealing, ...) usually perform best for real-world
    problems given real-world time limitations.</para>
  </section>

  <section>
    <title>Does Planner find the optimal solution?</title>

    <para>The business wants the optimal solution, but they also have other requirements:</para>

    <itemizedlist>
      <listitem>
        <para>Scale out: Large production datasets must not crash and have good results too.</para>
      </listitem>

      <listitem>
        <para>Optimize the right problem: The constraints must match the actual business needs.</para>
      </listitem>

      <listitem>
        <para>Available time: The solution must be found in time, before it becomes useless to execute.</para>
      </listitem>

      <listitem>
        <para>Reliability: Every dataset must have at least a decent result (better than a human planner).</para>
      </listitem>
    </itemizedlist>

    <para>Given these requirements, and despite the promises of some salesmen, it's usually impossible for anyone or
    anything to find the optimal solution. Therefore, Planner focuses on finding the best solution in available time. In
    <link linkend="examplesOverview">realistic, independent competitions</link>, Planner often comes out as the best
    <emphasis>reusable</emphasis> software.</para>

    <para>The nature of NP-complete problems make scaling a prime concern. <emphasis role="bold">The result quality of a
    small dataset guarantees nothing about the result quality of a large dataset.</emphasis> Scaling problems cannot be
    mitigated by hardware purchases. Start testing with a production sized dataset as soon as possible. Don't asses
    quality on small datasets (unless production encounters such datasets). Instead, solve a production sized dataset
    and compare with the results of longer execution, different algorithms and - if available - the human
    planner.</para>
  </section>

  <section>
    <title>Architecture overview</title>

    <para>OptaPlanner is the first framework to combine optimization algorithms (metaheuristics, ...) with score
    calculation by a rule engine such as Drools Expert. This combination turns out to be a very efficient,
    because:</para>

    <itemizedlist>
      <listitem>
        <para>A rule engine such as Drools Expert is <emphasis role="bold">great for calculating the score</emphasis> of
        a solution of a planning problem. It makes it easy and scalable to add additional soft or hard constraints such
        as "a teacher shouldn't teach more then 7 hours a day". It does delta based score calculation without any extra
        code. However it tends to be not suitable to actually find new solutions.</para>
      </listitem>

      <listitem>
        <para>An optimization algorithm is <emphasis role="bold">great at finding new improving solutions</emphasis> for
        a planning problem, without necessarily brute-forcing every possibility. However it needs to know the score of a
        solution and offers no support in calculating that score efficiently.</para>
      </listitem>
    </itemizedlist>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Optimization_algorithms/architectureOverview.png"/>
      </imageobject>
    </mediaobject>
  </section>

  <section>
    <title>Optimization algorithms overview</title>

    <table>
      <title>Optimization algorithms overview</title>

      <tgroup cols="6">
        <colspec align="left" colnum="1" colwidth="4*"/>

        <colspec align="center" colnum="2" colwidth="1*"/>

        <colspec align="center" colnum="3" colwidth="1*"/>

        <colspec align="center" colnum="4" colwidth="1*"/>

        <colspec align="center" colnum="5" colwidth="1*"/>

        <colspec align="center" colnum="6" colwidth="1*"/>

        <thead>
          <row>
            <entry>Algorithm</entry>

            <entry>Scalable?</entry>

            <entry>Optimal?</entry>

            <entry>Easy to use?</entry>

            <entry>Tweakable?</entry>

            <entry>Requires CH?</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><emphasis role="bold">Exact algorithms</emphasis></entry>

            <entry/>

            <entry/>

            <entry/>

            <entry/>

            <entry/>
          </row>

          <row>
            <entry>  Brute force</entry>

            <entry>0/5</entry>

            <entry>5/5</entry>

            <entry>5/5</entry>

            <entry>0/5</entry>

            <entry>No</entry>
          </row>

          <row>
            <entry>  Branch and bound</entry>

            <entry>0/5</entry>

            <entry>5/5</entry>

            <entry>4/5</entry>

            <entry>1/5</entry>

            <entry>No</entry>
          </row>

          <row>
            <entry><emphasis role="bold">Construction heuristics (CH)</emphasis></entry>

            <entry/>

            <entry/>

            <entry/>

            <entry/>

            <entry/>
          </row>

          <row>
            <entry>  First Fit</entry>

            <entry>5/5</entry>

            <entry>1/5</entry>

            <entry>5/5</entry>

            <entry>1/5</entry>

            <entry>No</entry>
          </row>

          <row>
            <entry>  First Fit Decreasing</entry>

            <entry>5/5</entry>

            <entry>2/5</entry>

            <entry>4/5</entry>

            <entry>2/5</entry>

            <entry>No</entry>
          </row>

          <row>
            <entry>  Best Fit</entry>

            <entry>5/5</entry>

            <entry>2/5</entry>

            <entry>4/5</entry>

            <entry>2/5</entry>

            <entry>No</entry>
          </row>

          <row>
            <entry>  Best Fit Decreasing</entry>

            <entry>5/5</entry>

            <entry>2/5</entry>

            <entry>4/5</entry>

            <entry>2/5</entry>

            <entry>No</entry>
          </row>

          <row>
            <entry>  Cheapest Insertion</entry>

            <entry>3/5</entry>

            <entry>2/5</entry>

            <entry>5/5</entry>

            <entry>2/5</entry>

            <entry>No</entry>
          </row>

          <row>
            <entry><emphasis role="bold">Metaheuristics (MH)</emphasis></entry>

            <entry/>

            <entry/>

            <entry/>

            <entry/>

            <entry/>
          </row>

          <row>
            <entry>  Local Search</entry>

            <entry/>

            <entry/>

            <entry/>

            <entry/>

            <entry/>
          </row>

          <row>
            <entry>    Hill-Climbing</entry>

            <entry>5/5</entry>

            <entry>2/5</entry>

            <entry>4/5</entry>

            <entry>3/5</entry>

            <entry>Yes</entry>
          </row>

          <row>
            <entry>    Tabu Search</entry>

            <entry>5/5</entry>

            <entry>4/5</entry>

            <entry>3/5</entry>

            <entry>5/5</entry>

            <entry>Yes</entry>
          </row>

          <row>
            <entry>    Simulated Annealing</entry>

            <entry>5/5</entry>

            <entry>4/5</entry>

            <entry>2/5</entry>

            <entry>5/5</entry>

            <entry>Yes</entry>
          </row>

          <row>
            <entry>    Late Acceptance</entry>

            <entry>5/5</entry>

            <entry>4/5</entry>

            <entry>3/5</entry>

            <entry>5/5</entry>

            <entry>Yes</entry>
          </row>

          <row>
            <entry>    Late Simulated Annealing</entry>

            <entry>5/5</entry>

            <entry>4/5</entry>

            <entry>3/5</entry>

            <entry>5/5</entry>

            <entry>Yes</entry>
          </row>

          <row>
            <entry>  Evolutionary Algorithms</entry>

            <entry/>

            <entry/>

            <entry/>

            <entry/>

            <entry/>
          </row>

          <row>
            <entry>    Evolutionary Strategies</entry>

            <entry>4/5</entry>

            <entry>3/5</entry>

            <entry>?/5</entry>

            <entry>?/5</entry>

            <entry>Yes</entry>
          </row>

          <row>
            <entry>    Genetic Algorithms</entry>

            <entry>4/5</entry>

            <entry>3/5</entry>

            <entry>?/5</entry>

            <entry>?/5</entry>

            <entry>Yes</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>If you want to learn more about metaheuristics, read the free book <link
    xlink:href="http://www.cs.gmu.edu/~sean/book/metaheuristics/">Essentials of Metaheuristics</link> or <link
    xlink:href="http://www.cleveralgorithms.com/">Clever Algorithms</link>.</para>
  </section>

  <section>
    <title>Which optimization algorithms should I use?</title>

    <para>The <emphasis>best</emphasis> optimization algorithms configuration for your use case depends heavily on your
    use case. Nevertheless, this vanilla recipe will get you into the game with a pretty good configuration, probably
    much better than what you're used to.</para>

    <para>Start with a quick configuration that involves little or no configuration and optimization code:</para>

    <orderedlist>
      <listitem>
        <para>First Fit</para>
      </listitem>
    </orderedlist>

    <para>Next, implement planning entity difficulty comparison and turn it into:</para>

    <orderedlist>
      <listitem>
        <para>First Fit Decreasing</para>
      </listitem>
    </orderedlist>

    <para>Next, implement moves and add tabu search behind it:</para>

    <orderedlist>
      <listitem>
        <para>First Fit Decreasing</para>
      </listitem>

      <listitem>
        <para>Tabu Search (use planning entity tabu)</para>
      </listitem>
    </orderedlist>

    <para>At this point <emphasis>the free lunch is over</emphasis>. The return on invested time lowers. The result is
    probably already more than good enough.</para>

    <para>But you can do even better, at a lower return on invested time. Use the Benchmarker and try a couple of
    Simulated Annealing or Late Acceptance configurations, for example:</para>

    <orderedlist>
      <listitem>
        <para>First Fit Decreasing</para>
      </listitem>

      <listitem>
        <para>Late Acceptance (try several sizes)</para>
      </listitem>
    </orderedlist>

    <para>And combine them with Tabu Search:</para>

    <orderedlist>
      <listitem>
        <para>First Fit Decreasing</para>
      </listitem>

      <listitem>
        <para>Late Acceptance (relatively long time)</para>
      </listitem>

      <listitem>
        <para>Tabu Search (relatively short time)</para>
      </listitem>
    </orderedlist>

    <para>If you have time, continue experimenting even further. Blog about your experiments!</para>
  </section>

  <section>
    <title><literal>SolverPhase</literal></title>

    <para>A <literal>Solver</literal> can use multiple optimization algorithms in sequence. <emphasis role="bold">Each
    optimization algorithm is represented by a <literal>SolverPhase</literal>.</emphasis> There is never more than 1
    <literal>SolverPhase</literal> solving at the same time.</para>

    <note>
      <para>Some <literal>SolverPhase</literal> implementations can combine techniques from multiple optimization
      algorithms, but they are still just 1 <literal>SolverPhase</literal>. For example: a local search
      <literal>SolverPhase</literal> can do simulated annealing with planning entity tabu.</para>
    </note>

    <para>Here's a configuration that runs 3 phases in sequence:</para>

    <programlisting language="xml">&lt;solver&gt;
  ...
  &lt;constructionHeuristic&gt;
    ... &lt;!-- First phase: First Fit Decreasing --&gt;
  &lt;/constructionHeuristic&gt;
  &lt;localSearch&gt;
    ... &lt;!-- Second phase: Simulated Annealing --&gt;
  &lt;/localSearch&gt;
  &lt;localSearch&gt;
    ... &lt;!-- Third phase: Tabu Search --&gt;
  &lt;/localSearch&gt;
&lt;/solver&gt;</programlisting>

    <para>The solver phases are run in the order defined by solver configuration. When the first phase terminates, the
    second phase starts, and so on. When the last phase terminates, the <literal>Solver</literal> terminates. Usually, a
    solver will first run a construction heuristic and then run 1 or multiple metaheuristics:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Optimization_algorithms/generalPhaseSequence.png"/>
      </imageobject>
    </mediaobject>

    <para>Some phases (especially construction heuristics) will terminate automatically. Other phases (especially
    metaheuristics) will only terminate if the phase is configured to terminate:</para>

    <programlisting language="xml">&lt;solver&gt;
  ...
  &lt;termination&gt;&lt;!-- Solver termination --&gt;
    &lt;maximumSecondsSpend&gt;90&lt;/maximumSecondsSpend&gt;
  &lt;/termination&gt;
  &lt;localSearch&gt;
    &lt;termination&gt;&lt;!-- Phase termination --&gt;
      &lt;maximumSecondsSpend&gt;60&lt;/maximumSecondsSpend&gt;&lt;!-- Give the next phase a chance to run too, before the Solver terminates --&gt;
    &lt;/termination&gt;
    ...
  &lt;/localSearch&gt;
  &lt;localSearch&gt;
    ...
  &lt;/localSearch&gt;
&lt;/solver&gt;</programlisting>

    <para>If the <literal>Solver</literal> terminates (before the last phase terminates itself), the current phase is
    terminated and all subsequent phases won't run.</para>
  </section>

  <section xml:id="scopeOverview">
    <title>Scope overview</title>

    <para>A solver will iteratively run phases. Each phase will usually iteratively run steps. Each step, in turn,
    usually iteratively runs moves. These form 4 nested scopes: solver, phase, step and move.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/Chapter-Optimization_algorithms/scopeOverview.png"/>
      </imageobject>
    </mediaobject>

    <para>Configure <link linkend="logging">logging</link> to display the log messages of each scope.</para>
  </section>

  <section>
    <title>Termination</title>

    <para>Not all phases terminate automatically and sometimes you don't want to wait that long anyway. A
    <literal>Solver</literal> can be terminated synchronously by up-front configuration or asynchronously from another
    thread.</para>

    <para>Especially metaheuristic phases will need to be told when to stop solving. This can be because of a number of
    reasons: the time is up, the perfect score has been reached, ... The only thing you can't depend on, is on finding
    the optimal solution (unless you know the optimal score), because a metaheuristic algorithm generally doesn't know
    it when it finds the optimal solution. For real-life problems this doesn't turn out to be much of a problem, because
    finding the optimal solution could take billions of years, so you 'll want to terminate sooner anyway. The only
    thing that matters is finding the best solution in the available time.</para>

    <para>For synchronous termination, configure a <literal>Termination</literal> on a <literal>Solver</literal> or a
    <literal>SolverPhase</literal> when it needs to stop. You can implement your own <literal>Termination</literal>, but
    the build-in implementations should suffice for most needs. Every <literal>Termination</literal> can calculate a
    <emphasis>time gradient</emphasis> (needed for some optimization algorithms), which is a ratio between the time
    already spend solving and the estimated entire solving time of the <literal>Solver</literal> or
    <literal>SolverPhase</literal>.</para>

    <section>
      <title>TimeMillisSpendTermination</title>

      <para>Terminates when an amount of time has been reached:</para>

      <programlisting language="xml">    &lt;termination&gt;
        &lt;maximumTimeMillisSpend&gt;500&lt;/maximumTimeMillisSpend&gt;
    &lt;/termination&gt;</programlisting>

      <programlisting language="xml">    &lt;termination&gt;
        &lt;maximumSecondsSpend&gt;10&lt;/maximumSecondsSpend&gt;
    &lt;/termination&gt;</programlisting>

      <programlisting language="xml">    &lt;termination&gt;
        &lt;maximumMinutesSpend&gt;5&lt;/maximumMinutesSpend&gt;
    &lt;/termination&gt;</programlisting>

      <programlisting language="xml">    &lt;termination&gt;
        &lt;maximumHoursSpend&gt;1&lt;/maximumHoursSpend&gt;
    &lt;/termination&gt;</programlisting>

      <note>
        <para>If you use this <literal>Termination</literal>, you will most likely sacrifice perfect reproducibility
        (even with <literal>environmentMode</literal> <literal>REPRODUCIBLE</literal>) because of an available CPU time
        difference:</para>

        <itemizedlist>
          <listitem>
            <para>The available CPU time influences the number of steps that can be taken, which might be a few more or
            less.</para>
          </listitem>

          <listitem>
            <para>The <literal>Termination</literal> might produce slightly different time gradient values, which will
            send time gradient based algorithms (such as simulated annealing) on a radically different path.</para>
          </listitem>
        </itemizedlist>
      </note>
    </section>

    <section>
      <title>ScoreAttainedTermination</title>

      <para>Terminates when a certain score has been reached. You can use this <literal>Termination</literal> if you
      know the perfect score, for example for 4 queens:</para>

      <programlisting language="xml">    &lt;termination&gt;
        &lt;scoreAttained&gt;0&lt;/scoreAttained&gt;
    &lt;/termination&gt;</programlisting>

      <para>For a planning problem with hard and soft constraints, it could look like this:</para>

      <programlisting language="xml">    &lt;termination&gt;
        &lt;scoreAttained&gt;0hard/-5000soft&lt;/scoreAttained&gt;
    &lt;/termination&gt;</programlisting>

      <para>You can use this <literal>Termination</literal> to terminate once it reaches a feasible solution.</para>
    </section>

    <section>
      <title>StepCountTermination</title>

      <para>Terminates when an amount of steps has been reached:</para>

      <programlisting language="xml">    &lt;termination&gt;
        &lt;maximumStepCount&gt;100&lt;/maximumStepCount&gt;
    &lt;/termination&gt;</programlisting>

      <para>This <literal>Termination</literal> can only be used for a <literal>SolverPhase</literal>, not for the
      <literal>Solver</literal> itself.</para>
    </section>

    <section>
      <title>UnimprovedStepCountTermination</title>

      <para>Terminates when the best score hasn't improved in a number of steps:</para>

      <programlisting language="xml">    &lt;termination&gt;
        &lt;maximumUnimprovedStepCount&gt;100&lt;/maximumUnimprovedStepCount&gt;
    &lt;/termination&gt;</programlisting>

      <para>If the score hasn't improved recently, it's probably not going to improve soon anyway and it's not worth the
      effort to continue. We have observed that once a new best solution is found (even after a long time of no
      improvement on the best solution), the next few steps tend to improve the best solution too.</para>

      <para>This <literal>Termination</literal> can only be used for a <literal>SolverPhase</literal>, not for the
      <literal>Solver</literal> itself.</para>
    </section>

    <section>
      <title>Combining multiple Terminations</title>

      <para>Terminations can be combined, for example: terminate after 100 steps or if a score of 0 has been
      reached:</para>

      <programlisting language="xml">    &lt;termination&gt;
        &lt;terminationCompositionStyle&gt;OR&lt;/terminationCompositionStyle&gt;
        &lt;maximumStepCount&gt;100&lt;/maximumStepCount&gt;
        &lt;scoreAttained&gt;0&lt;/scoreAttained&gt;
    &lt;/termination&gt;</programlisting>

      <para>Alternatively you can use AND, for example: terminate after reaching a feasible score of at least -100 and
      no improvements in 5 steps:</para>

      <programlisting language="xml">    &lt;termination&gt;
        &lt;terminationCompositionStyle&gt;AND&lt;/terminationCompositionStyle&gt;
        &lt;maximumUnimprovedStepCount&gt;5&lt;/maximumUnimprovedStepCount&gt;
        &lt;scoreAttained&gt;-100&lt;/scoreAttained&gt;
    &lt;/termination&gt;</programlisting>

      <para>This example ensures it doesn't just terminate after finding a feasible solution, but also completes any
      obvious improvements on that solution before terminating.</para>
    </section>

    <section>
      <title>Asynchronous termination from another thread</title>

      <para>Sometimes you'll want to terminate a Solver early from another thread, for example because a user action or
      a server restart. This cannot be configured by a <literal>Termination</literal> as it's impossible to predict when
      and if it will occur. Therefore the <literal>Solver</literal> interface has these 2 thread-safe methods:</para>

      <programlisting language="java">public interface Solver {

    // ...

    boolean terminateEarly();
    boolean isTerminateEarly();

}</programlisting>

      <para>If you call the <literal>terminateEarly()</literal> method from another thread, the
      <literal>Solver</literal> will terminate at its earliest convenience and the <literal>solve()</literal> method
      will return in the original <literal>Solver</literal> thread.</para>
    </section>
  </section>

  <section>
    <title>SolverEventListener</title>

    <para>Each time a new best solution is found, the <literal>Solver</literal> fires a
    <literal>BestSolutionChangedEvent</literal>.</para>

    <para>To listen to such events, add a <literal>SolverEventListener</literal> to the
    <literal>Solver</literal>:</para>

    <programlisting language="java">public interface Solver {

    // ...

    void addEventListener(SolverEventListener eventListener);
    void removeEventListener(SolverEventListener eventListener);

}</programlisting>
  </section>

  <section>
    <title>Custom SolverPhase</title>

    <para>Between phases or before the first phase, you might want to execute a custom action on the
    <literal>Solution</literal> to get a better score. Yet you'll still want to reuse the score calculation. For
    example, to implement a custom construction heuristic without implementing an entire
    <literal>SolverPhase</literal>.</para>

    <note>
      <para>Most of the time, a custom construction heuristic is not worth the hassle. The supported constructions
      heuristics are configurable (so you can tweak them with the <literal>Benchmarker</literal>),
      <literal>Termination</literal> aware and support partially initialized solutions too.</para>
    </note>

    <para>Implement the <literal>CustomSolverPhaseCommand</literal> interface:</para>

    <programlisting language="java">public interface CustomSolverPhaseCommand {

    void changeWorkingSolution(ScoreDirector scoreDirector);

}</programlisting>

    <para>For example:</para>

    <programlisting language="java">public class ExaminationSolutionInitializer implements CustomSolverPhaseCommand {

    public void changeWorkingSolution(ScoreDirector scoreDirector) {
        Examination examination = (Examination) scoreDirector.getWorkingSolution();
        for (Exam exam : examination.getExamList()) {
            Score unscheduledScore = scoreDirector.calculateScore();
            ...
            for (Period period : examination.getPeriodList()) {
                scoreDirector.beforeVariableChanged(exam, "period");
                exam.setPeriod(period)
                scoreDirector.afterVariableChanged(exam, "period");
                Score score = scoreDirector.calculateScore();
                ...
            }
            ...
        }
    }

}</programlisting>

    <warning>
      <para>Any change on the planning entities in a <literal>CustomSolverPhaseCommand</literal> must be notified to the
      <literal>ScoreDirector</literal>.</para>
    </warning>

    <warning>
      <para>Do not change any of the planning facts in a <literal>CustomSolverPhaseCommand</literal>. That will corrupt
      the <literal>Solver</literal> because any previous score or solution was for a different problem. If you want to
      do that, see <link linkend="repeatedPlanning">repeated planning</link> and real-time planning instead.</para>
    </warning>

    <para>And configure it like this:</para>

    <programlisting language="xml">&lt;solver&gt;
  ...
  &lt;customSolverPhase&gt;
    &lt;customSolverPhaseCommandClass&gt;org.optaplanner.examples.examination.solver.solution.initializer.ExaminationSolutionInitializer&lt;/customSolverPhaseCommandClass&gt;
  &lt;/customSolverPhase&gt;
  ... &lt;!-- Other phases --&gt;
&lt;/solver&gt;</programlisting>

    <para>It's possible to configure multiple <literal>customSolverPhaseCommandClass</literal> instances, which will be
    run in sequence.</para>

    <important>
      <para>If the changes of a <literal>CustomSolverPhaseCommand</literal> don't result in a better score, the best
      solution won't be changed (so effectively nothing will have changed for the next <literal>SolverPhase</literal> or
      <literal>CustomSolverPhaseCommand</literal>). To force such changes anyway, use
      <literal>forceUpdateBestSolution</literal>:</para>

      <programlisting language="xml">  &lt;customSolverPhase&gt;
    &lt;customSolverPhaseCommandClass&gt;...MyUninitializer&lt;/customSolverPhaseCommandClass&gt;
    &lt;forceUpdateBestSolution&gt;true&lt;/forceUpdateBestSolution&gt;
  &lt;/customSolverPhase&gt;</programlisting>
    </important>

    <note>
      <para>If the <literal>Solver</literal> or <literal>SolverPhase</literal> wants to terminate while a
      <literal>CustomSolverPhaseCommand</literal> is still running, it will wait to terminate until the
      <literal>CustomSolverPhaseCommand</literal> is done, however long that takes.</para>
    </note>
  </section>
</chapter>
