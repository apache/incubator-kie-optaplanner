<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xml:id="scoreCalculation" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Score Calculation</title>

  <section xml:id="scoreTerminology">
    <title>Score Terminology</title>

    <section xml:id="whatIsAScore">
      <title>What is a Score?</title>

      <para>Every <literal>Solution</literal> has a score. The score is an objective way to compare two solutions. The
      solution with the higher score is better. The <literal>Solver</literal> aims to find the
      <literal>Solution</literal> with the highest <literal>Score</literal> of all possible solutions. The
      <emphasis>best solution</emphasis> is the <literal>Solution</literal> with the highest <literal>Score</literal>
      that <literal>Solver</literal> has encountered during solving, which might be the <emphasis>optimal
      solution</emphasis>.</para>

      <para>Planner cannot automatically know which <literal>Solution</literal> is best for your business, so you need
      to tell it how to calculate the score of a given <literal>Solution</literal> according to your business needs. If
      you forget or are unable to implement an important business constraint, the solution is probably useless:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Score_calculation/optimalWithIncompleteConstraints.png"/>
        </imageobject>
      </mediaobject>
    </section>

    <section xml:id="formalizeTheBusinessConstraints">
      <title>Formalize the Business Constraints</title>

      <para>To implement a verbal business constraint, it needs to be formalized as a score constraint. Luckily,
      defining constraints in Planner is very flexible through the following score techniques:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Score signum (positive or negative)</emphasis>: maximize or minimize a constraint
          type</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Score weight</emphasis>: put a cost/profit on a constraint type</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Score level (hard, soft, ...)</emphasis>: prioritize a group of constraint
          types</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Pareto scoring</emphasis> (rarely used)</para>
        </listitem>
      </itemizedlist>

      <para>Take the time to acquaint yourself with the first 3 techniques. Once you understand them, formalizing most
      business constraints becomes straightforward.</para>
    </section>

    <section xml:id="scoreConstraintSignum">
      <title>Score Constraint Signum (Positive or Negative)</title>

      <para>All score techniques are based on constraints. A constraint can be a simple pattern (such as
      <emphasis>Maximize the apple harvest in the solution</emphasis>) or a more complex pattern. A positive constraint
      is a constraint you want to maximize. A negative constraint is a constraint you want to minimize.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Score_calculation/positiveAndNegativeConstraints.png"/>
        </imageobject>
      </mediaobject>

      <para>The image above illustrates that <emphasis role="bold">the optimal solution always has the highest
      score</emphasis>, regardless if the constraints are positive or negative.</para>

      <para>Most planning problems have only negative constraints and therefore have a negative score. In that case, the
      score is the sum of the weight of the negative constraints being broken, with a perfect score of 0. This explains
      why the score of a solution of four queens is the negative of the number of queen pairs which can attack each
      other.</para>

      <para>Negative and positive constraints can be combined, even in the same score level.</para>

      <note>
        <para>Do not presume that your business knows all its score constraints in advance. Expect score constraints to
        be added or changed after the first releases.</para>
      </note>

      <para>When a constraint activates (because the negative constraint is broken or the positive constraint is
      fulfilled) on a certain planning entity set, it is called a <emphasis>constraint match</emphasis>.</para>
    </section>

    <section xml:id="scoreConstraintWeight">
      <title>Score Constraint Weight</title>

      <para>Not all score constraints are equally important. If breaking one constraint is equally bad as breaking
      another constraint x times, then those two constraints have a different weight (but they are in the same score
      level). For example in vehicle routing, you can make one "unhappy driver" constraint match count as much as two
      "fuel tank usage" constraint matches:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Score_calculation/scoreWeighting.png"/>
        </imageobject>
      </mediaobject>

      <para>Score weighting is easy in use cases where you can <emphasis>put a price tag on everything</emphasis>. In
      that case, the positive constraints maximize revenue and the negative constraints minimize expenses, so together
      they maximize profit. Alternatively, score weighting is also often used to create social <link
      linkend="fairnessScoreConstraints">fairness</link>. For example, a nurse, who requests a free day, pays a higher
      weight on New Years eve than on a normal day.</para>

      <para>The weight of a constraint match can be dynamically based on the planning entities involved. For example in
      cloud balance, the weight of the soft constraint match for an active <literal>Computer</literal> is the
      <literal>cost</literal> of that <literal>Computer</literal> (which differs per computer).</para>

      <para>Putting a good weight on a constraint can be a difficult analytical decision, because it is about making
      choices and tradeoffs with other constraints. Don't spend too much time on it at the start of an implementation. A
      non-accurate weight is less damaging than mediocre algorithms:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Score_calculation/scoreTradeoffInPerspective.png"/>
        </imageobject>
      </mediaobject>

      <note>
        <para>When deciding the weights of some constraints is debatable, it's recommended to make them configurable at
        runtime, as demonstrated in the exam timetabling example with the <literal>InstitutionParametrization</literal>
        class. This allow the end-user to recalibrate constraint weights in the user interface and immediatly discover
        the impact of the new weights by running the solver again.</para>
      </note>

      <para>Most use cases use a <literal>Score</literal> with <literal>int</literal> weights, such as <link
      linkend="hardSoftScore">HardSoftScore</link>.</para>
    </section>

    <section xml:id="scoreLevel">
      <title>Score Constraint Level (hard, soft, ...)</title>

      <para>Sometimes a score constraint outranks another score constraint, no matter how many times the other is
      broken. In that case, those score constraints are in different levels. For example, a nurse cannot do 2 shifts at
      the same time (due to the constraints of physical reality), this outranks all nurse happiness constraints.</para>

      <para>Most use cases have only two score levels, hard and soft. The levels of two scores are compared
      lexicographically. The first score level gets compared first. If those differ, the remaining score levels are
      ignored. For example, a score that breaks <literal>0</literal> hard constraints and <literal>1000000</literal>
      soft constraints is better than a score that breaks <literal>1</literal> hard constraint and <literal>0</literal>
      soft constraints.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Score_calculation/scoreLevels.png"/>
        </imageobject>
      </mediaobject>

      <para>If there are two (or more) score levels, for example a hard and soft level, then a score is
      <emphasis>feasible</emphasis> if no hard constraints are broken.</para>

      <note>
        <para>By default, Planner will always assign all planning variables a planning value. If there is no feasible
        solution, this means the best solution will be unfeasible. To instead leave some of the planning entities
        unassigned, apply <link linkend="overconstrainedPlanning">overconstrained planning</link>.</para>
      </note>

      <para>For each constraint, you need to pick a score level, a score weight and a score signum. For example:
      <literal>-1soft</literal> which has score level of <literal>soft</literal>, a weight of <literal>1</literal> and a
      negative signum. Do not use a big constraint weight when your business actually wants different score levels. That
      hack, known as <emphasis>score folding</emphasis>, is broken:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Score_calculation/scoreFoldingIsBroken.png"/>
        </imageobject>
      </mediaobject>

      <note>
        <para>Your business might tell you that your hard constraints all have the same weight, because they cannot be
        broken (so the weight does not matter). This is not true because if no feasible solution exists for a specific
        dataset, the least infeasible solution allows the business to estimate how many business resources they are
        lacking. For example in cloud balancing, how many new computers to buy.</para>

        <para>Furthermore, it will likely create a <link linkend="scoreTrap">score trap</link>. For example in cloud
        balance if a <literal>Computer</literal> has seven CPU too little for its <literal>Process</literal>es, then it
        must be weighted seven times as much as if it had only one CPU too little.</para>
      </note>

      <para>Three or more score levels are supported. For example: a company might decide that profit outranks employee
      satisfaction (or visa versa), while both are outranked by the constraints of physical reality.</para>

      <note>
        <para>To model fairness or load balancing, there is <link linkend="fairnessScoreConstraints">no need to use lots
        of score levels</link> (even though Planner can handle many score levels).</para>
      </note>

      <para>Most use cases use a <literal>Score</literal> with two weights, such as <link
      linkend="hardSoftScore">HardSoftScore</link>.</para>
    </section>

    <section xml:id="paretoScoring">
      <title>Pareto Scoring (AKA Multi-objective Optimization Scoring)</title>

      <para>Far less common is the use case of pareto optimization, which is also known under the more confusing term
      multi-objective optimization. In pareto scoring, score constraints are in the same score level, yet they are not
      weighted against each other. When two scores are compared, each of the score constraints are compared individually
      and the score with the most dominating score constraints wins. Pareto scoring can even be combined with score
      levels and score constraint weighting.</para>

      <para>Consider this example with positive constraints, where we want to get the most apples and oranges. Since it
      is impossible to compare apples and oranges, we can not weight them against each other. Yet, despite that we can
      not compare them, we can state that two apples are better then one apple. Similarly, we can state that two apples
      and one orange are better than just one orange. So despite our inability to compare some Scores conclusively (at
      which point we declare them equal), we can find a set of optimal scores. Those are called pareto optimal.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Score_calculation/paretoOptimizationScoring.png"/>
        </imageobject>
      </mediaobject>

      <para>Scores are considered equal far more often. It is left up to a human to choose the better out of a set of
      best solutions (with equal scores) found by Planner. In the example above, the user must choose between solution A
      (three apples and one orange) and solution B (one apple and six oranges). It is guaranteed that Planner has not
      found another solution which has more apples or more oranges or even a better combination of both (such as two
      apples and three oranges).</para>

      <para>To implement pareto scoring in Planner, <link linkend="customScore">implement a custom
      <literal>ScoreDefinition</literal> and <literal>Score</literal></link> (and replace the
      <literal>BestSolutionRecaller</literal>). Future versions will provide out-of-the-box support.</para>

      <note>
        <para>A pareto <literal>Score</literal>'s <literal>compareTo</literal> method is not transitive because it does
        a pareto comparison. For example: having two apples is greater than one apple. One apple is equal to One orange.
        Yet, two apples are not greater than one orange (but actually equal). Pareto comparison violates the contract of
        the interface <literal>java.lang.Comparable</literal>'s <literal>compareTo</literal> method, but Planners
        systems are <emphasis>pareto comparison safe</emphasis>, unless explicitly stated otherwise in this
        documentation.</para>
      </note>
    </section>

    <section xml:id="combiningScoreTechniques">
      <title>Combining Score Techniques</title>

      <para>All the score techniques mentioned above, can be combined seamlessly:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Score_calculation/scoreComposition.png"/>
        </imageobject>
      </mediaobject>
    </section>

    <section xml:id="scoreInterface">
      <title><literal>Score</literal> interface</title>

      <para>A score is represented by the <literal>Score</literal> interface, which naturally extends
      <literal>Comparable</literal>:</para>

      <programlisting language="java">public interface Score&lt;...&gt; extends Comparable&lt;...&gt; {
    ...
}</programlisting>

      <para>The <literal>Score</literal> implementation to use depends on your use case. Your score might not
      efficiently fit in a single <literal>long</literal> value. Planner has several built-in <literal>Score</literal>
      implementations, but you can implement a custom <literal>Score</literal> too. Most use cases tend to use the
      built-in <literal>HardSoftScore</literal>.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Score_calculation/scoreClassDiagram.png"/>
        </imageobject>
      </mediaobject>

      <para>All Score implementations also have an <literal>initScore</literal> (which is an <literal>int</literal>). It
      is mostly intended for internal use in Planner: it is the negative number of uninitialized planning variables.
      From a user's perspective this is <literal>0</literal>, unless a Construction Heuristic is terminated before it
      could initialize all planning variables (in which case <literal>Score.isSolutionInitialized()</literal> returns
      <literal>false</literal>).</para>

      <para>The <literal>Score</literal> implementation (for example <literal>HardSoftScore</literal>) must be the same
      throughout a <literal>Solver</literal> runtime. The <literal>Score</literal> implementation is configured in the
      solution domain class:</para>

      <programlisting language="java">@PlanningSolution
public class CloudBalance {
    ...

    @PlanningScore
    private HardSoftScore score;

}</programlisting>
    </section>

    <section xml:id="avoidFloatingPointNumbersInScoreCalculation">
      <title>Avoid Floating Point Numbers in Score Calculation</title>

      <para>Avoid the use of <literal>float</literal> or <literal>double</literal> in score calculation. Use
      <literal>BigDecimal</literal> or scaled <literal>long</literal> instead.</para>

      <para>Floating point numbers (<literal>float</literal> and <literal>double</literal>) cannot represent a decimal
      number correctly. For example: a <literal>double</literal> cannot hold the value <literal>0.05</literal>
      correctly. Instead, it holds the nearest representable value. Arithmetic (including addition and subtraction) with
      floating point numbers, especially for planning problems, leads to incorrect decisions:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Score_calculation/scoreWeightType.png"/>
        </imageobject>
      </mediaobject>

      <para>Additionally, floating point number addition is not associative:</para>

      <programlisting language="java">System.out.println( ((0.01 + 0.02) + 0.03) == (0.01 + (0.02 + 0.03)) ); // returns false</programlisting>

      <para>This leads to <emphasis>score corruption</emphasis>.</para>

      <para>Decimal numbers (<literal>BigDecimal</literal>) have none of these problems.</para>

      <note>
        <para>BigDecimal arithmetic is considerably slower than <literal>int</literal>, <literal>long</literal> or
        <literal>double</literal> arithmetic. In experiments we have seen the score calculation speed get divided by
        5.</para>

        <para>Therefore, in many cases, it can be worthwhile to multiply <emphasis>all</emphasis> numbers for a single
        score weight by a plural of ten, so the score weight fits in a scaled <literal>int</literal> or
        <literal>long</literal>. For example, if we multiple all weights by <literal>1000</literal>, a fuelCost of
        <literal>0.07</literal> becomes a fuelCostMillis of <literal>70</literal> and no longer uses a decimal score
        weight.</para>
      </note>
    </section>
  </section>

  <section xml:id="scoreType">
    <title>Choose a Score Type</title>

    <para>Depending on the number of score levels and type of score weights you need, choose a <literal>Score</literal>
    type. Most use cases use a <literal>HardSoftScore</literal>.</para>

    <note>
      <para>To properly write a <literal>Score</literal> to database (with JPA/Hibernate) or to XML/JSON (with
      XStream/JAXB/Jackson), see <link linkend="integration">the integration chapter</link>.</para>
    </note>

    <section xml:id="simpleScore">
      <title>SimpleScore</title>

      <para>A <literal>SimpleScore</literal> has a single <literal>int</literal> value, for example
      <literal>-123</literal>. It has a single score level.</para>

      <programlisting language="java">    @PlanningScore
    private SimpleScore score;</programlisting>

      <para>Variants of this <literal>Score</literal> type:</para>

      <itemizedlist>
        <listitem>
          <para><literal>SimpleLongScore</literal> uses a <literal>long</literal> value instead of an
          <literal>int</literal> value.</para>
        </listitem>

        <listitem>
          <para><literal>SimpleDoubleScore</literal> uses a <literal>double</literal> value instead of an
          <literal>int</literal> value. <link linkend="avoidFloatingPointNumbersInScoreCalculation">Not recommended to
          use.</link></para>
        </listitem>

        <listitem>
          <para><literal>SimpleBigDecimalScore</literal> uses a <literal>BigDecimal</literal> value instead of an
          <literal>int</literal> value.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="hardSoftScore">
      <title>HardSoftScore (Recommended)</title>

      <para>A <literal>HardSoftScore</literal> has a hard <literal>int</literal> value and a soft <literal>int</literal>
      value, for example <literal>-123hard/-456soft</literal>. It has 2 score levels (hard and soft).</para>

      <programlisting language="java">    @PlanningScore
    private HardSoftScore score;</programlisting>

      <para>Variants of this <literal>Score</literal> type:</para>

      <itemizedlist>
        <listitem>
          <para><literal>HardSoftLongScore</literal> uses <literal>long</literal> values instead of
          <literal>int</literal> values.</para>
        </listitem>

        <listitem>
          <para><literal>HardSoftDoubleScore</literal> uses <literal>double</literal> values instead of
          <literal>int</literal> values. <link linkend="avoidFloatingPointNumbersInScoreCalculation">Not recommended to
          use.</link></para>
        </listitem>

        <listitem>
          <para><literal>HardSoftBigDecimalScore</literal> uses <literal>BigDecimal</literal> values instead of
          <literal>int</literal> values.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="hardMediumSoftScore">
      <title>HardMediumSoftScore</title>

      <para>A <literal>HardMediumSoftScore</literal> which has a hard <literal>int</literal> value, a medium
      <literal>int</literal> value and a soft <literal>int</literal> value, for example
      <literal>-123hard/-456medium/-789soft</literal>. It has 3 score levels (hard, medium and soft).</para>

      <programlisting language="java">    @PlanningScore
    private HardMediumSoftScore score;</programlisting>

      <para>Variants of this <literal>Score</literal> type:</para>

      <itemizedlist>
        <listitem>
          <para><literal>HardMediumSoftLongScore</literal> uses <literal>long</literal> values instead of
          <literal>int</literal> values.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="bendableScore">
      <title>BendableScore</title>

      <para>A <literal>BendableScore</literal> has a configurable number of score levels. It has an array of hard
      <literal>int</literal> values and an array of soft <literal>int</literal> value, for example with 2 hard levels
      and 3 soft levels, the score can be <literal>[-123/-456]hard/[-789/-012/-345]soft</literal>. In that case, it has
      5 score levels.</para>

      <programlisting language="java">    @PlanningScore(bendableHardLevelsSize = 2, bendableSoftLevelsSize = 3)
    private BendableScore score;</programlisting>

      <para>The number of hard and soft score levels need to be set at compilation time. It is not flexible to change
      during solving.</para>

      <note>
        <para>Don't use a <literal>BendableScore</literal> with 7 levels just because you have 7 constraints. It's
        extremely rare to use a different score level for each constraint. Usually, multiple constraints share the same
        level and are weighted against each other.</para>
      </note>

      <para>Variants of this <literal>Score</literal> type:</para>

      <itemizedlist>
        <listitem>
          <para><literal>BendableLongScore</literal> uses <literal>long</literal> values instead of
          <literal>int</literal> values.</para>
        </listitem>

        <listitem>
          <para><literal>BendableBigDecimalScore</literal> uses <literal>BigDecimal</literal> values instead of
          <literal>int</literal> values.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="customScore">
      <title>Implementing a Custom Score</title>

      <para>Internally, each <literal>Score</literal> implementation also has a <literal>ScoreDefinition</literal>
      implementation. For example: <literal>SimpleScore</literal> is defined by
      <literal>SimpleScoreDefinition</literal>. The <literal>ScoreDefinition</literal> interface defines the score
      representation.</para>

      <para>To implement a custom <literal>Score</literal>, also implement such a custom
      <literal>ScoreDefinition</literal>. Extend <literal>AbstractScoreDefinition</literal> (preferably by copy pasting
      <literal>HardSoftScoreDefinition</literal>) and start from there. Then hook your custom
      <literal>ScoreDefinition</literal> in the domain:</para>

      <programlisting language="java">    @PlanningScore(scoreDefinitionClass = MyCustomScoreDefinition.class)
    private MyCustomScore score;</programlisting>

      <para>To have it integrate seamlessly with <link linkend="jpaAndHibernatePersistingAScore">JPA/Hibernate</link>,
      <link linkend="integrationWithXStream">XStream</link>, ..., you 'll need to write some glue code.</para>
    </section>
  </section>

  <section xml:id="calculateTheScore">
    <title>Calculate the <literal>Score</literal></title>

    <section xml:id="scoreCalculationTypes">
      <title>Score Calculation Types</title>

      <para>There are several ways to calculate the <literal>Score</literal> of a <literal>Solution</literal>:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Easy Java score calculation</emphasis>: implement a single Java method</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Incremental Java score calculation</emphasis>: implement multiple Java
          methods</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Drools score calculation</emphasis> (recommended): implement score rules</para>
        </listitem>
      </itemizedlist>

      <para>Every score calculation type can use any Score definition. For example, easy Java score calculation can
      output a <literal>HardSoftScore</literal>.</para>

      <para>All score calculation types are Object Oriented and can reuse existing Java code.</para>

      <important>
        <para>The score calculation must be read-only. It must not change the planning entities or the problem facts in
        any way. For example, it must not call a setter method on a planning entity in a Drools score rule's RHS. This
        does not apply to <emphasis>logically inserted</emphasis> objects, which can be changed by the score rules that
        logically inserted them in the first place.</para>

        <para>Planner will not recalculate the score of a <literal>Solution</literal> if it can predict it (unless an
        <link linkend="environmentMode">environmentMode assertion</link> is enabled). For example, after a winning step
        is done, there is no need to calculate the score because that move was done and undone earlier. As a result,
        there is no guarantee that such changes applied during score calculation are actually done.</para>
      </important>
    </section>

    <section xml:id="easyJavaScoreCalculation">
      <title>Easy Java Score Calculation</title>

      <para>An easy way to implement your score calculation in Java.</para>

      <itemizedlist>
        <listitem>
          <para>Advantages:</para>

          <itemizedlist>
            <listitem>
              <para>Plain old Java: no learning curve</para>
            </listitem>

            <listitem>
              <para>Opportunity to delegate score calculation to an existing code base or legacy system</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Disadvantages:</para>

          <itemizedlist>
            <listitem>
              <para>Slower and less scalable</para>

              <itemizedlist>
                <listitem>
                  <para>Because there is no <link linkend="incrementalScoreCalculation">incremental score
                  calculation</link></para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para>Just implement one method of the interface <literal>EasyScoreCalculator</literal>:</para>

      <programlisting language="java">public interface EasyScoreCalculator&lt;Solution_&gt; {

    Score calculateScore(Solution_ solution);
   
}</programlisting>

      <para>For example in n queens:</para>

      <programlisting language="java">public class NQueensEasyScoreCalculator implements EasyScoreCalculator&lt;NQueens&gt; {

    public SimpleScore calculateScore(NQueens nQueens) {
        int n = nQueens.getN();
        List&lt;Queen&gt; queenList = nQueens.getQueenList();
        
        int score = 0;
        for (int i = 0; i &lt; n; i++) {
            for (int j = i + 1; j &lt; n; j++) {
                Queen leftQueen = queenList.get(i);
                Queen rightQueen = queenList.get(j);
                if (leftQueen.getRow() != null &amp;&amp; rightQueen.getRow() != null) {
                    if (leftQueen.getRowIndex() == rightQueen.getRowIndex()) {
                        score--;
                    }
                    if (leftQueen.getAscendingDiagonalIndex() == rightQueen.getAscendingDiagonalIndex()) {
                        score--;
                    }
                    if (leftQueen.getDescendingDiagonalIndex() == rightQueen.getDescendingDiagonalIndex()) {
                        score--;
                    }
                }
            }
        }
        return SimpleScore.valueOf(score);
    }

}</programlisting>

      <para>Configure it in your solver configuration:</para>

      <programlisting language="xml">  &lt;scoreDirectorFactory&gt;
    &lt;easyScoreCalculatorClass&gt;org.optaplanner.examples.nqueens.solver.score.NQueensEasyScoreCalculator&lt;/easyScoreCalculatorClass&gt;
  &lt;/scoreDirectorFactory&gt;</programlisting>

      <para>Alternatively, build a <literal>EasyScoreCalculator</literal> instance at runtime and set it with the
      programmatic API:</para>

      <programlisting language="java">    solverFactory.getSolverConfig().getScoreDirectorFactoryConfig.setEasyScoreCalculator(easyScoreCalculator);</programlisting>
    </section>

    <section xml:id="incrementalJavaScoreCalculation">
      <title>Incremental Java Score Calculation</title>

      <para>A way to implement your score calculation incrementally in Java.</para>

      <itemizedlist>
        <listitem>
          <para>Advantages:</para>

          <itemizedlist>
            <listitem>
              <para>Very fast and scalable</para>

              <itemizedlist>
                <listitem>
                  <para>Currently the fastest if implemented correctly</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Disadvantages:</para>

          <itemizedlist>
            <listitem>
              <para>Hard to write</para>

              <itemizedlist>
                <listitem>
                  <para>A scalable implementation heavily uses maps, indexes, ... (things the Drools rule engine can do
                  for you)</para>
                </listitem>

                <listitem>
                  <para>You have to learn, design, write and improve all these performance optimizations yourself</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>Hard to read</para>

              <itemizedlist>
                <listitem>
                  <para>Regular score constraint changes can lead to a high maintenance cost</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para>Implement all the methods of the interface <literal>IncrementalScoreCalculator</literal> and extend the
      class <literal>AbstractIncrementalScoreCalculator</literal>:</para>

      <programlisting language="java">public interface IncrementalScoreCalculator&lt;Solution_&gt; {

    void resetWorkingSolution(Solution_ workingSolution);

    void beforeEntityAdded(Object entity);

    void afterEntityAdded(Object entity);

    void beforeVariableChanged(Object entity, String variableName);

    void afterVariableChanged(Object entity, String variableName);

    void beforeEntityRemoved(Object entity);

    void afterEntityRemoved(Object entity);

    Score calculateScore();
    
}</programlisting>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Score_calculation/incrementalScoreCalculatorSequenceDiagram.png"/>
        </imageobject>
      </mediaobject>

      <para>For example in n queens:</para>

      <programlisting language="java">public class NQueensAdvancedIncrementalScoreCalculator extends AbstractIncrementalScoreCalculator&lt;NQueens&gt; {

    private Map&lt;Integer, List&lt;Queen&gt;&gt; rowIndexMap;
    private Map&lt;Integer, List&lt;Queen&gt;&gt; ascendingDiagonalIndexMap;
    private Map&lt;Integer, List&lt;Queen&gt;&gt; descendingDiagonalIndexMap;

    private int score;

    public void resetWorkingSolution(NQueens nQueens) {
        int n = nQueens.getN();
        rowIndexMap = new HashMap&lt;Integer, List&lt;Queen&gt;&gt;(n);
        ascendingDiagonalIndexMap = new HashMap&lt;Integer, List&lt;Queen&gt;&gt;(n * 2);
        descendingDiagonalIndexMap = new HashMap&lt;Integer, List&lt;Queen&gt;&gt;(n * 2);
        for (int i = 0; i &lt; n; i++) {
            rowIndexMap.put(i, new ArrayList&lt;Queen&gt;(n));
            ascendingDiagonalIndexMap.put(i, new ArrayList&lt;Queen&gt;(n));
            descendingDiagonalIndexMap.put(i, new ArrayList&lt;Queen&gt;(n));
            if (i != 0) {
                ascendingDiagonalIndexMap.put(n - 1 + i, new ArrayList&lt;Queen&gt;(n));
                descendingDiagonalIndexMap.put((-i), new ArrayList&lt;Queen&gt;(n));
            }
        }
        score = 0;
        for (Queen queen : nQueens.getQueenList()) {
            insert(queen);
        }
    }

    public void beforeEntityAdded(Object entity) {
        // Do nothing
    }

    public void afterEntityAdded(Object entity) {
        insert((Queen) entity);
    }

    public void beforeVariableChanged(Object entity, String variableName) {
        retract((Queen) entity);
    }

    public void afterVariableChanged(Object entity, String variableName) {
        insert((Queen) entity);
    }

    public void beforeEntityRemoved(Object entity) {
        retract((Queen) entity);
    }

    public void afterEntityRemoved(Object entity) {
        // Do nothing
    }

    private void insert(Queen queen) {
        Row row = queen.getRow();
        if (row != null) {
            int rowIndex = queen.getRowIndex();
            List&lt;Queen&gt; rowIndexList = rowIndexMap.get(rowIndex);
            score -= rowIndexList.size();
            rowIndexList.add(queen);
            List&lt;Queen&gt; ascendingDiagonalIndexList = ascendingDiagonalIndexMap.get(queen.getAscendingDiagonalIndex());
            score -= ascendingDiagonalIndexList.size();
            ascendingDiagonalIndexList.add(queen);
            List&lt;Queen&gt; descendingDiagonalIndexList = descendingDiagonalIndexMap.get(queen.getDescendingDiagonalIndex());
            score -= descendingDiagonalIndexList.size();
            descendingDiagonalIndexList.add(queen);
        }
    }

    private void retract(Queen queen) {
        Row row = queen.getRow();
        if (row != null) {
            List&lt;Queen&gt; rowIndexList = rowIndexMap.get(queen.getRowIndex());
            rowIndexList.remove(queen);
            score += rowIndexList.size();
            List&lt;Queen&gt; ascendingDiagonalIndexList = ascendingDiagonalIndexMap.get(queen.getAscendingDiagonalIndex());
            ascendingDiagonalIndexList.remove(queen);
            score += ascendingDiagonalIndexList.size();
            List&lt;Queen&gt; descendingDiagonalIndexList = descendingDiagonalIndexMap.get(queen.getDescendingDiagonalIndex());
            descendingDiagonalIndexList.remove(queen);
            score += descendingDiagonalIndexList.size();
        }
    }

    public SimpleScore calculateScore() {
        return SimpleScore.valueOf(score);
    }

}</programlisting>

      <para>Configure it in your solver configuration:</para>

      <programlisting language="xml">  &lt;scoreDirectorFactory&gt;
    &lt;incrementalScoreCalculatorClass&gt;org.optaplanner.examples.nqueens.solver.score.NQueensAdvancedIncrementalScoreCalculator&lt;/incrementalScoreCalculatorClass&gt;
  &lt;/scoreDirectorFactory&gt;</programlisting>

      <para>Optionally, to explain a score with <literal>ScoreDirector.getConstraintMatchTotals()</literal> or to get
      better output when the <literal>IncrementalScoreCalculator</literal> is corrupted in
      <literal>FAST_ASSERT</literal> or <literal>FULL_ASSERT environmentMode</literal>, implement also the
      <literal>ConstraintMatchAwareIncrementalScoreCalculator</literal> interface:</para>

      <programlisting language="java">public interface ConstraintMatchAwareIncrementalScoreCalculator&lt;Solution_&gt; {

    void resetWorkingSolution(Solution_ workingSolution, boolean constraintMatchEnabled);

    Collection&lt;ConstraintMatchTotal&gt; getConstraintMatchTotals();
    
}</programlisting>
    </section>

    <section xml:id="droolsScoreCalculation">
      <title>Drools Score Calculation</title>

      <section xml:id="droolsScoreCalculationOverview">
        <title>Overview</title>

        <para>Implement your score calculation using the Drools rule engine. Every score constraint is written as one or
        more score rules.</para>

        <itemizedlist>
          <listitem>
            <para>Advantages:</para>

            <itemizedlist>
              <listitem>
                <para>Incremental score calculation for free</para>

                <itemizedlist>
                  <listitem>
                    <para>Because most DRL syntax uses forward chaining, it does incremental calculation without any
                    extra code</para>
                  </listitem>
                </itemizedlist>
              </listitem>

              <listitem>
                <para>Score constraints are isolated as separate rules</para>

                <itemizedlist>
                  <listitem>
                    <para>Easy to add or edit existing score rules</para>
                  </listitem>
                </itemizedlist>
              </listitem>

              <listitem>
                <para>Flexibility to augment your score constraints by</para>

                <itemizedlist>
                  <listitem>
                    <para>Defining them in decision tables</para>

                    <itemizedlist>
                      <listitem>
                        <para>Excel (XLS) spreadsheet</para>
                      </listitem>

                      <listitem>
                        <para>KIE Workbench WebUI</para>
                      </listitem>
                    </itemizedlist>
                  </listitem>

                  <listitem>
                    <para>Translate them into natural language with DSL</para>
                  </listitem>

                  <listitem>
                    <para>Store and release in the KIE Workbench repository</para>
                  </listitem>
                </itemizedlist>
              </listitem>

              <listitem>
                <para>Performance optimizations in future versions for free</para>

                <itemizedlist>
                  <listitem>
                    <para>In every release, the Drools rule engine tends to become faster</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Disadvantages:</para>

            <itemizedlist>
              <listitem>
                <para>DRL learning curve</para>
              </listitem>

              <listitem>
                <para>Usage of DRL</para>

                <itemizedlist>
                  <listitem>
                    <para>Polyglot fear can prohibit the use of a new language such as DRL in some organizations</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </section>

      <section xml:id="droolsScoreRulesConfiguration">
        <title>Drools Score Rules Configuration</title>

        <para>There are several ways to define where your score rules live.</para>

        <section xml:id="droolsScoreCalculationScoreDrl">
          <title>A scoreDrl Resource on the Classpath</title>

          <para>This is the easy way. The score rules live in a DRL file which is provided as a classpath resource. Just
          add the score rules DRL file in the solver configuration as a <literal>&lt;scoreDrl&gt;</literal>
          element:</para>

          <programlisting language="xml">  &lt;scoreDirectorFactory&gt;
    &lt;scoreDrl&gt;org/optaplanner/examples/nqueens/solver/nQueensScoreRules.drl&lt;/scoreDrl&gt;
  &lt;/scoreDirectorFactory&gt;</programlisting>

          <para>In a typical project (following the Maven directory structure), that DRL file would be located at
          <literal>$PROJECT_DIR/src/main/resources/org/optaplanner/examples/nqueens/solver/nQueensScoreRules.drl</literal>
          (even for a war project).</para>

          <note>
            <para>The <literal>&lt;scoreDrl&gt;</literal> element expects a classpath resource, as defined by
            <literal>ClassLoader.getResource(String)</literal>, it does not accept a <literal>File</literal>, nor an
            URL, nor a webapp resource. See below to use a <literal>File</literal> instead.</para>
          </note>

          <para>Add multiple <literal>&lt;scoreDrl&gt;</literal> elements if the score rules are split across multiple
          DRL files.</para>

          <para>Optionally, you can also set drools configuration properties (but be careful of backwards compatibility
          issues):</para>

          <programlisting language="xml">  &lt;scoreDirectorFactory&gt;
    &lt;scoreDrl&gt;org/optaplanner/examples/nqueens/solver/nQueensScoreRules.drl&lt;/scoreDrl&gt;
    &lt;kieBaseConfigurationProperties&gt;
      &lt;drools.equalityBehavior&gt;...&lt;/drools.equalityBehavior&gt;
    &lt;/kieBaseConfigurationProperties&gt;
  &lt;/scoreDirectorFactory&gt;</programlisting>
        </section>

        <section xml:id="droolsScoreCalculationScoreDrlFile">
          <title>A scoreDrlFile</title>

          <para>To use <literal>File</literal> on the local file system, instead of a classpath resource, add the score
          rules DRL file in the solver configuration as a <literal>&lt;scoreDrlFile&gt;</literal> element:</para>

          <programlisting language="xml">  &lt;scoreDirectorFactory&gt;
    &lt;scoreDrlFile&gt;/home/ge0ffrey/tmp/nQueensScoreRules.drl&lt;/scoreDrlFile&gt;
  &lt;/scoreDirectorFactory&gt;</programlisting>

          <warning>
            <para>For portability reasons, a classpath resource is recommended over a File. An application build on one
            computer, but used on another computer, might not find the file on the same location. Worse, if they use a
            different Operating System, it is hard to choose a portable file path.</para>
          </warning>

          <para>Add multiple <literal>&lt;scoreDrlFile&gt;</literal> elements if the score rules are split across
          multiple DRL files.</para>
        </section>

        <section xml:id="droolsScoreCalculationKsessionName">
          <title>A ksessionName in a Kjar from a Maven repository</title>

          <para>This way allows you to use score rules defined by the Workbench or build a kjar and deploy it to the
          Execution Server. Both the score rules and the solver configuration are resources in a kjar. Clients can
          obtain that kjar either from the local classpath, from a local Maven repository or even from a remote Maven
          repository.</para>

          <para>The score rules still live in a DRL file, but the <literal>KieContainer</literal> finds that DRL file
          through the <literal>META-INF/kmodule.xml</literal> file:</para>

          <programlisting language="xml">&lt;kmodule xmlns="http://www.drools.org/xsd/kmodule"&gt;
  &lt;kbase name="nQueensKbase" packages="org.optaplanner.examples.nqueens.solver"&gt;
    &lt;ksession name="nQueensKsession"/&gt;
  &lt;/kbase&gt;
&lt;/kmodule&gt;</programlisting>

          <para>The kmodule above will pick up all the DRL files in the package
          <literal>org.optaplanner.examples.nqueens.solver</literal>. A kbase can even extend another kbase.</para>

          <para>Add the ksession name in the solver configuration as a <literal>&lt;ksessionName&gt;</literal>
          element:</para>

          <programlisting language="xml">  &lt;scoreDirectorFactory&gt;
    &lt;ksessionName&gt;nQueensKsession&lt;/ksessionName&gt;
  &lt;/scoreDirectorFactory&gt;</programlisting>

          <para>In this approach, it's required to use a
          <literal>SolverFactory.createFromKieContainerXmlResource(...)</literal> method to <link
          linkend="solverConfigurationByXML">build the <literal>SolverFactory</literal></link>. If no
          <literal>&lt;ksessionName&gt;</literal> element is specified, the default ksession of the
          <literal>kmodule.xml</literal> is used.</para>
        </section>
      </section>

      <section xml:id="implementingAScoreRule">
        <title>Implementing a Score Rule</title>

        <para>Here is an example of a score constraint implemented as a score rule in a DRL file:</para>

        <programlisting>rule "multipleQueensHorizontal"
    when
        Queen($id : id, row != null, $i : rowIndex)
        Queen(id &gt; $id, rowIndex == $i)
    then
        scoreHolder.addConstraintMatch(kcontext, -1);
end</programlisting>

        <para>This score rule will fire once for every 2 queens with the same <literal>rowIndex</literal>. The
        <literal>(id &gt; $id)</literal> condition is needed to assure that for 2 queens A and B, it can only fire for
        (A, B) and not for (B, A), (A, A) or (B, B). Let us take a closer look at this score rule on this solution of 4
        queens:</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Chapter-Score_calculation/unsolvedNQueens04.png"/>
          </imageobject>
        </mediaobject>

        <para>In this solution the multipleQueensHorizontal score rule will fire for 6 queen couples: (A, B), (A, C),
        (A, D), (B, C), (B, D) and (C, D). Because none of the queens are on the same vertical or diagonal line, this
        solution will have a score of <literal>-6</literal>. An optimal solution of 4 queens has a score of
        <literal>0</literal>.</para>

        <note>
          <para>Notice that every score rule will relate to at least one planning entity class (directly or indirectly
          through a logically inserted fact).</para>

          <para>This is a normal case. It would be a waste of time to write a score rule that only relates to problem
          facts, as the consequence will never change during planning, no matter what the possible solution.</para>
        </note>

        <note>
          <para>The <literal>kcontext</literal> variable is a magic variable in Drools Expert. The
          <literal>scoreHolder</literal>'s method uses it to do incremental score calculation correctly and to create a
          <literal>ConstraintMatch</literal> instance.</para>
        </note>
      </section>

      <section xml:id="weighingScoreRules">
        <title>Weighing Score Rules</title>

        <para>A <literal>ScoreHolder</literal> instance is asserted into the <literal>KieSession</literal> as a global
        called <literal>scoreHolder</literal>. The score rules need to (directly or indirectly) update that
        instance.</para>

        <programlisting>global SimpleScoreHolder scoreHolder;

rule "multipleQueensHorizontal"
    when
        Queen($id : id, row != null, $i : rowIndex)
        Queen(id &gt; $id, rowIndex == $i)
    then
        scoreHolder.addConstraintMatch(kcontext, -1);
end

// multipleQueensVertical is obsolete because it is always 0

rule "multipleQueensAscendingDiagonal"
    when
        Queen($id : id, row != null, $i : ascendingDiagonalIndex)
        Queen(id &gt; $id, ascendingDiagonalIndex == $i)
    then
        scoreHolder.addConstraintMatch(kcontext, -1);
end

rule "multipleQueensDescendingDiagonal"
    when
        Queen($id : id, row != null, $i : descendingDiagonalIndex)
        Queen(id &gt; $id, descendingDiagonalIndex == $i)
    then
        scoreHolder.addConstraintMatch(kcontext, -1);
end</programlisting>

        <note>
          <para>To learn more about the Drools rule language (DRL), consult <link
          xlink:href="http://drools.org/learn/documentation.html">the Drools documentation</link>.</para>
        </note>

        <para>Most use cases also weigh their constraint types or even their matches differently, by using a specific
        weight for each constraint match. For example in <link linkend="curriculumCourse">course scheduling</link>,
        assigning a <literal>Lecture</literal> to a <literal>Room</literal> that is lacking two seats is weighted
        equally bad as having one isolated <literal>Lecture</literal> in a <literal>Curriculum</literal>:</para>

        <programlisting>global HardSoftScoreHolder scoreHolder;

// RoomCapacity: For each lecture, the number of students that attend the course must be less or equal
// than the number of seats of all the rooms that host its lectures.
rule "roomCapacity"
    when
        $room : Room($capacity : capacity)
        $lecture : Lecture(room == $room, studentSize &gt; $capacity, $studentSize : studentSize)
    then
        // Each student above the capacity counts as 1 point of penalty.
        scoreHolder.addSoftConstraintMatch(kcontext, ($capacity - $studentSize));
end

// CurriculumCompactness: Lectures belonging to a curriculum should be adjacent
// to each other (i.e., in consecutive periods).
// For a given curriculum we account for a violation every time there is one lecture not adjacent
// to any other lecture within the same day.
rule "curriculumCompactness"
    when
        ...
    then
        // Each isolated lecture in a curriculum counts as 2 points of penalty.
        scoreHolder.addSoftConstraintMatch(kcontext, -2);
end</programlisting>
      </section>
    </section>

    <section xml:id="initializingScoreTrend">
      <title>InitializingScoreTrend</title>

      <para>The <literal>InitializingScoreTrend</literal> specifies how the Score will change as more and more variables
      are initialized (while the already initialized variables do not change). Some optimization algorithms (such
      Construction Heuristics and Exhaustive Search) run faster if they have such information.</para>

      <para>For the Score (or each <link linkend="scoreLevel">score level</link> separately), specify a
      trend:</para>

      <itemizedlist>
        <listitem>
          <para><literal>ANY</literal> (default): Initializing an extra variable can change the score positively or
          negatively. Gives no performance gain.</para>
        </listitem>

        <listitem>
          <para><literal>ONLY_UP</literal> (rare): Initializing an extra variable can only change the score positively.
          Implies that:</para>

          <itemizedlist>
            <listitem>
              <para>There are only positive constraints</para>
            </listitem>

            <listitem>
              <para>And initializing the next variable can not unmatch a positive constraint that was matched by a
              previous initialized variable.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para><literal>ONLY_DOWN</literal>: Initializing an extra variable can only change the score negatively.
          Implies that:</para>

          <itemizedlist>
            <listitem>
              <para>There are only negative constraints</para>
            </listitem>

            <listitem>
              <para>And initializing the next variable can not unmatch a negative constraint that was matched by a
              previous initialized variable.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <para>Most use cases only have negative constraints. Many of those have an
      <literal>InitializingScoreTrend</literal> that only goes down:</para>

      <programlisting language="xml">  &lt;scoreDirectorFactory&gt;
    &lt;scoreDrl&gt;.../cloudBalancingScoreRules.drl&lt;/scoreDrl&gt;
    &lt;initializingScoreTrend&gt;ONLY_DOWN&lt;/initializingScoreTrend&gt;
  &lt;/scoreDirectorFactory&gt;</programlisting>

      <para>Alternatively, you can also specify the trend for each score level separately:</para>

      <programlisting language="xml">  &lt;scoreDirectorFactory&gt;
    &lt;scoreDrl&gt;.../cloudBalancingScoreRules.drl&lt;/scoreDrl&gt;
    &lt;initializingScoreTrend&gt;ONLY_DOWN/ONLY_DOWN&lt;/initializingScoreTrend&gt;
  &lt;/scoreDirectorFactory&gt;</programlisting>
    </section>

    <section xml:id="invalidScoreDetection">
      <title>Invalid Score Detection</title>

      <para>Put the <literal>environmentMode</literal> in <literal>FULL_ASSERT</literal> (or
      <literal>FAST_ASSERT</literal>) to detect corruption in the <link
      linkend="incrementalScoreCalculation">incremental score calculation</link>. For more information, <link
      linkend="environmentMode">see the section about <literal>environmentMode</literal></link>. However, that will not
      verify that your score calculator implements your score constraints as your business actually desires.</para>

      <para>A piece of incremental score calculator code can be difficult to write and to review. Assert its correctness
      by using a different implementation (for example a <literal>EasyScoreCalculator</literal>) to do the assertions
      triggered by the <literal>environmentMode</literal>. Just configure the different implementation as a
      <literal>assertionScoreDirectorFactory</literal>:</para>

      <programlisting language="xml">  &lt;environmentMode&gt;FAST_ASSERT&lt;/environmentMode&gt;
  ...
  &lt;scoreDirectorFactory&gt;
    &lt;scoreDrl&gt;org/optaplanner/examples/nqueens/solver/nQueensScoreRules.drl&lt;/scoreDrl&gt;
    &lt;assertionScoreDirectorFactory&gt;
      &lt;easyScoreCalculatorClass&gt;org.optaplanner.examples.nqueens.solver.score.NQueensEasyScoreCalculator&lt;/easyScoreCalculatorClass&gt;
    &lt;/assertionScoreDirectorFactory&gt;
  &lt;/scoreDirectorFactory&gt;</programlisting>

      <para>This way, the <literal>scoreDrl</literal> will be validated by the
      <literal>EasyScoreCalculator</literal>.</para>
    </section>
  </section>

  <section xml:id="scoreCalculationPerformanceTricks">
    <title>Score Calculation Performance Tricks</title>

    <section xml:id="scoreCalculationPerformanceTricksOverview">
      <title>Overview</title>

      <para>The <literal>Solver</literal> will normally spend most of its execution time running the score calculation
      (which is called in its deepest loops). Faster score calculation will return the same solution in less time with
      the same algorithm, which normally means a better solution in equal time.</para>
    </section>

    <section xml:id="scoreCalculationSpeed">
      <title>Score Calculation Speed</title>

      <para>After solving a problem, the <literal>Solver</literal> will log the <emphasis>score calculation speed per
      second</emphasis>. This is a good measurement of Score calculation performance, despite that it is affected by non
      score calculation execution time. It depends on the problem scale of the problem dataset. Normally, even for high
      scale problems, it is higher than <literal>1000</literal>, except when you are using an
      <literal>EasyScoreCalculator</literal>.</para>

      <important>
        <para>When improving your score calculation, focus on maximizing the score calculation speed, instead of
        maximizing the best score. A big improvement in score calculation can sometimes yield little or no best score
        improvement, for example when the algorithm is stuck in a local or global optima. If you are watching the
        calculation speed instead, score calculation improvements are far more visible.</para>

        <para>Furthermore, watching the calculation speed, allows you to remove or add score constraints, and still
        compare it with the original calculation speed. Comparing the best score with the original would be wrong,
        because it is comparing apples and oranges.</para>
      </important>
    </section>

    <section xml:id="incrementalScoreCalculation">
      <title>Incremental Score Calculation (with Deltas)</title>

      <para>When a <literal>Solution</literal> changes, incremental score calculation (AKA delta based score
      calculation), will calculate the delta with the previous state to find the new <literal>Score</literal>, instead
      of recalculating the entire score on every solution evaluation.</para>

      <para>For example, if a single queen A moves from row <literal>1</literal> to <literal>2</literal>, it will not
      bother to check if queen B and C can attack each other, since neither of them changed.</para>

      <figure>
        <title>Incremental Score Calculation for the 4 Queens Puzzle</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/Chapter-Score_calculation/incrementalScoreCalculationNQueens04.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>This is a huge performance and scalability gain. <emphasis role="bold">Drools score calculation gives you
      this huge scalability gain without forcing you to write a complicated incremental score calculation
      algorithm.</emphasis> Just let the Drools rule engine do the hard work.</para>

      <para>Notice that the speedup is relative to the size of your planning problem (your <emphasis>n</emphasis>),
      making incremental score calculation far more scalable.</para>
    </section>

    <section xml:id="avoidCallingRemoteServicesDuringScoreCalculation">
      <title>Avoid Calling Remote Services During Score Calculation</title>

      <para>Do not call remote services in your score calculation (except if you are bridging
      <literal>EasyScoreCalculator</literal> to a legacy system). The network latency will kill your score calculation
      performance. Cache the results of those remote services if possible.</para>

      <para>If some parts of a constraint can be calculated once, when the <literal>Solver</literal> starts, and never
      change during solving, then turn them into <link linkend="cachedProblemFact">cached problem facts</link>.</para>
    </section>

    <section xml:id="pointlessConstraints">
      <title>Pointless Constraints</title>

      <para>If you know a certain constraint can never be broken (or it is always broken), you need not write a score
      constraint for it. For example in n queens, the score calculation does not check if multiple queens occupy the
      same column, because a <literal>Queen</literal>'s <literal>column</literal> never changes and every
      <literal>Solution</literal> starts with each <literal>Queen</literal> on a different
      <literal>column</literal>.</para>

      <note>
        <para>Do not go overboard with this. If some datasets do not use a specific constraint but others do, just
        return out of the constraint as soon as you can. There is no need to dynamically change your score calculation
        based on the dataset.</para>
      </note>
    </section>

    <section xml:id="buildInHardConstraint">
      <title>Built-in Hard Constraint</title>

      <para>Instead of implementing a hard constraint, it can sometimes be built in. For example, If
      <literal>Lecture</literal> A should never be assigned to <literal>Room</literal> X, but it uses
      <literal>ValueRangeProvider</literal> on Solution, so the <literal>Solver</literal> will often try to assign it to
      <literal>Room</literal> X too (only to find out that it breaks a hard constraint). Use <link
      linkend="valueRangeProviderOnPlanningEntity">a ValueRangeProvider on the planning entity</link> or <link
      linkend="filteredSelection">filtered selection</link> to define that Course A should only be assigned a
      <literal>Room</literal> different than X.</para>

      <para>This can give a good performance gain in some use cases, not just because the score calculation is faster,
      but mainly because most optimization algorithms will spend less time evaluating unfeasible solutions. However,
      usually this not a good idea because there is a real risk of trading short term benefits for long term
      harm:</para>

      <itemizedlist>
        <listitem>
          <para>Many optimization algorithms rely on the freedom to break hard constraints when changing planning
          entities, to get out of local optima.</para>
        </listitem>

        <listitem>
          <para>Both implementation approaches have limitations (feature compatibility, disabling automatic performance
          optimizations), as explained in their documentation.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="otherScoreCalculationPerformanceTricks">
      <title>Other Score Calculation Performance Tricks</title>

      <itemizedlist>
        <listitem>
          <para>Verify that your score calculation happens in the correct <literal>Number</literal> type. If you are
          making the sum of <literal>int</literal> values, do not let Drools sum it in a <literal>double</literal> which
          takes longer.</para>
        </listitem>

        <listitem>
          <para>For optimal performance, always use server mode (<literal>java -server</literal>). We have seen
          performance increases of 50% by turning on server mode.</para>
        </listitem>

        <listitem>
          <para>For optimal performance, use the latest Java version. For example, in the past we have seen performance
          increases of 30% by switching from java 1.5 to 1.6.</para>
        </listitem>

        <listitem>
          <para>Always remember that premature optimization is the root of all evil. Make sure your design is flexible
          enough to allow configuration based tweaking.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="scoreTrap">
      <title>Score Trap</title>

      <para>Make sure that none of your score constraints cause a score trap. A trapped score constraint uses the same
      weight for different constraint matches, when it could just as easily use a different weight. It effectively lumps
      its constraint matches together, which creates a flatlined score function for that constraint. This can cause a
      solution state in which several moves need to be done to resolve or lower the weight of that single constraint.
      Some examples of score traps:</para>

      <itemizedlist>
        <listitem>
          <para>You need two doctors at each table, but you are only moving one doctor at a time. So the solver has no
          incentive to move a doctor to a table with no doctors. Punish a table with no doctors more then a table with
          only one doctor in that score constraint in the score function.</para>
        </listitem>

        <listitem>
          <para>Two exams need to be conducted at the same time, but you are only moving one exam at a time. So the
          solver has to move one of those exams to another timeslot without moving the other in the same move. Add a
          coarse-grained move that moves both exams at the same time.</para>
        </listitem>
      </itemizedlist>

      <para>For example, consider this score trap. If the blue item moves from an overloaded computer to an empty
      computer, the hard score should improve. The trapped score implementation fails to do that:</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Score_calculation/scoreTrap.png"/>
        </imageobject>
      </mediaobject>

      <para>The Solver should eventually get out of this trap, but it will take a lot of effort (especially if there are
      even more processes on the overloaded computer). Before they do that, they might actually start moving more
      processes into that overloaded computer, as there is no penalty for doing so.</para>

      <note>
        <para>Avoiding score traps does not mean that your score function should be smart enough to avoid local optima.
        Leave it to the optimization algorithms to deal with the local optima.</para>

        <para>Avoiding score traps means to avoid, for each score constraint individually, a flatlined score
        function.</para>
      </note>

      <important>
        <para>Always specify the degree of infeasibility. The business will often say "if the solution is infeasible, it
        does not matter how infeasible it is." While that is true for the business, it is not true for score calculation
        as it benefits from knowing how infeasible it is. In practice, soft constraints usually do this naturally and it
        is just a matter of doing it for the hard constraints too.</para>
      </important>

      <para>There are several ways to deal with a score trap:</para>

      <itemizedlist>
        <listitem>
          <para>Improve the score constraint to make a distinction in the score weight. For example, penalize
          <literal>-1hard</literal> for every missing CPU, instead of just <literal>-1hard</literal> if any CPU is
          missing.</para>
        </listitem>

        <listitem>
          <para>If changing the score constraint is not allowed from the business perspective, add a lower score level
          with a score constraint that makes such a distinction. For example, penalize <literal>-1subsoft</literal> for
          every missing CPU, on top of <literal>-1hard</literal> if any CPU is missing. The business ignores the subsoft
          score level.</para>
        </listitem>

        <listitem>
          <para>Add coarse-grained moves and union select them with the existing fine-grained moves. A coarse-grained
          move effectively does multiple moves to directly get out of a score trap with a single move. For example, move
          multiple items from the same container to another container.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="stepLimitBenchmark">
      <title>stepLimit Benchmark</title>

      <para>Not all score constraints have the same performance cost. Sometimes one score constraint can kill the score
      calculation performance outright. Use the <link linkend="benchmarker">Benchmarker</link> to do a one minute run
      and check what happens to the score calculation speed if you comment out all but one of the score
      constraints.</para>
    </section>

    <section xml:id="fairnessScoreConstraints">
      <title>Fairness Score Constraints</title>

      <para>Some use cases have a business requirement to provide a fair schedule (usually as a soft score constraint),
      for example:</para>

      <itemizedlist>
        <listitem>
          <para>Fairly distribute the workload amongst the employees, to avoid envy.</para>
        </listitem>

        <listitem>
          <para>Evenly distribute the workload amongst assets, to improve reliability.</para>
        </listitem>
      </itemizedlist>

      <para>Implementing such a constraint can seem difficult (especially because there are different ways to formalize
      fairness), but usually the <emphasis>squared workload</emphasis> implementation behaves most desirable. For each
      employee/asset, count the workload <literal>w</literal> and subtract <literal>w²</literal> from the score.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Score_calculation/fairnessScoreConstraint.png"/>
        </imageobject>
      </mediaobject>

      <para>As shown above, the <emphasis>squared workload</emphasis> implementation guarantees that if you select two
      employees from a given solution and make their distribution between those two employees fairer, then the resulting
      new solution will have a better overall score. Don not just use the difference from the average workload, as that
      can lead to unfairness, as demonstrated below.</para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/Chapter-Score_calculation/fairnessScoreConstraintPitfall.png"/>
        </imageobject>
      </mediaobject>

      <note>
        <para>Instead of the <emphasis>squared workload</emphasis>, it is also possible to use the <link
        xlink:href="http://en.wikipedia.org/wiki/Variance">variance</link> (squared difference to the average) or the
        <link xlink:href="http://en.wikipedia.org/wiki/Standard_deviation">standard deviation</link> (square root of the
        variance). This has no effect on the score comparison, because the average will not change during planning. It
        is just more work to implement (because the average needs to be known) and trivially slower (because the
        calculation is a bit longer).</para>
      </note>

      <para>When the workload is perfect balanced, the user often likes to see a <literal>0</literal> score, instead of
      the distracting <literal>-34soft</literal> in the image above (for the last solution which is almost perfectly
      balanced). To nullify this, either add the average multiplied by the number of entities to the score or instead
      show the variance or standard deviation in the UI.</para>
    </section>
  </section>

  <section xml:id="explainingTheScore">
    <title>Explaining the Score: Using Score Calculation Outside the <literal>Solver</literal></title>

    <para>Other parts of your application, for example your webUI, might need to calculate the score too. Do that by
    reusing the <literal>ScoreDirectorFactory</literal> of the <literal>Solver</literal> to build a separate
    <literal>ScoreDirector</literal> for that webUI:</para>

    <programlisting language="java">ScoreDirectorFactory&lt;CloudBalance&gt; scoreDirectorFactory = solver.getScoreDirectorFactory();
ScoreDirector&lt;CloudBalance&gt; guiScoreDirector = scoreDirectorFactory.buildScoreDirector();</programlisting>

    <para>Then use it when you need to calculate the <literal>Score</literal> of a <literal>Solution</literal>:</para>

    <programlisting language="java">guiScoreDirector.setWorkingSolution(cloudBalance);
Score score = guiScoreDirector.calculateScore();</programlisting>

    <para>To explain in the GUI what entities are causing which part of the <literal>Score</literal>, get the
    <literal>ConstraintMatch</literal> objects from the <literal>ScoreDirector</literal>:</para>

    <programlisting language="java">for (ConstraintMatchTotal constraintMatchTotal : guiScoreDirector.getConstraintMatchTotals()) {
    String constraintName = constraintMatchTotal.getConstraintName();
    Number weightTotal = constraintMatchTotal.getWeightTotalAsNumber();
    for (ConstraintMatch constraintMatch : constraintMatchTotal.getConstraintMatchSet()) {
        List&lt;Object&gt; justificationList = constraintMatch.getJustificationList();
        Number weight = constraintMatch.getWeightAsNumber();
        ...
    }
}</programlisting>

    <note>
      <para><link linkend="droolsScoreCalculation">Drools score calculation</link> supports constraint matches
      automatically, but <link linkend="incrementalJavaScoreCalculation">incremental Java score calculation</link>
      requires requires implementing an extra interface (see that section).</para>
    </note>
  </section>
</chapter>
