package org.optaplanner.core.impl.domain.common.accessor.gizmo;

import java.util.function.Function;

import org.optaplanner.core.impl.domain.common.accessor.MemberAccessor;

/**
 * This and its subclasses exist so that Gizmo only needs to generate code where it is necessary for it to be generated.
 * This helps to keep Gizmo code-generation to a minimum,
 * maintaining as much as possible the benefits of static typing and IDE-assisted refactoring.
 */
public abstract class AbstractGizmoMemberAccessor implements MemberAccessor {

    // We cache this so that the same reference is always returned; useful for CS node sharing.
    private final Function getterFunction = this::executeGetter;

    @Override
    public <Fact_, Result_> Function<Fact_, Result_> getGetterFunction() {
        return getterFunction;
    }

    @Override
    public boolean supportSetter() {
        return false;
    }

    @Override
    public void executeSetter(Object bean, Object value) {
        throw new UnsupportedOperationException("Setter not supported");
    }

    @Override
    public final String getSpeedNote() {
        return "Fast access with generated bytecode";
    }

}
