{
  "filters": {
    "revapi": {
      "filter": {
        "elements": {
          "exclude": [
            "method .* org\\.optaplanner\\.core\\.config.*::(?!(set|get)).*",
            "parameter .* org\\.optaplanner\\.core\\.config.*::(?!(set|get)).*"
          ]
        }
      },
      "java": {
        "filter": {
          "packages": {
            "comment": "We don't want to check transitive classes, since we already check them in their own module.",
            "regex": true,
            "include": [
              "org\\.optaplanner\\.core\\.api.*",
              "org\\.optaplanner\\.core\\.config.*"
            ]
          }
        }
      }
    }
  },
  "ignores": {
    "revapi": {
      "_comment": "Changes between 7.26.0.Final and the current branch. These changes are desired and thus ignored.",
      "ignore": [
        {
          "code": "java.method.addedToInterface",
          "new": "method <ResultContainer_, Result_> org.optaplanner.core.api.score.stream.uni.UniConstraintStream<Result_> org.optaplanner.core.api.score.stream.uni.UniConstraintStream<A>::groupBy(org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A, ResultContainer_, Result_>)",
          "package": "org.optaplanner.core.api.score.stream.uni",
          "classSimpleName": "UniConstraintStream",
          "methodName": "groupBy",
          "elementKind": "method",
          "justification": "We removed an unused generic type binding on a class that has no external implementors."
        },
        {
          "code": "java.class.nonFinalClassInheritsFromNewClass",
          "old": "class org.optaplanner.core.config.heuristic.selector.move.generic.PillarChangeMoveSelectorConfig",
          "new": "class org.optaplanner.core.config.heuristic.selector.move.generic.PillarChangeMoveSelectorConfig",
          "superClass": "org.optaplanner.core.config.heuristic.selector.move.generic.AbstractPillarMoveSelectorConfig<org.optaplanner.core.config.heuristic.selector.move.generic.PillarChangeMoveSelectorConfig>",
          "package": "org.optaplanner.core.config.heuristic.selector.move.generic",
          "classSimpleName": "PillarChangeMoveSelectorConfig",
          "elementKind": "class",
          "justification": "Pillar moves now share some properties."
        },
        {
          "code": "java.class.nonFinalClassInheritsFromNewClass",
          "old": "class org.optaplanner.core.config.heuristic.selector.move.generic.PillarSwapMoveSelectorConfig",
          "new": "class org.optaplanner.core.config.heuristic.selector.move.generic.PillarSwapMoveSelectorConfig",
          "superClass": "org.optaplanner.core.config.heuristic.selector.move.generic.AbstractPillarMoveSelectorConfig<org.optaplanner.core.config.heuristic.selector.move.generic.PillarSwapMoveSelectorConfig>",
          "package": "org.optaplanner.core.config.heuristic.selector.move.generic",
          "classSimpleName": "PillarSwapMoveSelectorConfig",
          "elementKind": "class",
          "justification": "Pillar moves now share some properties."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method <GroupKey_, ResultContainer_, Result_> org.optaplanner.core.api.score.stream.uni.UniConstraintStream<Result_> org.optaplanner.core.api.score.stream.uni.UniConstraintStream<A>::groupBy(org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A, ResultContainer_, Result_>)",
          "package": "org.optaplanner.core.api.score.stream.uni",
          "classSimpleName": "UniConstraintStream",
          "methodName": "groupBy",
          "elementKind": "method",
          "justification": "API method proposal to group by collector only"
        },{
          "code": "java.method.returnTypeTypeParametersChanged",
          "old": "method <A> org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A, ?, java.lang.Integer> org.optaplanner.core.api.score.stream.ConstraintCollectors::count()",
          "new": "method <A> org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A, ? extends java.io.Serializable, java.lang.Integer> org.optaplanner.core.api.score.stream.ConstraintCollectors::count()",
          "oldType": "org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A extends java.lang.Object, ?, java.lang.Integer>",
          "newType": "org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A extends java.lang.Object, ? extends java.io.Serializable, java.lang.Integer>",
          "package": "org.optaplanner.core.api.score.stream",
          "classSimpleName": "ConstraintCollectors",
          "methodName": "count",
          "elementKind": "method",
          "justification": "Result container has to extend Serializable to work well with Drools."
        },
        {
          "code": "java.method.returnTypeTypeParametersChanged",
          "old": "method <A, B> org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A, B, ?, java.lang.Integer> org.optaplanner.core.api.score.stream.ConstraintCollectors::countBi()",
          "new": "method <A, B> org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A, B, ? extends java.io.Serializable, java.lang.Integer> org.optaplanner.core.api.score.stream.ConstraintCollectors::countBi()",
          "oldType": "org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A extends java.lang.Object, B extends java.lang.Object, ?, java.lang.Integer>",
          "newType": "org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A extends java.lang.Object, B extends java.lang.Object, ? extends java.io.Serializable, java.lang.Integer>",
          "package": "org.optaplanner.core.api.score.stream",
          "classSimpleName": "ConstraintCollectors",
          "methodName": "countBi",
          "elementKind": "method",
          "justification": "Result container has to extend Serializable to work well with Drools."
        },
        {
          "code": "java.method.returnTypeTypeParametersChanged",
          "old": "method <A> org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A, ?, java.lang.Integer> org.optaplanner.core.api.score.stream.ConstraintCollectors::countDistinct(java.util.function.Function<A, ?>)",
          "new": "method <A> org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A, ? extends java.io.Serializable, java.lang.Integer> org.optaplanner.core.api.score.stream.ConstraintCollectors::countDistinct(java.util.function.Function<A, ?>)",
          "oldType": "org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A extends java.lang.Object, ?, java.lang.Integer>",
          "newType": "org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A extends java.lang.Object, ? extends java.io.Serializable, java.lang.Integer>",
          "package": "org.optaplanner.core.api.score.stream",
          "classSimpleName": "ConstraintCollectors",
          "methodName": "countDistinct",
          "elementKind": "method",
          "justification": "Result container has to extend Serializable to work well with Drools."
        },
        {
          "code": "java.method.returnTypeTypeParametersChanged",
          "old": "method <A> org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A, ?, java.lang.Long> org.optaplanner.core.api.score.stream.ConstraintCollectors::countDistinctLong(java.util.function.Function<A, ?>)",
          "new": "method <A> org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A, ? extends java.io.Serializable, java.lang.Long> org.optaplanner.core.api.score.stream.ConstraintCollectors::countDistinctLong(java.util.function.Function<A, ?>)",
          "oldType": "org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A extends java.lang.Object, ?, java.lang.Long>",
          "newType": "org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A extends java.lang.Object, ? extends java.io.Serializable, java.lang.Long>",
          "package": "org.optaplanner.core.api.score.stream",
          "classSimpleName": "ConstraintCollectors",
          "methodName": "countDistinctLong",
          "elementKind": "method",
          "justification": "Result container has to extend Serializable to work well with Drools."
        },
        {
          "code": "java.method.returnTypeTypeParametersChanged",
          "old": "method <A> org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A, ?, java.lang.Long> org.optaplanner.core.api.score.stream.ConstraintCollectors::countLong()",
          "new": "method <A> org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A, ? extends java.io.Serializable, java.lang.Long> org.optaplanner.core.api.score.stream.ConstraintCollectors::countLong()",
          "oldType": "org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A extends java.lang.Object, ?, java.lang.Long>",
          "newType": "org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A extends java.lang.Object, ? extends java.io.Serializable, java.lang.Long>",
          "package": "org.optaplanner.core.api.score.stream",
          "classSimpleName": "ConstraintCollectors",
          "methodName": "countLong",
          "elementKind": "method",
          "justification": "Result container has to extend Serializable to work well with Drools."
        },
        {
          "code": "java.method.returnTypeTypeParametersChanged",
          "old": "method <A, B> org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A, B, ?, java.lang.Long> org.optaplanner.core.api.score.stream.ConstraintCollectors::countLongBi()",
          "new": "method <A, B> org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A, B, ? extends java.io.Serializable, java.lang.Long> org.optaplanner.core.api.score.stream.ConstraintCollectors::countLongBi()",
          "oldType": "org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A extends java.lang.Object, B extends java.lang.Object, ?, java.lang.Long>",
          "newType": "org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A extends java.lang.Object, B extends java.lang.Object, ? extends java.io.Serializable, java.lang.Long>",
          "package": "org.optaplanner.core.api.score.stream",
          "classSimpleName": "ConstraintCollectors",
          "methodName": "countLongBi",
          "elementKind": "method",
          "justification": "Result container has to extend Serializable to work well with Drools."
        },
        {
          "code": "java.method.returnTypeTypeParametersChanged",
          "old": "method <A, B> org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A, B, ?, java.lang.Integer> org.optaplanner.core.api.score.stream.ConstraintCollectors::sum(java.util.function.ToIntBiFunction<? super A, ? super B>)",
          "new": "method <A, B> org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A, B, ? extends java.io.Serializable, java.lang.Integer> org.optaplanner.core.api.score.stream.ConstraintCollectors::sum(java.util.function.ToIntBiFunction<? super A, ? super B>)",
          "oldType": "org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A extends java.lang.Object, B extends java.lang.Object, ?, java.lang.Integer>",
          "newType": "org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A extends java.lang.Object, B extends java.lang.Object, ? extends java.io.Serializable, java.lang.Integer>",
          "package": "org.optaplanner.core.api.score.stream",
          "classSimpleName": "ConstraintCollectors",
          "methodName": "sum",
          "elementKind": "method",
          "justification": "Result container has to extend Serializable to work well with Drools."
        },
        {
          "code": "java.method.returnTypeTypeParametersChanged",
          "old": "method <A> org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A, ?, java.lang.Integer> org.optaplanner.core.api.score.stream.ConstraintCollectors::sum(java.util.function.ToIntFunction<? super A>)",
          "new": "method <A> org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A, ? extends java.io.Serializable, java.lang.Integer> org.optaplanner.core.api.score.stream.ConstraintCollectors::sum(java.util.function.ToIntFunction<? super A>)",
          "oldType": "org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A extends java.lang.Object, ?, java.lang.Integer>",
          "newType": "org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A extends java.lang.Object, ? extends java.io.Serializable, java.lang.Integer>",
          "package": "org.optaplanner.core.api.score.stream",
          "classSimpleName": "ConstraintCollectors",
          "methodName": "sum",
          "elementKind": "method",
          "justification": "Result container has to extend Serializable to work well with Drools."
        },
        {
          "code": "java.method.returnTypeTypeParametersChanged",
          "old": "method <A, B> org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A, B, ?, java.lang.Long> org.optaplanner.core.api.score.stream.ConstraintCollectors::sumLong(java.util.function.ToLongBiFunction<? super A, ? super B>)",
          "new": "method <A, B> org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A, B, ? extends java.io.Serializable, java.lang.Long> org.optaplanner.core.api.score.stream.ConstraintCollectors::sumLong(java.util.function.ToLongBiFunction<? super A, ? super B>)",
          "oldType": "org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A extends java.lang.Object, B extends java.lang.Object, ?, java.lang.Long>",
          "newType": "org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A extends java.lang.Object, B extends java.lang.Object, ? extends java.io.Serializable, java.lang.Long>",
          "package": "org.optaplanner.core.api.score.stream",
          "classSimpleName": "ConstraintCollectors",
          "methodName": "sumLong",
          "elementKind": "method",
          "justification": "Result container has to extend Serializable to work well with Drools."
        },
        {
          "code": "java.method.returnTypeTypeParametersChanged",
          "old": "method <A> org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A, ?, java.lang.Long> org.optaplanner.core.api.score.stream.ConstraintCollectors::sumLong(java.util.function.ToLongFunction<? super A>)",
          "new": "method <A> org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A, ? extends java.io.Serializable, java.lang.Long> org.optaplanner.core.api.score.stream.ConstraintCollectors::sumLong(java.util.function.ToLongFunction<? super A>)",
          "oldType": "org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A extends java.lang.Object, ?, java.lang.Long>",
          "newType": "org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A extends java.lang.Object, ? extends java.io.Serializable, java.lang.Long>",
          "package": "org.optaplanner.core.api.score.stream",
          "classSimpleName": "ConstraintCollectors",
          "methodName": "sumLong",
          "elementKind": "method",
          "justification": "Result container has to extend Serializable to work well with Drools."
        },
        {
          "code": "java.method.parameterTypeParameterChanged",
          "old": "parameter <GroupKeyA_, GroupKeyB_, ResultContainer_, Result_> org.optaplanner.core.api.score.stream.tri.TriConstraintStream<GroupKeyA_, GroupKeyB_, Result_> org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::groupBy(java.util.function.BiFunction<A, B, GroupKeyA_>, java.util.function.BiFunction<A, B, GroupKeyB_>, ===org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A, B, ResultContainer_, Result_>===)",
          "new": "parameter <GroupKeyA_, GroupKeyB_, ResultContainer_ extends java.io.Serializable, Result_> org.optaplanner.core.api.score.stream.tri.TriConstraintStream<GroupKeyA_, GroupKeyB_, Result_> org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::groupBy(java.util.function.BiFunction<A, B, GroupKeyA_>, java.util.function.BiFunction<A, B, GroupKeyB_>, ===org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A, B, ResultContainer_, Result_>===)",
          "oldType": "org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A extends java.lang.Object, B extends java.lang.Object, ResultContainer_ extends java.lang.Object, Result_ extends java.lang.Object>",
          "newType": "org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A extends java.lang.Object, B extends java.lang.Object, ResultContainer_ extends java.io.Serializable, Result_ extends java.lang.Object>",
          "package": "org.optaplanner.core.api.score.stream.bi",
          "classSimpleName": "BiConstraintStream",
          "methodName": "groupBy",
          "parameterIndex": "2",
          "elementKind": "parameter",
          "justification": "Result container has to extend Serializable to work well with Drools."
        },
        {
          "code": "java.generics.formalTypeParameterChanged",
          "old": "method <GroupKeyA_, GroupKeyB_, ResultContainer_, Result_> org.optaplanner.core.api.score.stream.tri.TriConstraintStream<GroupKeyA_, GroupKeyB_, Result_> org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::groupBy(java.util.function.BiFunction<A, B, GroupKeyA_>, java.util.function.BiFunction<A, B, GroupKeyB_>, org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A, B, ResultContainer_, Result_>)",
          "new": "method <GroupKeyA_, GroupKeyB_, ResultContainer_ extends java.io.Serializable, Result_> org.optaplanner.core.api.score.stream.tri.TriConstraintStream<GroupKeyA_, GroupKeyB_, Result_> org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::groupBy(java.util.function.BiFunction<A, B, GroupKeyA_>, java.util.function.BiFunction<A, B, GroupKeyB_>, org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A, B, ResultContainer_, Result_>)",
          "oldTypeParameter": "ResultContainer_",
          "newTypeParameter": "ResultContainer_ extends java.io.Serializable",
          "package": "org.optaplanner.core.api.score.stream.bi",
          "classSimpleName": "BiConstraintStream",
          "methodName": "groupBy",
          "elementKind": "method",
          "justification": "Result container has to extend Serializable to work well with Drools."
        },
        {
          "code": "java.method.parameterTypeParameterChanged",
          "old": "parameter <GroupKey_, ResultContainer_, Result_> org.optaplanner.core.api.score.stream.bi.BiConstraintStream<GroupKey_, Result_> org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::groupBy(java.util.function.BiFunction<A, B, GroupKey_>, ===org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A, B, ResultContainer_, Result_>===)",
          "new": "parameter <GroupKey_, ResultContainer_ extends java.io.Serializable, Result_> org.optaplanner.core.api.score.stream.bi.BiConstraintStream<GroupKey_, Result_> org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::groupBy(java.util.function.BiFunction<A, B, GroupKey_>, ===org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A, B, ResultContainer_, Result_>===)",
          "oldType": "org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A extends java.lang.Object, B extends java.lang.Object, ResultContainer_ extends java.lang.Object, Result_ extends java.lang.Object>",
          "newType": "org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A extends java.lang.Object, B extends java.lang.Object, ResultContainer_ extends java.io.Serializable, Result_ extends java.lang.Object>",
          "package": "org.optaplanner.core.api.score.stream.bi",
          "classSimpleName": "BiConstraintStream",
          "methodName": "groupBy",
          "parameterIndex": "1",
          "elementKind": "parameter",
          "justification": "Result container has to extend Serializable to work well with Drools."
        },
        {
          "code": "java.generics.formalTypeParameterChanged",
          "old": "method <GroupKey_, ResultContainer_, Result_> org.optaplanner.core.api.score.stream.bi.BiConstraintStream<GroupKey_, Result_> org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::groupBy(java.util.function.BiFunction<A, B, GroupKey_>, org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A, B, ResultContainer_, Result_>)",
          "new": "method <GroupKey_, ResultContainer_ extends java.io.Serializable, Result_> org.optaplanner.core.api.score.stream.bi.BiConstraintStream<GroupKey_, Result_> org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::groupBy(java.util.function.BiFunction<A, B, GroupKey_>, org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A, B, ResultContainer_, Result_>)",
          "oldTypeParameter": "ResultContainer_",
          "newTypeParameter": "ResultContainer_ extends java.io.Serializable",
          "package": "org.optaplanner.core.api.score.stream.bi",
          "classSimpleName": "BiConstraintStream",
          "methodName": "groupBy",
          "elementKind": "method",
          "justification": "Result container has to extend Serializable to work well with Drools."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method <ResultContainer_ extends java.io.Serializable, Result_> org.optaplanner.core.api.score.stream.uni.UniConstraintStream<Result_> org.optaplanner.core.api.score.stream.uni.UniConstraintStream<A>::groupBy(org.optaplanner.core.api.score.stream.uni.UniConstraintCollector<A, ResultContainer_, Result_>)",
          "package": "org.optaplanner.core.api.score.stream.uni",
          "classSimpleName": "UniConstraintStream",
          "methodName": "groupBy",
          "elementKind": "method",
          "justification": "Result container has to extend Serializable to work well with Drools."
        }
      ]
    }
  }
}
