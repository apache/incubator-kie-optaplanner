{
  "filters": {
    "revapi": {
      "filter": {
        "elements": {
          "exclude": [
            "method .* org\\.optaplanner\\.core\\.config.*::(?!(set|get)).*",
            "parameter .* org\\.optaplanner\\.core\\.config.*::(?!(set|get)).*"
          ]
        }
      },
      "java": {
        "filter": {
          "packages": {
            "comment": "We don't want to check transitive classes, since we already check them in their own module.",
            "regex": true,
            "include": [
              "org\\.optaplanner\\.core\\.api.*",
              "org\\.optaplanner\\.core\\.config.*"
            ]
          }
        }
      }
    }
  },
  "ignores": {
    "revapi": {
      "_comment": "Changes between 7.33.0.Final and the current branch. These changes are desired and thus ignored.",
      "ignore": [
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.ConstraintStream::impact(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>)",
          "package": "org.optaplanner.core.api.score.stream",
          "classSimpleName": "ConstraintStream",
          "methodName": "impact",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::impact(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, java.util.function.ToIntBiFunction<A, B>)",
          "package": "org.optaplanner.core.api.score.stream.bi",
          "classSimpleName": "BiConstraintStream",
          "methodName": "impact",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::impactBigDecimal(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, java.util.function.BiFunction<A, B, java.math.BigDecimal>)",
          "package": "org.optaplanner.core.api.score.stream.bi",
          "classSimpleName": "BiConstraintStream",
          "methodName": "impactBigDecimal",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::impactConfigurable(java.lang.String, java.lang.String, java.util.function.ToIntBiFunction<A, B>)",
          "package": "org.optaplanner.core.api.score.stream.bi",
          "classSimpleName": "BiConstraintStream",
          "methodName": "impactConfigurable",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::impactConfigurableBigDecimal(java.lang.String, java.lang.String, java.util.function.BiFunction<A, B, java.math.BigDecimal>)",
          "package": "org.optaplanner.core.api.score.stream.bi",
          "classSimpleName": "BiConstraintStream",
          "methodName": "impactConfigurableBigDecimal",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::impactConfigurableLong(java.lang.String, java.lang.String, java.util.function.ToLongBiFunction<A, B>)",
          "package": "org.optaplanner.core.api.score.stream.bi",
          "classSimpleName": "BiConstraintStream",
          "methodName": "impactConfigurableLong",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::impactLong(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, java.util.function.ToLongBiFunction<A, B>)",
          "package": "org.optaplanner.core.api.score.stream.bi",
          "classSimpleName": "BiConstraintStream",
          "methodName": "impactLong",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.quad.QuadConstraintStream<A, B, C, D>::impact(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, org.optaplanner.core.api.function.ToIntQuadFunction<A, B, C, D>)",
          "package": "org.optaplanner.core.api.score.stream.quad",
          "classSimpleName": "QuadConstraintStream",
          "methodName": "impact",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.quad.QuadConstraintStream<A, B, C, D>::impactBigDecimal(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, org.optaplanner.core.api.function.QuadFunction<A, B, C, D, java.math.BigDecimal>)",
          "package": "org.optaplanner.core.api.score.stream.quad",
          "classSimpleName": "QuadConstraintStream",
          "methodName": "impactBigDecimal",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.quad.QuadConstraintStream<A, B, C, D>::impactConfigurable(java.lang.String, java.lang.String, org.optaplanner.core.api.function.ToIntQuadFunction<A, B, C, D>)",
          "package": "org.optaplanner.core.api.score.stream.quad",
          "classSimpleName": "QuadConstraintStream",
          "methodName": "impactConfigurable",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.quad.QuadConstraintStream<A, B, C, D>::impactConfigurableBigDecimal(java.lang.String, java.lang.String, org.optaplanner.core.api.function.QuadFunction<A, B, C, D, java.math.BigDecimal>)",
          "package": "org.optaplanner.core.api.score.stream.quad",
          "classSimpleName": "QuadConstraintStream",
          "methodName": "impactConfigurableBigDecimal",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.quad.QuadConstraintStream<A, B, C, D>::impactConfigurableLong(java.lang.String, java.lang.String, org.optaplanner.core.api.function.ToLongQuadFunction<A, B, C, D>)",
          "package": "org.optaplanner.core.api.score.stream.quad",
          "classSimpleName": "QuadConstraintStream",
          "methodName": "impactConfigurableLong",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.quad.QuadConstraintStream<A, B, C, D>::impactLong(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, org.optaplanner.core.api.function.ToLongQuadFunction<A, B, C, D>)",
          "package": "org.optaplanner.core.api.score.stream.quad",
          "classSimpleName": "QuadConstraintStream",
          "methodName": "impactLong",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.tri.TriConstraintStream<A, B, C>::impact(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, org.optaplanner.core.api.function.ToIntTriFunction<A, B, C>)",
          "package": "org.optaplanner.core.api.score.stream.tri",
          "classSimpleName": "TriConstraintStream",
          "methodName": "impact",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.tri.TriConstraintStream<A, B, C>::impactBigDecimal(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, org.optaplanner.core.api.function.TriFunction<A, B, C, java.math.BigDecimal>)",
          "package": "org.optaplanner.core.api.score.stream.tri",
          "classSimpleName": "TriConstraintStream",
          "methodName": "impactBigDecimal",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.tri.TriConstraintStream<A, B, C>::impactConfigurable(java.lang.String, java.lang.String, org.optaplanner.core.api.function.ToIntTriFunction<A, B, C>)",
          "package": "org.optaplanner.core.api.score.stream.tri",
          "classSimpleName": "TriConstraintStream",
          "methodName": "impactConfigurable",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.tri.TriConstraintStream<A, B, C>::impactConfigurableBigDecimal(java.lang.String, java.lang.String, org.optaplanner.core.api.function.TriFunction<A, B, C, java.math.BigDecimal>)",
          "package": "org.optaplanner.core.api.score.stream.tri",
          "classSimpleName": "TriConstraintStream",
          "methodName": "impactConfigurableBigDecimal",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.tri.TriConstraintStream<A, B, C>::impactConfigurableLong(java.lang.String, java.lang.String, org.optaplanner.core.api.function.ToLongTriFunction<A, B, C>)",
          "package": "org.optaplanner.core.api.score.stream.tri",
          "classSimpleName": "TriConstraintStream",
          "methodName": "impactConfigurableLong",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.tri.TriConstraintStream<A, B, C>::impactLong(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, org.optaplanner.core.api.function.ToLongTriFunction<A, B, C>)",
          "package": "org.optaplanner.core.api.score.stream.tri",
          "classSimpleName": "TriConstraintStream",
          "methodName": "impactLong",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.uni.UniConstraintStream<A>::impact(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, java.util.function.ToIntFunction<A>)",
          "package": "org.optaplanner.core.api.score.stream.uni",
          "classSimpleName": "UniConstraintStream",
          "methodName": "impact",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.uni.UniConstraintStream<A>::impactBigDecimal(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, java.util.function.Function<A, java.math.BigDecimal>)",
          "package": "org.optaplanner.core.api.score.stream.uni",
          "classSimpleName": "UniConstraintStream",
          "methodName": "impactBigDecimal",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.uni.UniConstraintStream<A>::impactConfigurable(java.lang.String, java.lang.String, java.util.function.ToIntFunction<A>)",
          "package": "org.optaplanner.core.api.score.stream.uni",
          "classSimpleName": "UniConstraintStream",
          "methodName": "impactConfigurable",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.uni.UniConstraintStream<A>::impactConfigurableBigDecimal(java.lang.String, java.lang.String, java.util.function.Function<A, java.math.BigDecimal>)",
          "package": "org.optaplanner.core.api.score.stream.uni",
          "classSimpleName": "UniConstraintStream",
          "methodName": "impactConfigurableBigDecimal",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.uni.UniConstraintStream<A>::impactConfigurableLong(java.lang.String, java.lang.String, java.util.function.ToLongFunction<A>)",
          "package": "org.optaplanner.core.api.score.stream.uni",
          "classSimpleName": "UniConstraintStream",
          "methodName": "impactConfigurableLong",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method org.optaplanner.core.api.score.stream.Constraint org.optaplanner.core.api.score.stream.uni.UniConstraintStream<A>::impactLong(java.lang.String, java.lang.String, org.optaplanner.core.api.score.Score<?>, java.util.function.ToLongFunction<A>)",
          "package": "org.optaplanner.core.api.score.stream.uni",
          "classSimpleName": "UniConstraintStream",
          "methodName": "impactLong",
          "elementKind": "method",
          "justification": "Introduced a neutral score impact functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method S org.optaplanner.core.impl.score.definition.ScoreDefinition<S extends org.optaplanner.core.api.score.Score<S extends org.optaplanner.core.api.score.Score<S>>>::getOneSoftestScore() @ org.optaplanner.core.api.domain.solution.PlanningScore.NullScoreDefinition",
          "package": "org.optaplanner.core.api.domain.solution",
          "classSimpleName": "NullScoreDefinition",
          "methodName": "getOneSoftestScore",
          "elementKind": "method",
          "justification": "Introduced a method to get the softest score of one."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method S org.optaplanner.core.impl.score.definition.ScoreDefinition<S extends org.optaplanner.core.api.score.Score<S extends org.optaplanner.core.api.score.Score<S>>>::divideBySanitizedDivisor(S, S) @ org.optaplanner.core.api.domain.solution.PlanningScore.NullScoreDefinition",
          "package": "org.optaplanner.core.api.domain.solution",
          "classSimpleName": "NullScoreDefinition",
          "methodName": "divideBySanitizedDivisor",
          "elementKind": "method",
          "justification": "Introduced a method for score division."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method int org.optaplanner.core.impl.score.definition.ScoreDefinition<S extends org.optaplanner.core.api.score.Score<S extends org.optaplanner.core.api.score.Score<S>>>::getFeasibleLevelsSize() @ org.optaplanner.core.api.domain.solution.PlanningScore.NullScoreDefinition",
          "package": "org.optaplanner.core.api.domain.solution",
          "classSimpleName": "NullScoreDefinition",
          "methodName": "getFeasibleLevelsSize",
          "elementKind": "method",
          "justification": "FeasibilityScoreDefinition is gone in a backwards-compatible manner. This is a red herring."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method java.lang.String org.optaplanner.core.api.score.ScoreManager<Solution_>::explainScore(Solution_)",
          "package": "org.optaplanner.core.api.score",
          "classSimpleName": "ScoreManager",
          "methodName": "explainScore",
          "elementKind": "method",
          "justification": "New ScoreManager functionality replaces some Solver functionality."
        },
        {
          "code": "java.method.returnTypeChanged",
          "old": "method void org.optaplanner.core.api.score.ScoreManager<Solution_>::updateScore(Solution_)",
          "new": "method org.optaplanner.core.api.score.Score org.optaplanner.core.api.score.ScoreManager<Solution_>::updateScore(Solution_)",
          "oldType": "void",
          "newType": "org.optaplanner.core.api.score.Score",
          "package": "org.optaplanner.core.api.score",
          "classSimpleName": "ScoreManager",
          "methodName": "updateScore",
          "elementKind": "method",
          "justification": "New ScoreManager functionality replaces some Solver functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method java.time.Duration org.optaplanner.core.api.solver.SolverJob<Solution_, ProblemId_>::getSolvingDuration()",
          "package": "org.optaplanner.core.api.solver",
          "classSimpleName": "SolverJob",
          "methodName": "getSolvingDuration",
          "elementKind": "method",
          "justification": "New ScoreManager functionality replaces some Solver functionality."
        },
        {
          "code": "java.method.addedToInterface",
          "new": "method boolean org.optaplanner.core.impl.score.definition.ScoreDefinition<S extends org.optaplanner.core.api.score.Score<S extends org.optaplanner.core.api.score.Score<S>>>::isCompatibleArithmeticArgument(org.optaplanner.core.api.score.Score) @ org.optaplanner.core.api.domain.solution.PlanningScore.NullScoreDefinition",
          "package": "org.optaplanner.core.api.domain.solution",
          "classSimpleName": "NullScoreDefinition",
          "methodName": "isCompatibleArithmeticArgument",
          "elementKind": "method",
          "justification": "ScoreDefinition is not public API, even though it leaks."
        }
      ]
    }
  }
}
