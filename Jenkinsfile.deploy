import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand
import org.kie.jenkins.MavenStagingHelper

deployProperties = [:]

optaplannerRepository = 'optaplanner'
quickstartsRepository = 'optaplanner-quickstarts'
vehicleRoutingRepository = 'optaweb-vehicle-routing'
employeeRosteringRepository = 'optaweb-employee-rostering'

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem16g'
    }

    tools {
        maven 'kie-maven-3.6.3'
        jdk 'kie-jdk11'
    }

    options {
        timeout(time: 120, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into .jenkins/dsl/jobs.groovy file
    // }

    environment {
        // Some generated env is also defined into .jenkins/dsl/jobs.groovy file

        MAVEN_OPTS = '-Xms1024m -Xmx4g'

        BOT_BRANCH_HASH = "${util.generateHash(10)}"

        // Maven configuration
        MAVEN_DEPLOY_LOCAL_DIR = "${WORKSPACE}/maven_deploy_dir"
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    cleanWs()

                    if (params.DISPLAY_NAME) {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    if (isRelease() || isCreatePr()) {
                        // Verify version is set
                        assert getProjectVersion()
                        assert getKogitoVersion()

                        if(isRelease()) {
                            // Verify if on right release branch
                            assert getBuildBranch() == util.getReleaseBranchFromVersion(getProjectVersion())
                        }
                    }

                }
            }
            post {
                success {
                    script {
                        setDeployPropertyIfNeeded('git.branch', getBuildBranch())
                        setDeployPropertyIfNeeded('git.branchQuickstarts', getQuickStartsBranch())
                        setDeployPropertyIfNeeded('git.author', getGitAuthor())
                        setDeployPropertyIfNeeded('project.version', getProjectVersion())
                        setDeployPropertyIfNeeded('release', isRelease())
                        setDeployPropertyIfNeeded('kogito.version', getKogitoVersion())
                    }
                }
            }
        }

        stage('Clone repositories') {
            steps {
                checkoutRepo(optaplannerRepository)
                checkoutQuickstarts()
                checkoutRepo(vehicleRoutingRepository)
                checkoutRepo(employeeRosteringRepository)
            }
        }

        stage('Prepare for PR') {
            when {
                expression { return isRelease() || isCreatePr()  }
            }
            steps {
                prepareForPR(optaplannerRepository)
                prepareForPR(vehicleRoutingRepository)
                prepareForPR(employeeRosteringRepository)
                prepareForPR(quickstartsRepository)
            }
        }

        stage('Update project version') {
            when {
                expression { return getProjectVersion() != '' }
            }
            steps {
                script {
                    maven.mvnVersionsSet(getOptaplannerMavenCommand(), getProjectVersion(), !isRelease())
                    maven.mvnSetVersionProperty(getOptaplannerMavenCommand(), 'version.org.kie.kogito', getKogitoVersion())

                    mavenCleanInstallOptaPlannerParents()

                    maven.mvnVersionsUpdateParentAndChildModules(getOptawebVehicleRoutingMavenCommand(), getProjectVersion(), !isRelease())
                    maven.mvnVersionsUpdateParentAndChildModules(getOptawebEmployeeRosteringMavenCommand(), getProjectVersion(), !isRelease())

                    updateQuickstartsVersions()
                }
            }
        }
        stage('Build OptaPlanner') {
            steps {
                script {
                    getOptaplannerMavenCommand().skipTests(params.SKIP_TESTS).run('clean install')
                }
            }
            post {
                always {
                    saveReports(params.SKIP_TESTS)
                }
            }
        }

        stage('Build Quickstarts') {
            steps {
                script {
                    getOptaplannerQuickstartsMavenCommand().skipTests(params.SKIP_TESTS).run('clean install')
                }
            }
            post {
                always {
                    saveReports(params.SKIP_TESTS)
                }
            }
        }

        stage('Build Vehicle Routing') {
            steps {
                script {
                    getOptawebVehicleRoutingMavenCommand().skipTests(params.SKIP_TESTS).run('clean install')
                }
            }
            post {
                always {
                    saveReports(params.SKIP_TESTS)
                    // TODO: Enable together with the profile "integration-tests" once dockerhub pull limit is resolved.
                    // archiveArtifacts(allowEmptyArchive: true, artifacts: "**/cypress/screenshots/**,**/cypress/videos/**", fingerprint: false)
                }
            }
        }

        stage('Build Employee Rostering') {
            steps {
                script {
                    getOptawebEmployeeRosteringMavenCommand().skipTests(params.SKIP_TESTS).run('clean install')
                }
            }
            post {
                always {
                    saveReports(params.SKIP_TESTS)
                    // TODO: Enable together with the profile "integration-tests" once dockerhub pull limit is resolved.
                    // archiveArtifacts(allowEmptyArchive: true, artifacts: "**/cypress/screenshots/**,**/cypress/videos/**", fingerprint: false)
                }
            }
        }

        stage('Deploy artifacts') {
            steps {
                script {
                    deployMavenArtifacts(getOptaplannerMavenCommand(), optaplannerRepository)
                    deployMavenArtifacts(getOptawebVehicleRoutingMavenCommand(), vehicleRoutingRepository)
                    deployMavenArtifacts(getOptawebEmployeeRosteringMavenCommand(), employeeRosteringRepository)
                }
            }
        }

        stage('Create PRs') {
            when {
                expression { return isRelease() || isCreatePr()  }
            }
            steps {
                commitAndCreatePR(optaplannerRepository, getBuildBranch())
                commitAndCreatePRIgnoringNpmRegistry(vehicleRoutingRepository, getBuildBranch())
                commitAndCreatePRIgnoringNpmRegistry(employeeRosteringRepository, getBuildBranch())
                commitAndCreatePR(quickstartsRepository, getQuickStartsBranch())
            }
            post {
                success {
                    script {
                        setDeployPropertyIfNeeded("${optaplannerRepository}.pr.source.uri", "https://github.com/${getBotAuthor()}/${optaplannerRepository}")
                        setDeployPropertyIfNeeded("${optaplannerRepository}.pr.source.ref", getBotBranch())
                        setDeployPropertyIfNeeded("${optaplannerRepository}.pr.target.uri", "https://github.com/${getGitAuthor()}/${optaplannerRepository}")
                        setDeployPropertyIfNeeded("${optaplannerRepository}.pr.target.ref", getBuildBranch())

                        setDeployPropertyIfNeeded("${vehicleRoutingRepository}.pr.source.uri", "https://github.com/${getBotAuthor()}/${vehicleRoutingRepository}")
                        setDeployPropertyIfNeeded("${vehicleRoutingRepository}.pr.source.ref", getBotBranch())
                        setDeployPropertyIfNeeded("${vehicleRoutingRepository}.pr.target.uri", "https://github.com/${getGitAuthor()}/${vehicleRoutingRepository}")
                        setDeployPropertyIfNeeded("${vehicleRoutingRepository}.pr.target.ref", getBuildBranch())

                        setDeployPropertyIfNeeded("${employeeRosteringRepository}.pr.source.uri", "https://github.com/${getBotAuthor()}/${employeeRosteringRepository}")
                        setDeployPropertyIfNeeded("${employeeRosteringRepository}.pr.source.ref", getBotBranch())
                        setDeployPropertyIfNeeded("${employeeRosteringRepository}.pr.target.uri", "https://github.com/${getGitAuthor()}/${employeeRosteringRepository}")
                        setDeployPropertyIfNeeded("${employeeRosteringRepository}.pr.target.ref", getBuildBranch())
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                def propertiesStr = deployProperties.collect { entry ->  "${entry.key}=${entry.value}" }.join('\n')
                writeFile(text: propertiesStr, file: env.PROPERTIES_FILE_NAME)
                archiveArtifacts(artifacts: env.PROPERTIES_FILE_NAME)
            }
            cleanWs()
        }
    }
}

void updateQuickstartsVersions(){
    maven.mvnSetVersionProperty(getOptaplannerQuickstartsMavenCommand(), "version.org.optaplanner", getProjectVersion())
    maven.mvnVersionsUpdateParentAndChildModules(getOptaplannerQuickstartsMavenCommand(), getProjectVersion(), !isRelease())
    gradleVersionsUpdate(quickstartsRepository, getProjectVersion())

    if (isRelease()) {
        dir(quickstartsRepository) {
            assert !sh (script:
                    'grep -Rn "SNAPSHOT" --include={pom.xml,build.gradle} | ' +
                    'grep -v -e "0.1.0-SNAPSHOT" -e ">1.0-SNAPSHOT" | ' +
                    'cat', returnStdout: true)
        }
    }
    if(isCreatePr()){
        dir(quickstartsRepository){
            assert !sh (script:
                    'grep -Rn "SNAPSHOT" --include={pom.xml,build.gradle} | ' +
                    'grep -v -e "${getProjectVersion()}" | ' +
                    'cat', returnStdout: true)
        }
   }
}

void gradleVersionsUpdate(String repo, String newVersion) {
    dir(repo) {
        sh "sed -i -E 's/def optaplannerVersion = \"[^\"\\s]+\"/def optaplannerVersion = \"${newVersion}\"/' */build.gradle"
    }
}

void saveReports(boolean allowEmpty=false) {
    junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: allowEmpty
}

void checkoutRepo(String repo, String dirName=repo) {
    dir(dirName) {
        deleteDir()
        if (params.PR_TARGET_BRANCH) {
            githubscm.checkoutIfExists(repo, getGitAuthor(), getBuildBranch(), 'kiegroup', getFallbackBranch(repo), true)
        } else {
            checkout(githubscm.resolveRepository(repo, getGitAuthor(), getBuildBranch(), false))
        }
    }
}

void checkoutQuickstarts(String dirName=quickstartsRepository) {
    dir(dirName) {
        deleteDir()
        if (params.PR_TARGET_BRANCH) {
            githubscm.checkoutIfExists(quickstartsRepository, getGitAuthor(), getBuildBranch(), 'kiegroup', getQuickStartsBranch(), true)
        } else {
            checkout(githubscm.resolveRepository(quickstartsRepository, getGitAuthor(), getQuickStartsBranch(), false))
        }
    }
}

String getFallbackBranch(String repo) {
    def repositoryScm = githubscm.getRepositoryScm(repo, 'kiegroup', params.PR_TARGET_BRANCH)
    return repositoryScm ? params.PR_TARGET_BRANCH : 'master'
}

void prepareForPR(String repo) {
    dir(repo) {
        githubscm.forkRepo(getBotAuthorCredsID())
        githubscm.createBranch(getBotBranch())
    }
}

void commitAndCreatePR(String repo, String buildBranch) {
    dir(repo) {
        def commitMsg = "[${buildBranch}] Update project version to ${getProjectVersion()} for release"
        def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}.\nPlease do not merge, it will be merged automatically after testing."

        githubscm.commitChanges(commitMsg, {
            githubscm.findAndStageNotIgnoredFiles('pom.xml')
            githubscm.findAndStageNotIgnoredFiles('build.gradle')
        })
        githubscm.pushObject('origin', getBotBranch(), getBotAuthorCredsID())
        deployProperties["${repo}.pr.link"] = githubscm.createPR(commitMsg, prBody, buildBranch, getBotAuthorCredsID())
    }
}

void commitAndCreatePRIgnoringNpmRegistry(String repo, String buildBranch) {
    dir(repo) {
        sh 'sed \'s;repository.engineering.redhat.com/nexus/repository/;;\' -i */package-lock.json'
        sh 'git add */package-lock.json'
    }
    commitAndCreatePR(repo, buildBranch)
}

MavenCommand getMavenDefaultCommand() {
    MavenCommand mvnCmd = new MavenCommand(this, ['-fae']).withSettingsXmlId(env.MAVEN_SETTINGS_CONFIG_FILE_ID)
    if (env.MAVEN_DEPENDENCIES_REPOSITORY) {
        mvnCmd.withDependencyRepositoryInSettings('deps-repo', env.MAVEN_DEPENDENCIES_REPOSITORY)
    }
    return mvnCmd
}

MavenCommand getOptaplannerMavenCommand() {
    return getMavenDefaultCommand().inDirectory(optaplannerRepository).withProperty('full')
}

MavenCommand getOptaplannerQuickstartsMavenCommand() {
    return getMavenDefaultCommand().inDirectory(quickstartsRepository)
}

MavenCommand getOptawebVehicleRoutingMavenCommand() {
    return getMavenDefaultCommand().inDirectory(vehicleRoutingRepository)
}

MavenCommand getOptawebEmployeeRosteringMavenCommand() {
    return getMavenDefaultCommand().inDirectory(employeeRosteringRepository)
}

/**
 * Builds the parent modules and the BOM so that project depending on these artifacts can resolve.
 */
void mavenCleanInstallOptaPlannerParents() {
    getOptaplannerMavenCommand()
        .skipTests(true)
        .withOptions(['-U', '-pl org.optaplanner:optaplanner-build-parent,org.optaplanner:optaplanner-bom', '-am'])
        .run('clean install')
}

void deployMavenArtifacts(MavenCommand mvnCmd, String localDeployId) {
    if (env.MAVEN_DEPLOY_REPOSITORY && env.MAVEN_REPO_CREDS_ID) {
        // Deploy to specific repository with credentials
        runMavenDeployLocally(mvnCmd, localDeployId)
        maven.uploadLocalArtifacts(env.MAVEN_REPO_CREDS_ID, getLocalDeploymentFolder(localDeployId), getMavenRepoZipUrl())
    } else if (!isRelease() || env.MAVEN_DEPLOY_REPOSITORY) {
        // Normal deploy
        runMavenDeploy(mvnCmd)
    } else {
        // Deploy locally and then to staging
        runMavenDeployLocally(mvnCmd, localDeployId)
        runMavenStage(mvnCmd, localDeployId)
    }
}

void runMavenDeploy(MavenCommand mvnCmd) {
    mvnCmd = mvnCmd.clone()

    if (env.MAVEN_DEPLOY_REPOSITORY) {
        mvnCmd.withDeployRepository(env.MAVEN_DEPLOY_REPOSITORY)
    }

    mvnCmd.skipTests(true).run('clean deploy')
}

String getMavenRepoZipUrl() {
    return "${params.MAVEN_DEPLOY_REPOSITORY.replaceAll('/content/', '/service/local/').replaceFirst('/*$', '')}/content-compressed"
}

void runMavenDeployLocally(MavenCommand mvnCmd, String localDeployId) {
    mvnCmd.clone()
        .skipTests(true)
        .withLocalDeployFolder(getLocalDeploymentFolder(localDeployId))
        .run('clean deploy')
}

void runMavenStage(MavenCommand mvnCmd, String localDeployId) {
    MavenStagingHelper stagingHelper = getStagingHelper(mvnCmd)
    deployProperties.putAll(stagingHelper.stageLocalArtifacts(env.NEXUS_STAGING_PROFILE_ID, getLocalDeploymentFolder(localDeployId)))
    stagingHelper.promoteStagingRepository(env.NEXUS_BUILD_PROMOTION_PROFILE_ID)
}

MavenStagingHelper getStagingHelper(MavenCommand mvnCmd) {
    return new MavenStagingHelper(this, mvnCmd)
                .withNexusReleaseUrl(env.NEXUS_RELEASE_URL)
                .withNexusReleaseRepositoryId(env.NEXUS_RELEASE_REPOSITORY_ID)
}

String getLocalDeploymentFolder(String localDeployId) {
    return "${env.MAVEN_DEPLOY_LOCAL_DIR}/${localDeployId}"
}

// Getters and Setters of params/properties

boolean isRelease() {
    return env.RELEASE.toBoolean()
}

boolean isCreatePr() {
    return params.CREATE_PR
}

String getGitAuthor() {
    // GIT_AUTHOR can be env or param
    return "${GIT_AUTHOR}"
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getKogitoVersion() {
    return params.KOGITO_VERSION
}

String getProjectVersion() {
    return params.PROJECT_VERSION
}

String getBotBranch() {
    return "${getProjectVersion()}-${env.BOT_BRANCH_HASH}"
}

String getBotAuthor() {
    return env.GIT_AUTHOR_BOT
}

String getBotAuthorCredsID() {
    return env.BOT_CREDENTIALS_ID
}

void setDeployPropertyIfNeeded(String key, def value) {
    if (value != null && value != '') {
        deployProperties[key] = value
    }
}

String getQuickStartsBranch(){
    return params.QUICKSTARTS_BUILD_BRANCH_NAME
}
