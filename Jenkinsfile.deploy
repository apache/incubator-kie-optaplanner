import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand
import org.kie.jenkins.MavenStagingHelper

deployProperties = [:]

optaplannerRepository = 'optaplanner'
quickstartsRepository = 'optaplanner-quickstarts'
vehicleRoutingRepository = 'optaweb-vehicle-routing'
employeeRosteringRepository = 'optaweb-employee-rostering'

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem16g'
    }

    tools {
        maven 'kie-maven-3.6.3'
        jdk 'kie-jdk11'
    }

    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
        timeout(time: 120, unit: 'MINUTES')
    }

    parameters {

        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')

        // Git information
        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Which branch to build? Set if you are not on a multibranch pipeline.')
        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')

        // Build&test information
        string(name: 'MAVEN_DEPENDENCIES_REPOSITORY', defaultValue: '', description: 'Maven repository where to find dependencies if those are not in the default JBoss repository.')
        string(name: 'MAVEN_REPO_CREDS_ID', defaultValue: '', description: 'Credentials for Maven repository to deploy the artifacts.')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip tests')
        string(name: 'MAVEN_SETTINGS_CONFIG_FILE_ID', defaultValue: 'kogito_release_settings', description: 'Maven settings configfile to use in pipeline for Maven commands')

        // Deploy information
        string(name: 'MAVEN_DEPLOY_REPOSITORY', defaultValue: '', description: 'Specify a Maven repository to deploy the artifacts.')

        // Release information
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this build for a release?')
        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Optional if not RELEASE. If RELEASE, cannot be empty.')
        string(name: 'KOGITO_VERSION', defaultValue: '', description: 'Optional if not RELEASE. If RELEASE, cannot be empty.')
        
        // Nexus staging default parameters
        string(name: 'NEXUS_RELEASE_URL', defaultValue: 'https://repository.jboss.org/nexus', description: 'Nexus URL for release staging')
        string(name: 'NEXUS_RELEASE_REPOSITORY_ID', defaultValue: 'jboss-releases-repository', description: 'Nexus Release repository ID for staging')
        string(name: 'NEXUS_STAGING_PROFILE_ID', defaultValue: '2161b7b8da0080', description: 'Nexus staging profile ID for release process ')
        string(name: 'NEXUS_BUILD_PROMOTION_PROFILE_ID', defaultValue: 'ea49ccd6f174', description: 'Nexus Build Promotion profile ID for release process')

        // Bot author information. Set as params for easy testing.
        string(name: 'GIT_AUTHOR_BOT', defaultValue: 'bsig-gh-bot', description: 'From which author should the PR be created ?')
        string(name: 'BOT_CREDENTIALS_ID', defaultValue: 'bsig-gh-bot', description: 'Credentials for PR creation')

        // PR parameter to be filled out for PR checks
        string(name: 'PR_TARGET_BRANCH', defaultValue: '', description: 'What is the target branch of the PR?')
    }

    environment {
        MAVEN_OPTS = '-Xms1024m -Xmx4g'

        BOT_BRANCH_HASH = "${util.generateHash(10)}"

        // Maven configuration
        MAVEN_DEPLOY_LOCAL_DIR="${WORKSPACE}/maven_deploy_dir"
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    cleanWs()

                    if (params.DISPLAY_NAME != '') {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    if (isRelease()) {
                        assert getProjectVersion() != ''
                        assert getKogitoVersion() != ''
                    }
                }
            }
            post {
                success {
                    script {
                        setDeployPropertyIfNeeded('git.branch', getBuildBranch())
                        setDeployPropertyIfNeeded('git.branchQuickstarts', getQuickStartsBranch())
                        setDeployPropertyIfNeeded('git.author', getGitAuthor())
                        setDeployPropertyIfNeeded('project.version', getProjectVersion())
                        setDeployPropertyIfNeeded('release', isRelease())
                        setDeployPropertyIfNeeded('kogito.version', getKogitoVersion())
                    }
                }
            }
        }

        stage('Clone repositories') {
            steps {
                checkoutRepo(optaplannerRepository)
                checkoutQuickstarts()
                checkoutRepo(vehicleRoutingRepository)
                checkoutRepo(employeeRosteringRepository)
            }
        }

        stage('Prepare for PR') {
            when {
                expression { return isRelease() }
            }
            steps {
                prepareForPR(optaplannerRepository)
                prepareForPR(vehicleRoutingRepository)
                prepareForPR(employeeRosteringRepository)
                prepareForPR(quickstartsRepository)
            }
        }

        stage('Update project version') {
            when {
                expression { return getProjectVersion() != '' }
            }
            steps {
                script {
                    maven.mvnVersionsSet(getOptaplannerMavenCommand(), getProjectVersion())
                    maven.mvnSetVersionProperty(getOptaplannerMavenCommand(), 'version.org.kie.kogito', getKogitoVersion())

                    mavenCleanInstallOptaPlannerParents()

                    maven.mvnVersionsUpdateParentAndChildModules(getOptawebVehicleRoutingMavenCommand(), getProjectVersion())
                    maven.mvnVersionsUpdateParentAndChildModules(getOptawebEmployeeRosteringMavenCommand(), getProjectVersion())

                    updateQuickstartsVersions()
                    //TODO remove after testing pipeline
                    commitAndCreatePR(quickstartsRepository, getQuickStartsTarget())
                }
            }
        }
    }
}

void updateQuickstartsVersions(){
    maven.mvnSetVersionProperty(getOptaplannerQuickstartsMavenCommand(),"version.org.optaplanner",getProjectVersion())
    maven.mvnVersionsUpdateParentAndChildModules(getOptaplannerQuickstartsMavenCommand(), getProjectVersion())
    gradleVersionsUpdate(quickstartsRepository,getProjectVersion())
    removeJbossNexusFromMavenAndGradle(quickstartsRepository)

    dir(quickstartsRepository) {
        def snapshots = sh (script: 'grep -Rn "SNAPSHOT" --include={pom.xml,build.gradle}| grep -v -e "0.1.0-SNAPSHOT" -e ">1.0-SNAPSHOT"|cat'
                , allowEmptyResults: true, returnStdout: true)
        assert !snapshots
        assert !sh (script: 'grep -Rnq "repository.jboss.org" --include={pom.xml,build.gradle}|cat'
                , allowEmptyResults: true, returnStdout: true)
    }
}

void removeJbossNexusFromMavenAndGradle(String repo) {
    dir(repo){
        sh '''
            sed -i \':a;N;$!ba;s/\\n *<repositories>.*<\\/repositories>//g\' */pom.xml
            sed -i \':a;N;$!ba;s/\\n *<repositories>.*<\\/repositories>//g\' pom.xml
            sed -i \':a;N;$!ba;s/\\n *\\/\\/ To get snapshots during development[^{}]*maven {[^{}]*mavenContent {[^{}]*snapshotsOnly[^{}]*}[^{}]*}//g\' */build.gradle
        '''
    }
}

void gradleVersionsUpdate(String repo, String newVersion){
    dir(repo) {
        sh '''sed -i -E 's/def optaplannerVersion = \"[^\"\\s]+\"/def optaplannerVersion = \"'''${newVersion}'''\"/' */build.gradle'''
    }
}

void saveReports(boolean allowEmpty=false){
    junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: allowEmpty
}

void checkoutRepo(String repo, String dirName=repo) {
    dir(dirName) {
        deleteDir()
        if (params.PR_TARGET_BRANCH) {
            githubscm.checkoutIfExists(repo, getGitAuthor(), getBuildBranch(), 'kiegroup', getFallbackBranch(repo), true)
        } else {
            checkout(githubscm.resolveRepository(repo, getGitAuthor(), getBuildBranch(), false))
        }
    }
}

void checkoutQuickstarts(String dirName=quickstartsRepository) {
    dir(dirName) {
        deleteDir()
        if (params.PR_TARGET_BRANCH) {
            githubscm.checkoutIfExists(quickstartsRepository, getGitAuthor(), getQuickStartsBranch(), 'kiegroup', getQuickStartsBranch(), true)
        } else {
            checkout(githubscm.resolveRepository(quickstartsRepository, getGitAuthor(), getQuickStartsBranch(), false))
        }
    }
}

String getFallbackBranch(String repo) {
    def repositoryScm = githubscm.getRepositoryScm(repo, 'kiegroup', params.PR_TARGET_BRANCH)
    return repositoryScm ? params.PR_TARGET_BRANCH : 'master'
}

void prepareForPR(String repo) {
    dir(repo) {
        githubscm.forkRepo(getBotAuthorCredsID())
        githubscm.createBranch(getBotBranch())
    }
}
//TODO: remove target after testing pipeline
void commitAndCreatePR(String repo, String target = getBuildBranch()) {
    dir(repo) {
        def commitMsg = "[${getBuildBranch()}] Update project version to ${getProjectVersion()} for release"
        def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}.\nPlease do not merge, it will be merged automatically after testing."

        githubscm.commitChanges(commitMsg, { githubscm.findAndStageNotIgnoredFiles('pom.xml') })
        githubscm.pushObject('origin', getBotBranch(), getBotAuthorCredsID())
        deployProperties["${repo}.pr.link"] = githubscm.createPR(commitMsg, prBody, target, getBotAuthorCredsID())
    }
}

void commitAndCreatePRIgnoringNpmRegistry(String repo) {
    dir(repo) {
        sh 'sed \'s;repository.engineering.redhat.com/nexus/repository/;;\' -i */package-lock.json'
        sh 'git add */package-lock.json'
    }
    commitAndCreatePR(repo)
}

MavenCommand getMavenDefaultCommand(){
    MavenCommand mvnCmd = new MavenCommand(this, ['-fae']).withSettingsXmlId(params.MAVEN_SETTINGS_CONFIG_FILE_ID)
    if (params.MAVEN_DEPENDENCIES_REPOSITORY) {
        mvnCmd.withDependencyRepositoryInSettings('deps-repo', params.MAVEN_DEPENDENCIES_REPOSITORY)
    }
    return mvnCmd
}

MavenCommand getOptaplannerMavenCommand(){
    return getMavenDefaultCommand().inDirectory(optaplannerRepository).withProperty('full')
}

MavenCommand getOptaplannerQuickstartsMavenCommand(){
    return getMavenDefaultCommand().inDirectory(quickstartsRepository)
}

MavenCommand getOptawebVehicleRoutingMavenCommand(){
    return getMavenDefaultCommand().inDirectory(vehicleRoutingRepository)
}

MavenCommand getOptawebEmployeeRosteringMavenCommand(){
    return getMavenDefaultCommand().inDirectory(employeeRosteringRepository)
}

/**
 * Builds the parent modules and the BOM so that project depending on these artifacts can resolve.
 */
void mavenCleanInstallOptaPlannerParents() {
    getOptaplannerMavenCommand()
        .skipTests(true)
        .withOptions(['-U', '-pl org.optaplanner:optaplanner-build-parent,org.optaplanner:optaplanner-bom', '-am'])
        .run('clean install')
}

void deployMavenArtifacts(MavenCommand mvnCmd, String localDeployId){
    if (params.MAVEN_DEPLOY_REPOSITORY && params.MAVEN_REPO_CREDS_ID) {
        // Deploy to specific repository with credentials
        runMavenDeployLocally(mvnCmd, localDeployId)
        maven.uploadLocalArtifacts(params.MAVEN_REPO_CREDS_ID, getLocalDeploymentFolder(localDeployId), getMavenRepoZipUrl())
    } else if(!isRelease() || params.MAVEN_DEPLOY_REPOSITORY){
        // Normal deploy
        runMavenDeploy(mvnCmd)
    } else {
        // Deploy locally and then to staging
        runMavenDeployLocally(mvnCmd, localDeployId)
        runMavenStage(mvnCmd, localDeployId)
    }
}

void runMavenDeploy(MavenCommand mvnCmd) {
    mvnCmd= mvnCmd.clone()
    
    if(params.MAVEN_DEPLOY_REPOSITORY) {
        mvnCmd.withDeployRepository(params.MAVEN_DEPLOY_REPOSITORY)
    }

    mvnCmd.skipTests(true).run('clean deploy')
}

String getMavenRepoZipUrl() {
     return "${params.MAVEN_DEPLOY_REPOSITORY.replaceAll('/content/', '/service/local/').replaceFirst('/*$', '')}/content-compressed"
}

void runMavenDeployLocally(MavenCommand mvnCmd, String localDeployId) {
    mvnCmd.clone()
        .skipTests(true)
        .withLocalDeployFolder(getLocalDeploymentFolder(localDeployId))
        .run('clean deploy')
}

void runMavenStage(MavenCommand mvnCmd, String localDeployId) {
    MavenStagingHelper stagingHelper = getStagingHelper(mvnCmd)
    deployProperties.putAll(stagingHelper.stageLocalArtifacts(params.NEXUS_STAGING_PROFILE_ID, getLocalDeploymentFolder(localDeployId)))
    stagingHelper.promoteStagingRepository(params.NEXUS_BUILD_PROMOTION_PROFILE_ID)
}

MavenStagingHelper getStagingHelper(MavenCommand mvnCmd) {
    return new MavenStagingHelper(this, mvnCmd)
                .withNexusReleaseUrl(params.NEXUS_RELEASE_URL)
                .withNexusReleaseRepositoryId(params.NEXUS_RELEASE_REPOSITORY_ID)
}

String getLocalDeploymentFolder(String localDeployId) {
    return "${env.MAVEN_DEPLOY_LOCAL_DIR}/${localDeployId}"
}

// Getters and Setters of params/properties

boolean isRelease() {
    return params.RELEASE
}

String getGitAuthor() {
    return params.GIT_AUTHOR
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getKogitoVersion() {
    return params.KOGITO_VERSION
}

String getProjectVersion(){
    return params.PROJECT_VERSION
}

String getBotBranch(){
    return "${getProjectVersion()}-${env.BOT_BRANCH_HASH}"
}

String getBotAuthor(){
    return params.GIT_AUTHOR_BOT
}

String getBotAuthorCredsID(){
    return params.BOT_CREDENTIALS_ID
}

void setDeployPropertyIfNeeded(String key, def value) {
    if (value != null && value != ''){
        deployProperties[key] = value
    }
}

String getQuickStartsBranch(String quickStartsBranch = 'development'){
    return quickStartsBranch
}
//TODO: remove after testing pipeline
String getQuickStartsTarget(String quickStartsTarget = 'stable'){
    return quickStartsTarget
}